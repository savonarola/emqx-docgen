{
  "doc": "",
  "fields": [
    {
      "hash": "V-listeners",
      "refs": [
        {
          "doc": "MQTT listeners identified by their protocol type and assigned names",
          "fields": [
            {
              "doc": "TCP listeners.",
              "hash": "V-listeners-S-listeners-tcp",
              "refs": [
                {
                  "doc": "Settings for the MQTT over TCP listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable listener.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "1883",
                      "doc": "IP address and port for the listening socket.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "The size of the listener's receiving pool.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"infinity\"",
                      "doc": "The maximum number of concurrent connections allowed by the listener.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "The configuration zone to which the listener belongs.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "Type of the rate limit.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "Specify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog defines the maximum length that the queue of\npending connections can grow to.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "The TCP send timeout for the connections.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "Close the connection if send timeout.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "The TCP receive buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "The TCP send buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "The size of the user-space buffer used by the driver.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "The socket is set to a busy state when the amount of data queued internally\nby the VM socket implementation reaches this limit.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "The TCP_NODELAY flag for the connections.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "The SO_REUSEADDR flag for the connections.",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener",
                  "text": "mqtt_tcp_listener"
                }
              ],
              "text": "tcp",
              "type": "Map($name->Struct(mqtt_tcp_listener))"
            },
            {
              "doc": "SSL listeners.",
              "hash": "V-listeners-S-listeners-ssl",
              "refs": [
                {
                  "doc": "Settings for the MQTT over SSL listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable listener.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8883",
                      "doc": "IP address and port for the listening socket.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "The size of the listener's receiving pool.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"infinity\"",
                      "doc": "The maximum number of concurrent connections allowed by the listener.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "The configuration zone to which the listener belongs.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "Type of the rate limit.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "Specify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog defines the maximum length that the queue of\npending connections can grow to.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "The TCP send timeout for the connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "Close the connection if send timeout.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "The TCP receive buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "The TCP send buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "The size of the user-space buffer used by the driver.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "The socket is set to a busy state when the amount of data queued internally\nby the VM socket implementation reaches this limit.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "The TCP_NODELAY flag for the connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "The SO_REUSEADDR flag for the connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "Socket options for SSL connections.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Maximum time duration allowed for the handshake to complete",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Memory usage tuning. If enabled, will immediately perform a garbage collection after the TLS/SSL handshake.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-gc_after_handshake",
                              "text": "gc_after_handshake",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "Whether to enable CRL verification for this listener.",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-enable_crl_check",
                              "text": "enable_crl_check",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts",
                          "text": "listener_ssl_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_ssl_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener",
                  "text": "mqtt_ssl_listener"
                }
              ],
              "text": "ssl",
              "type": "Map($name->Struct(mqtt_ssl_listener))"
            },
            {
              "doc": "HTTP websocket listeners.",
              "hash": "V-listeners-S-listeners-ws",
              "refs": [
                {
                  "doc": "Settings for the MQTT over WebSocket listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable listener.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8083",
                      "doc": "IP address and port for the listening socket.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "The size of the listener's receiving pool.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"infinity\"",
                      "doc": "The maximum number of concurrent connections allowed by the listener.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "The configuration zone to which the listener belongs.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "Type of the rate limit.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "Specify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog defines the maximum length that the queue of\npending connections can grow to.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "The TCP send timeout for the connections.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "Close the connection if send timeout.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "The TCP receive buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "The TCP send buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "The size of the user-space buffer used by the driver.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "The socket is set to a busy state when the amount of data queued internally\nby the VM socket implementation reaches this limit.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "The TCP_NODELAY flag for the connections.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "The SO_REUSEADDR flag for the connections.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket",
                      "refs": [
                        {
                          "doc": "WebSocket listener options.",
                          "fields": [
                            {
                              "default": "\"/mqtt\"",
                              "doc": "WebSocket's MQTT protocol path. So the address of EMQX Broker's WebSocket is:\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_path",
                              "text": "mqtt_path",
                              "type": "String"
                            },
                            {
                              "default": "multiple",
                              "doc": "Whether a WebSocket message is allowed to contain multiple MQTT packets.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text": "mqtt_piggyback",
                              "type": "Enum(single,multiple)"
                            },
                            {
                              "default": "false",
                              "doc": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-compress",
                              "text": "compress",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"7200s\"",
                              "doc": "Close transport-layer connections from the clients that have not sent MQTT CONNECT message within this interval.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-idle_timeout",
                              "text": "idle_timeout",
                              "type": "String"
                            },
                            {
                              "default": "infinity",
                              "doc": "The maximum length of a single MQTT packet.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-max_frame_size",
                              "text": "max_frame_size",
                              "type": "OneOf(String(\"infinity\"),Integer)"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text": "fail_if_no_subprotocol",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
                              "doc": "Comma-separated list of supported subprotocols.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text": "supported_subprotocols",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "If <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origin_enable",
                              "text": "check_origin_enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text": "allow_origin_absence",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"http://localhost:18083, http://127.0.0.1:18083\"",
                              "doc": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origins",
                              "text": "check_origins",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-for\"",
                              "doc": "HTTP header used to pass information about the client IP address.\nRelevant when the EMQX cluster is deployed behind a load-balancer.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_address_header",
                              "text": "proxy_address_header",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-port\"",
                              "doc": "HTTP header used to pass information about the client port. Relevant when the EMQX cluster is deployed behind a load-balancer.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_port_header",
                              "text": "proxy_port_header",
                              "type": "String"
                            },
                            {
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts",
                              "refs": [
                                {
                                  "doc": "Compression options.",
                                  "fields": [
                                    {
                                      "doc": "Compression level.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text": "level",
                                      "type": "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "default": "8",
                                      "doc": "Specifies the size of the compression state.<br/>\nLower values decrease memory usage per connection.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text": "mem_level",
                                      "type": "Integer(1..9)"
                                    },
                                    {
                                      "default": "default",
                                      "doc": "Specifies the compression strategy.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text": "strategy",
                                      "type": "Enum(default,filtered,huffman_only,rle)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "Takeover means the compression state is retained between server messages.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text": "server_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "Takeover means the compression state is retained between client messages.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text": "client_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "Specifies the size of the compression context for the server.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text": "server_max_window_bits",
                                      "type": "Integer(8..15)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "Specifies the size of the compression context for the client.",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text": "client_max_window_bits",
                                      "type": "Integer(8..15)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "text": "deflate_opts"
                                }
                              ],
                              "text": "deflate_opts",
                              "type": "Struct(deflate_opts)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts",
                          "text": "ws_opts"
                        }
                      ],
                      "text": "websocket",
                      "type": "Struct(ws_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener",
                  "text": "mqtt_ws_listener"
                }
              ],
              "text": "ws",
              "type": "Map($name->Struct(mqtt_ws_listener))"
            },
            {
              "doc": "HTTPS websocket listeners.",
              "hash": "V-listeners-S-listeners-wss",
              "refs": [
                {
                  "doc": "Settings for the MQTT over WebSocket/SSL listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable listener.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8084",
                      "doc": "IP address and port for the listening socket.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "The size of the listener's receiving pool.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"infinity\"",
                      "doc": "The maximum number of concurrent connections allowed by the listener.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "The configuration zone to which the listener belongs.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "Type of the rate limit.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "Specify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog defines the maximum length that the queue of\npending connections can grow to.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "The TCP send timeout for the connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "Close the connection if send timeout.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "The TCP receive buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "The TCP send buffer (OS kernel) for the connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "The size of the user-space buffer used by the driver.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "The socket is set to a busy state when the amount of data queued internally\nby the VM socket implementation reaches this limit.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "The TCP_NODELAY flag for the connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "The SO_REUSEADDR flag for the connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "Socket options for WebSocket/SSL connections.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Maximum time duration allowed for the handshake to complete",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts",
                          "text": "listener_wss_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_wss_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket",
                      "refs": [
                        {
                          "doc": "WebSocket listener options.",
                          "fields": [
                            {
                              "default": "\"/mqtt\"",
                              "doc": "WebSocket's MQTT protocol path. So the address of EMQX Broker's WebSocket is:\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_path",
                              "text": "mqtt_path",
                              "type": "String"
                            },
                            {
                              "default": "multiple",
                              "doc": "Whether a WebSocket message is allowed to contain multiple MQTT packets.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text": "mqtt_piggyback",
                              "type": "Enum(single,multiple)"
                            },
                            {
                              "default": "false",
                              "doc": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-compress",
                              "text": "compress",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"7200s\"",
                              "doc": "Close transport-layer connections from the clients that have not sent MQTT CONNECT message within this interval.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-idle_timeout",
                              "text": "idle_timeout",
                              "type": "String"
                            },
                            {
                              "default": "infinity",
                              "doc": "The maximum length of a single MQTT packet.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-max_frame_size",
                              "text": "max_frame_size",
                              "type": "OneOf(String(\"infinity\"),Integer)"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text": "fail_if_no_subprotocol",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
                              "doc": "Comma-separated list of supported subprotocols.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text": "supported_subprotocols",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "If <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origin_enable",
                              "text": "check_origin_enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text": "allow_origin_absence",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"http://localhost:18083, http://127.0.0.1:18083\"",
                              "doc": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origins",
                              "text": "check_origins",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-for\"",
                              "doc": "HTTP header used to pass information about the client IP address.\nRelevant when the EMQX cluster is deployed behind a load-balancer.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_address_header",
                              "text": "proxy_address_header",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-port\"",
                              "doc": "HTTP header used to pass information about the client port. Relevant when the EMQX cluster is deployed behind a load-balancer.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_port_header",
                              "text": "proxy_port_header",
                              "type": "String"
                            },
                            {
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts",
                              "refs": [
                                {
                                  "doc": "Compression options.",
                                  "fields": [
                                    {
                                      "doc": "Compression level.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text": "level",
                                      "type": "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "default": "8",
                                      "doc": "Specifies the size of the compression state.<br/>\nLower values decrease memory usage per connection.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text": "mem_level",
                                      "type": "Integer(1..9)"
                                    },
                                    {
                                      "default": "default",
                                      "doc": "Specifies the compression strategy.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text": "strategy",
                                      "type": "Enum(default,filtered,huffman_only,rle)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "Takeover means the compression state is retained between server messages.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text": "server_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "Takeover means the compression state is retained between client messages.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text": "client_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "Specifies the size of the compression context for the server.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text": "server_max_window_bits",
                                      "type": "Integer(8..15)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "Specifies the size of the compression context for the client.",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text": "client_max_window_bits",
                                      "type": "Integer(8..15)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "text": "deflate_opts"
                                }
                              ],
                              "text": "deflate_opts",
                              "type": "Struct(deflate_opts)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts",
                          "text": "ws_opts"
                        }
                      ],
                      "text": "websocket",
                      "type": "Struct(ws_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener",
                  "text": "mqtt_wss_listener"
                }
              ],
              "text": "wss",
              "type": "Map($name->Struct(mqtt_wss_listener))"
            },
            {
              "doc": "QUIC listeners.",
              "hash": "V-listeners-S-listeners-quic",
              "refs": [
                {
                  "doc": "Settings for the MQTT over QUIC listener.",
                  "fields": [
                    {
                      "doc": "Path to the certificate file. Will be deprecated in 5.1, use .ssl_options.certfile instead.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "Path to the secret key file. Will be deprecated in 5.1, use .ssl_options.keyfile instead.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "[\"TLS_AES_256_GCM_SHA384\", \"TLS_AES_128_GCM_SHA256\", \"TLS_CHACHA20_POLY1305_SHA256\"]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\nNOTE: QUIC listener supports only 'tlsv1.3' ciphers",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "0",
                      "doc": "How long a connection can go idle before it is gracefully shut down. 0 to disable",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-idle_timeout",
                      "text": "idle_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"10s\"",
                      "doc": "How long a handshake can idle before it is discarded.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-handshake_idle_timeout",
                      "text": "handshake_idle_timeout",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "How often to send PING frames to keep a connection alive. 0 means disabled.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-keep_alive_interval",
                      "text": "keep_alive_interval",
                      "type": "String"
                    },
                    {
                      "doc": "TLS options for QUIC transport",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "TLS options for QUIC transport.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-gc_after_handshake",
                              "text": "gc_after_handshake",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-enable_crl_check",
                              "text": "enable_crl_check",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts",
                          "text": "listener_quic_ssl_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_quic_ssl_opts)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable listener.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "14567",
                      "doc": "IP address and port for the listening socket.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "The size of the listener's receiving pool.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"infinity\"",
                      "doc": "The maximum number of concurrent connections allowed by the listener.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "When publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "The configuration zone to which the listener belongs.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "Type of the rate limit.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of this token bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "Rate for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "The initial number of tokens for this bucket.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "The capacity of per user.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "Is it possible to split the number of requested tokens?",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "The maximum retry time when acquire failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "The strategy when all the retries failed.",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener",
                  "text": "mqtt_quic_listener"
                }
              ],
              "text": "quic",
              "type": "Map($name->Struct(mqtt_quic_listener))"
            }
          ],
          "hash": "T-listeners-S-listeners",
          "text": "listeners"
        }
      ],
      "text": "listeners",
      "type": "Struct(listeners)"
    },
    {
      "doc": "A zone is a set of configs grouped by the zone <code>name</code>.\nFor flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.\nNOTE: A built-in zone named <code>default</code> is auto created and can not be deleted.",
      "hash": "V-zones",
      "refs": [
        {
          "doc": "A `Zone` defines a set of configuration items (such as the maximum number of connections) that can be shared between multiple listeners.\n\n`Listener` can refer to a `Zone` through the configuration item <code>listener.\\<Protocol>.\\<Listener Name>.zone</code>.\n\nThe configs defined in the zones will override the global configs with the same key.\n\nFor example, given the following config:\n```\na {\n    b: 1, c: 1\n}\nzone.my_zone {\n  a {\n    b:2\n  }\n}\n```\n\nThe global config `a` is overridden by the configs `a` inside the zone `my_zone`.\n\nIf there is a listener using the zone `my_zone`, the value of config `a` will be: `{b:2, c: 1}`.\nNote that although the default value of `a.c` is `0`, the global value is used, i.e. configs in the zone have no default values. To override `a.c` one must configure it explicitly in the zone.\n\nAll the global configs that can be overridden in zones are:\n - `stats.*`\n - `mqtt.*`\n - `authorization.*`\n - `flapping_detect.*`\n - `force_shutdown.*`\n - `conn_congestion.*`\n - `force_gc.*`\n\n",
          "fields": [
            {
              "hash": "V-zones-S-zone-mqtt",
              "refs": [
                {
                  "doc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
                  "fields": [
                    {
                      "doc": "Configure the duration of time that a connection can remain idle (i.e., without any data transfer) before being:\n  - Automatically disconnected  if no CONNECT package is received from the client yet.\n  - Put into hibernation mode to save resources if some CONNECT packages are already received.\nNote: Please set the parameter with caution as long idle time will lead to resource waste.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-idle_timeout",
                      "text": "idle_timeout",
                      "type": "OneOf(String(\"infinity\"),String)"
                    },
                    {
                      "doc": "Maximum MQTT packet size allowed.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_packet_size",
                      "text": "max_packet_size",
                      "type": "String"
                    },
                    {
                      "doc": "Maximum allowed length of MQTT Client ID.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_clientid_len",
                      "text": "max_clientid_len",
                      "type": "Integer(23..65535)"
                    },
                    {
                      "doc": "Maximum topic levels allowed.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_topic_levels",
                      "text": "max_topic_levels",
                      "type": "Integer(1..65535)"
                    },
                    {
                      "doc": "Maximum QoS allowed.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_qos_allowed",
                      "text": "max_qos_allowed",
                      "type": "Integer(0..2)"
                    },
                    {
                      "doc": "Maximum topic alias, 0 means no topic alias supported.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_topic_alias",
                      "text": "max_topic_alias",
                      "type": "Integer(0..65535)"
                    },
                    {
                      "doc": "Whether to enable support for MQTT retained message.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-retain_available",
                      "text": "retain_available",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether to enable support for MQTT wildcard subscription.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-wildcard_subscription",
                      "text": "wildcard_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether to enable support for MQTT shared subscription.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-shared_subscription",
                      "text": "shared_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether to enable support for MQTT exclusive subscription.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-exclusive_subscription",
                      "text": "exclusive_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether the messages sent by the MQTT v3.1.1/v3.1.0 client will be looped back to the publisher itself, similar to <code>No Local</code> in MQTT 5.0.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-ignore_loop_deliver",
                      "text": "ignore_loop_deliver",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether to parse MQTT messages in strict mode.\nIn strict mode, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-strict_mode",
                      "text": "strict_mode",
                      "type": "Boolean"
                    },
                    {
                      "doc": "UTF-8 string, for creating the response topic, for example, if set to <code>reqrsp/</code>, the publisher/subscriber will communicate using the topic prefix <code>reqrsp/</code>.\nTo disable this feature, input <code>\"\"</code> in the text box below. Only applicable to MQTT 5.0 clients.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-response_information",
                      "text": "response_information",
                      "type": "String"
                    },
                    {
                      "doc": "The keep alive duration required by EMQX. To use the setting from the client side, choose disabled from the drop-down list. Only applicable to MQTT 5.0 clients.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-server_keepalive",
                      "text": "server_keepalive",
                      "type": "OneOf(Integer,String(\"disabled\"))"
                    },
                    {
                      "doc": "The coefficient EMQX uses to confirm whether the keep alive duration of the client expires. Formula: Keep Alive * Backoff * 2",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-keepalive_backoff",
                      "text": "keepalive_backoff",
                      "type": "Number"
                    },
                    {
                      "doc": "Maximum number of subscriptions allowed per client.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_subscriptions",
                      "text": "max_subscriptions",
                      "type": "OneOf(Integer(1..inf),String(\"infinity\"))"
                    },
                    {
                      "doc": "Force upgrade of QoS level according to subscription.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-upgrade_qos",
                      "text": "upgrade_qos",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_inflight",
                      "text": "max_inflight",
                      "type": "Integer(1..65535)"
                    },
                    {
                      "doc": "Retry interval for QoS 1/2 message delivering.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "doc": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_awaiting_rel",
                      "text": "max_awaiting_rel",
                      "type": "OneOf(Integer,String(\"infinity\"))"
                    },
                    {
                      "doc": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-await_rel_timeout",
                      "text": "await_rel_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-session_expiry_interval",
                      "text": "session_expiry_interval",
                      "type": "String"
                    },
                    {
                      "doc": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_mqueue_len",
                      "text": "max_mqueue_len",
                      "type": "OneOf(Integer(0..+inf),String(\"infinity\"))"
                    },
                    {
                      "doc": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_priorities",
                      "text": "mqueue_priorities",
                      "type": "OneOf(Map,String(\"disabled\"))"
                    },
                    {
                      "doc": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>).",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_default_priority",
                      "text": "mqueue_default_priority",
                      "type": "Enum(highest,lowest)"
                    },
                    {
                      "doc": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_store_qos0",
                      "text": "mqueue_store_qos0",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Whether to use Username as Client ID.\nThis setting takes effect later than <code>Use Peer Certificate as Username</code> and <code>Use peer certificate as Client ID</code>.",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-use_username_as_clientid",
                      "text": "use_username_as_clientid",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: Content of the <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Username\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-peer_cert_as_username",
                      "text": "peer_cert_as_username",
                      "type": "Enum(disabled,cn,dn,crt,pem,md5)"
                    },
                    {
                      "doc": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Client ID\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-peer_cert_as_clientid",
                      "text": "peer_cert_as_clientid",
                      "type": "Enum(disabled,cn,dn,crt,pem,md5)"
                    }
                  ],
                  "hash": "T-zones-S-zone-mqtt-S-mqtt",
                  "text": "mqtt"
                }
              ],
              "text": "mqtt",
              "type": "Struct(mqtt)"
            },
            {
              "hash": "V-zones-S-zone-stats",
              "refs": [
                {
                  "doc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
                  "fields": [
                    {
                      "doc": "Enable/disable statistic data collection.",
                      "hash": "V-zones-S-zone-stats-S-stats-enable",
                      "text": "enable",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-zones-S-zone-stats-S-stats",
                  "text": "stats"
                }
              ],
              "text": "stats",
              "type": "Struct(stats)"
            },
            {
              "hash": "V-zones-S-zone-flapping_detect",
              "refs": [
                {
                  "doc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
                  "fields": [
                    {
                      "doc": "Enable flapping connection detection feature.",
                      "hash": "V-zones-S-zone-flapping_detect-S-flapping_detect-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
                      "hash": "V-zones-S-zone-flapping_detect-S-flapping_detect-max_count",
                      "text": "max_count",
                      "type": "Integer"
                    },
                    {
                      "doc": "The time window for flapping detection.",
                      "hash": "V-zones-S-zone-flapping_detect-S-flapping_detect-window_time",
                      "text": "window_time",
                      "type": "String"
                    },
                    {
                      "doc": "How long the flapping clientid will be banned.",
                      "hash": "V-zones-S-zone-flapping_detect-S-flapping_detect-ban_time",
                      "text": "ban_time",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-flapping_detect-S-flapping_detect",
                  "text": "flapping_detect"
                }
              ],
              "text": "flapping_detect",
              "type": "Struct(flapping_detect)"
            },
            {
              "hash": "V-zones-S-zone-force_shutdown",
              "refs": [
                {
                  "doc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
                  "fields": [
                    {
                      "doc": "Enable `force_shutdown` feature.",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Maximum message queue length.",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-max_message_queue_len",
                      "text": "max_message_queue_len",
                      "type": "Integer(0..inf)"
                    },
                    {
                      "doc": "Total heap size",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-max_heap_size",
                      "text": "max_heap_size",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-force_shutdown-S-force_shutdown",
                  "text": "force_shutdown"
                }
              ],
              "text": "force_shutdown",
              "type": "Struct(force_shutdown)"
            },
            {
              "hash": "V-zones-S-zone-conn_congestion",
              "refs": [
                {
                  "doc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
                  "fields": [
                    {
                      "doc": "Enable or disable connection congestion alarm.",
                      "hash": "V-zones-S-zone-conn_congestion-S-conn_congestion-enable_alarm",
                      "text": "enable_alarm",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Minimal time before clearing the alarm.<br/>The alarm is cleared only when there's no pending data in<br/>the queue, and at least <code>min_alarm_sustain_duration</code>milliseconds passed since the last time we considered the connection 'congested'.<br/>This is to avoid clearing and raising the alarm again too often.",
                      "hash": "V-zones-S-zone-conn_congestion-S-conn_congestion-min_alarm_sustain_duration",
                      "text": "min_alarm_sustain_duration",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-conn_congestion-S-conn_congestion",
                  "text": "conn_congestion"
                }
              ],
              "text": "conn_congestion",
              "type": "Struct(conn_congestion)"
            },
            {
              "hash": "V-zones-S-zone-force_gc",
              "refs": [
                {
                  "doc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
                  "fields": [
                    {
                      "doc": "Enable forced garbage collection.",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "GC the process after this many received messages.",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-count",
                      "text": "count",
                      "type": "Integer(0..inf)"
                    },
                    {
                      "doc": "GC the process after specified number of bytes have passed through.",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-bytes",
                      "text": "bytes",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-force_gc-S-force_gc",
                  "text": "force_gc"
                }
              ],
              "text": "force_gc",
              "type": "Struct(force_gc)"
            },
            {
              "hash": "V-zones-S-zone-overload_protection",
              "refs": [
                {
                  "doc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
                  "fields": [
                    {
                      "doc": "React on system overload or not.",
                      "hash": "V-zones-S-zone-overload_protection-S-overload_protection-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The maximum duration of delay for background task execution during high load conditions.",
                      "hash": "V-zones-S-zone-overload_protection-S-overload_protection-backoff_delay",
                      "text": "backoff_delay",
                      "type": "Integer(0..inf)"
                    },
                    {
                      "doc": "When at high load, skip forceful GC.",
                      "hash": "V-zones-S-zone-overload_protection-S-overload_protection-backoff_gc",
                      "text": "backoff_gc",
                      "type": "Boolean"
                    },
                    {
                      "doc": "When at high load, skip process hibernation.",
                      "hash": "V-zones-S-zone-overload_protection-S-overload_protection-backoff_hibernation",
                      "text": "backoff_hibernation",
                      "type": "Boolean"
                    },
                    {
                      "doc": "When at high load, close new incoming connections.",
                      "hash": "V-zones-S-zone-overload_protection-S-overload_protection-backoff_new_conn",
                      "text": "backoff_new_conn",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-zones-S-zone-overload_protection-S-overload_protection",
                  "text": "overload_protection"
                }
              ],
              "text": "overload_protection",
              "type": "Struct(overload_protection)"
            }
          ],
          "hash": "T-zones-S-zone",
          "text": "zone"
        }
      ],
      "text": "zones",
      "type": "Map($name->Struct(zone))"
    },
    {
      "doc": "Global MQTT configuration.\nThe configs here work as default values which can be overridden in <code>zone</code> configs",
      "hash": "V-mqtt",
      "refs": [
        {
          "doc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
          "fields": [
            {
              "default": "\"15s\"",
              "doc": "Configure the duration of time that a connection can remain idle (i.e., without any data transfer) before being:\n  - Automatically disconnected  if no CONNECT package is received from the client yet.\n  - Put into hibernation mode to save resources if some CONNECT packages are already received.\nNote: Please set the parameter with caution as long idle time will lead to resource waste.",
              "hash": "V-mqtt-S-mqtt-idle_timeout",
              "text": "idle_timeout",
              "type": "OneOf(String(\"infinity\"),String)"
            },
            {
              "default": "\"1MB\"",
              "doc": "Maximum MQTT packet size allowed.",
              "hash": "V-mqtt-S-mqtt-max_packet_size",
              "text": "max_packet_size",
              "type": "String"
            },
            {
              "default": "65535",
              "doc": "Maximum allowed length of MQTT Client ID.",
              "hash": "V-mqtt-S-mqtt-max_clientid_len",
              "text": "max_clientid_len",
              "type": "Integer(23..65535)"
            },
            {
              "default": "128",
              "doc": "Maximum topic levels allowed.",
              "hash": "V-mqtt-S-mqtt-max_topic_levels",
              "text": "max_topic_levels",
              "type": "Integer(1..65535)"
            },
            {
              "default": "2",
              "doc": "Maximum QoS allowed.",
              "hash": "V-mqtt-S-mqtt-max_qos_allowed",
              "text": "max_qos_allowed",
              "type": "Integer(0..2)"
            },
            {
              "default": "65535",
              "doc": "Maximum topic alias, 0 means no topic alias supported.",
              "hash": "V-mqtt-S-mqtt-max_topic_alias",
              "text": "max_topic_alias",
              "type": "Integer(0..65535)"
            },
            {
              "default": "true",
              "doc": "Whether to enable support for MQTT retained message.",
              "hash": "V-mqtt-S-mqtt-retain_available",
              "text": "retain_available",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "Whether to enable support for MQTT wildcard subscription.",
              "hash": "V-mqtt-S-mqtt-wildcard_subscription",
              "text": "wildcard_subscription",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "Whether to enable support for MQTT shared subscription.",
              "hash": "V-mqtt-S-mqtt-shared_subscription",
              "text": "shared_subscription",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "Whether to enable support for MQTT exclusive subscription.",
              "hash": "V-mqtt-S-mqtt-exclusive_subscription",
              "text": "exclusive_subscription",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "Whether the messages sent by the MQTT v3.1.1/v3.1.0 client will be looped back to the publisher itself, similar to <code>No Local</code> in MQTT 5.0.",
              "hash": "V-mqtt-S-mqtt-ignore_loop_deliver",
              "text": "ignore_loop_deliver",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "Whether to parse MQTT messages in strict mode.\nIn strict mode, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected.",
              "hash": "V-mqtt-S-mqtt-strict_mode",
              "text": "strict_mode",
              "type": "Boolean"
            },
            {
              "default": "\"\"",
              "doc": "UTF-8 string, for creating the response topic, for example, if set to <code>reqrsp/</code>, the publisher/subscriber will communicate using the topic prefix <code>reqrsp/</code>.\nTo disable this feature, input <code>\"\"</code> in the text box below. Only applicable to MQTT 5.0 clients.",
              "hash": "V-mqtt-S-mqtt-response_information",
              "text": "response_information",
              "type": "String"
            },
            {
              "default": "disabled",
              "doc": "The keep alive duration required by EMQX. To use the setting from the client side, choose disabled from the drop-down list. Only applicable to MQTT 5.0 clients.",
              "hash": "V-mqtt-S-mqtt-server_keepalive",
              "text": "server_keepalive",
              "type": "OneOf(Integer,String(\"disabled\"))"
            },
            {
              "default": "0.75",
              "doc": "The coefficient EMQX uses to confirm whether the keep alive duration of the client expires. Formula: Keep Alive * Backoff * 2",
              "hash": "V-mqtt-S-mqtt-keepalive_backoff",
              "text": "keepalive_backoff",
              "type": "Number"
            },
            {
              "default": "infinity",
              "doc": "Maximum number of subscriptions allowed per client.",
              "hash": "V-mqtt-S-mqtt-max_subscriptions",
              "text": "max_subscriptions",
              "type": "OneOf(Integer(1..inf),String(\"infinity\"))"
            },
            {
              "default": "false",
              "doc": "Force upgrade of QoS level according to subscription.",
              "hash": "V-mqtt-S-mqtt-upgrade_qos",
              "text": "upgrade_qos",
              "type": "Boolean"
            },
            {
              "default": "32",
              "doc": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
              "hash": "V-mqtt-S-mqtt-max_inflight",
              "text": "max_inflight",
              "type": "Integer(1..65535)"
            },
            {
              "default": "\"30s\"",
              "doc": "Retry interval for QoS 1/2 message delivering.",
              "hash": "V-mqtt-S-mqtt-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
              "hash": "V-mqtt-S-mqtt-max_awaiting_rel",
              "text": "max_awaiting_rel",
              "type": "OneOf(Integer,String(\"infinity\"))"
            },
            {
              "default": "\"300s\"",
              "doc": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
              "hash": "V-mqtt-S-mqtt-await_rel_timeout",
              "text": "await_rel_timeout",
              "type": "String"
            },
            {
              "default": "\"2h\"",
              "doc": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
              "hash": "V-mqtt-S-mqtt-session_expiry_interval",
              "text": "session_expiry_interval",
              "type": "String"
            },
            {
              "default": "1000",
              "doc": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
              "hash": "V-mqtt-S-mqtt-max_mqueue_len",
              "text": "max_mqueue_len",
              "type": "OneOf(Integer(0..+inf),String(\"infinity\"))"
            },
            {
              "default": "disabled",
              "doc": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
              "hash": "V-mqtt-S-mqtt-mqueue_priorities",
              "text": "mqueue_priorities",
              "type": "OneOf(Map,String(\"disabled\"))"
            },
            {
              "default": "lowest",
              "doc": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>).",
              "hash": "V-mqtt-S-mqtt-mqueue_default_priority",
              "text": "mqueue_default_priority",
              "type": "Enum(highest,lowest)"
            },
            {
              "default": "true",
              "doc": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains.",
              "hash": "V-mqtt-S-mqtt-mqueue_store_qos0",
              "text": "mqueue_store_qos0",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "Whether to use Username as Client ID.\nThis setting takes effect later than <code>Use Peer Certificate as Username</code> and <code>Use peer certificate as Client ID</code>.",
              "hash": "V-mqtt-S-mqtt-use_username_as_clientid",
              "text": "use_username_as_clientid",
              "type": "Boolean"
            },
            {
              "default": "disabled",
              "doc": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: Content of the <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Username\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
              "hash": "V-mqtt-S-mqtt-peer_cert_as_username",
              "text": "peer_cert_as_username",
              "type": "Enum(disabled,cn,dn,crt,pem,md5)"
            },
            {
              "default": "disabled",
              "doc": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: CN field of the certificate\n- <code>dn</code>: DN field of the certificate\n- <code>crt</code>: <code>DER</code> or <code>PEM</code> certificate\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Client ID\n- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate",
              "hash": "V-mqtt-S-mqtt-peer_cert_as_clientid",
              "text": "peer_cert_as_clientid",
              "type": "Enum(disabled,cn,dn,crt,pem,md5)"
            }
          ],
          "hash": "T-mqtt-S-mqtt",
          "text": "mqtt"
        }
      ],
      "text": "mqtt",
      "type": "Struct(mqtt)"
    },
    {
      "doc": "Default authentication configs for all MQTT listeners.\n\nFor per-listener overrides see <code>authentication</code> in listener configs\n\nThis option can be configured with:\n<ul>\n  <li><code>[]</code>: The default value, it allows *ALL* logins</li>\n  <li>one: For example <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>chain: An array of structs.</li>\n</ul>\n\nWhen a chain is configured, the login credentials are checked against the backends per the configured order, until an 'allow' or 'deny' decision can be made.\n\nIf there is no decision after a full chain exhaustion, the login is rejected.",
      "hash": "V-authentication",
      "refs": [
        {
          "doc": "Configuration of authenticator using built-in database as data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"built_in_database\")"
            },
            {
              "default": "\"username\"",
              "doc": "Specify whether to use `clientid` or `username` for authentication.",
              "hash": "V-authentication-S-authentication-user_id_type",
              "text": "user_id_type",
              "type": "Enum(clientid,username)"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash creation and verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    },
                    {
                      "default": "10",
                      "doc": "Salt rounds for BCRYPT password generation.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw-salt_rounds",
                      "text": "salt_rounds",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw",
                  "text": "bcrypt_rw"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt_rw),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "Configuration of authenticator using MySQL as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"mysql\")"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "doc": "SQL used to query data for authentication, such as password hash.",
              "hash": "V-authentication-S-authentication-query",
              "text": "query",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "Timeout for the SQL query.",
              "hash": "V-authentication-S-authentication-query_timeout",
              "text": "query_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MySQL default port 3306 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-authentication-server",
              "text": "server",
              "type": "String"
            },
            {
              "doc": "Database name.",
              "hash": "V-authentication-S-authentication-database",
              "text": "database",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-authentication-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "\"root\"",
              "doc": "EMQX's username in the external database.",
              "hash": "V-authentication-S-authentication-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-authentication-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-authentication-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-authentication-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "Configuration of authenticator using PostgreSQL as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"postgresql\")"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "doc": "SQL used to query data for authentication, such as password hash.",
              "hash": "V-authentication-S-authentication-query",
              "text": "query",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-authentication-server",
              "text": "server",
              "type": "String"
            },
            {
              "doc": "Database name.",
              "hash": "V-authentication-S-authentication-database",
              "text": "database",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-authentication-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's username in the external database.",
              "hash": "V-authentication-S-authentication-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-authentication-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-authentication-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-authentication-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "Configuration of authenticator using MongoDB (Standalone) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-standalone-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-standalone-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "Collection used to store authentication data.",
              "hash": "V-authentication-S-standalone-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
              "hash": "V-authentication-S-standalone-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "Document field that contains password hash.",
              "hash": "V-authentication-S-standalone-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "Document field that contains the password salt.",
              "hash": "V-authentication-S-standalone-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "Document field that defines if the user has superuser privileges.",
              "hash": "V-authentication-S-standalone-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-standalone-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-standalone-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "single",
              "doc": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode.",
              "hash": "V-authentication-S-standalone-mongo_type",
              "text": "mongo_type",
              "type": "String(\"single\")"
            },
            {
              "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-standalone-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "Write mode.",
              "hash": "V-authentication-S-standalone-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "false",
              "doc": "Use DNS SRV record.",
              "hash": "V-authentication-S-standalone-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-standalone-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's username in the external database.",
              "hash": "V-authentication-S-standalone-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-standalone-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Database name associated with the user's credentials.",
              "hash": "V-authentication-S-standalone-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "Database name.",
              "hash": "V-authentication-S-standalone-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-standalone-topology",
              "refs": [
                {
                  "doc": "Topology of MongoDB.",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "Max Overflow.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                      "hash": "V-authentication-S-standalone-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt a connection before timing out.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Specifies how long to block for server selection before throwing an exception.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The maximum duration that a worker can wait for a connection to become available.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Controls the minimum amount of time to wait between heartbeats.",
                      "hash": "V-authentication-S-standalone-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-standalone-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-standalone",
          "text": "standalone"
        },
        {
          "doc": "Configuration of authenticator using MongoDB (Replica Set) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-replica-set-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-replica-set-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "Collection used to store authentication data.",
              "hash": "V-authentication-S-replica-set-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
              "hash": "V-authentication-S-replica-set-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "Document field that contains password hash.",
              "hash": "V-authentication-S-replica-set-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "Document field that contains the password salt.",
              "hash": "V-authentication-S-replica-set-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "Document field that defines if the user has superuser privileges.",
              "hash": "V-authentication-S-replica-set-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-replica-set-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-replica-set-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "rs",
              "doc": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode.",
              "hash": "V-authentication-S-replica-set-mongo_type",
              "text": "mongo_type",
              "type": "String(\"rs\")"
            },
            {
              "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-replica-set-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "Write mode.",
              "hash": "V-authentication-S-replica-set-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "master",
              "doc": "Read mode.",
              "hash": "V-authentication-S-replica-set-r_mode",
              "text": "r_mode",
              "type": "Enum(master,slave_ok)"
            },
            {
              "doc": "Name of the replica set.",
              "hash": "V-authentication-S-replica-set-replica_set_name",
              "text": "replica_set_name",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "Use DNS SRV record.",
              "hash": "V-authentication-S-replica-set-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-replica-set-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's username in the external database.",
              "hash": "V-authentication-S-replica-set-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-replica-set-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Database name associated with the user's credentials.",
              "hash": "V-authentication-S-replica-set-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "Database name.",
              "hash": "V-authentication-S-replica-set-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-replica-set-topology",
              "refs": [
                {
                  "doc": "Topology of MongoDB.",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "Max Overflow.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt a connection before timing out.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Specifies how long to block for server selection before throwing an exception.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The maximum duration that a worker can wait for a connection to become available.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Controls the minimum amount of time to wait between heartbeats.",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-replica-set-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-replica-set",
          "text": "replica-set"
        },
        {
          "doc": "Configuration of authenticator using MongoDB (Sharded Cluster) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-sharded-cluster-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-sharded-cluster-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "Collection used to store authentication data.",
              "hash": "V-authentication-S-sharded-cluster-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
              "hash": "V-authentication-S-sharded-cluster-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "Document field that contains password hash.",
              "hash": "V-authentication-S-sharded-cluster-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "Document field that contains the password salt.",
              "hash": "V-authentication-S-sharded-cluster-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "Document field that defines if the user has superuser privileges.",
              "hash": "V-authentication-S-sharded-cluster-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-sharded-cluster-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "sharded",
              "doc": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode.",
              "hash": "V-authentication-S-sharded-cluster-mongo_type",
              "text": "mongo_type",
              "type": "String(\"sharded\")"
            },
            {
              "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-sharded-cluster-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "Write mode.",
              "hash": "V-authentication-S-sharded-cluster-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "false",
              "doc": "Use DNS SRV record.",
              "hash": "V-authentication-S-sharded-cluster-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-sharded-cluster-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's username in the external database.",
              "hash": "V-authentication-S-sharded-cluster-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-sharded-cluster-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Database name associated with the user's credentials.",
              "hash": "V-authentication-S-sharded-cluster-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "Database name.",
              "hash": "V-authentication-S-sharded-cluster-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-sharded-cluster-topology",
              "refs": [
                {
                  "doc": "Topology of MongoDB.",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "Max Overflow.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt a connection before timing out.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Specifies how long to block for server selection before throwing an exception.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "The maximum duration that a worker can wait for a connection to become available.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "Controls the minimum amount of time to wait between heartbeats.",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-sharded-cluster-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-sharded-cluster",
          "text": "sharded-cluster"
        },
        {
          "doc": "Configuration of authenticator using Redis (Standalone) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-standalone-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-standalone-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>.",
              "hash": "V-authentication-S-standalone-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-standalone-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-standalone-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-standalone-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "single",
              "doc": "Single mode. Must be set to 'single' when Redis server is running in single mode.",
              "hash": "V-authentication-S-standalone-redis_type",
              "text": "redis_type",
              "type": "String(\"single\")"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-standalone-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-standalone-password",
              "text": "password",
              "type": "String"
            },
            {
              "default": "0",
              "doc": "Redis database ID.",
              "hash": "V-authentication-S-standalone-database",
              "text": "database",
              "type": "Integer"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-standalone-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-standalone-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-standalone",
          "text": "standalone"
        },
        {
          "doc": "Configuration of authenticator using Redis (Cluster) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-cluster-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-cluster-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>.",
              "hash": "V-authentication-S-cluster-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-cluster-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-cluster-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-cluster-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "cluster",
              "doc": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode.",
              "hash": "V-authentication-S-cluster-redis_type",
              "text": "redis_type",
              "type": "String(\"cluster\")"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-cluster-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-cluster-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-cluster-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-cluster-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-cluster",
          "text": "cluster"
        },
        {
          "doc": "Configuration of authenticator using Redis (Sentinel) as authentication data source.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-sentinel-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-sentinel-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>.",
              "hash": "V-authentication-S-sentinel-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-sentinel-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-sentinel-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
              "hash": "V-authentication-S-sentinel-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "sentinel",
              "doc": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode.",
              "hash": "V-authentication-S-sentinel-redis_type",
              "text": "redis_type",
              "type": "String(\"sentinel\")"
            },
            {
              "doc": "The cluster name in Redis sentinel mode.",
              "hash": "V-authentication-S-sentinel-sentinel",
              "text": "sentinel",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-sentinel-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "EMQX's password in the external database.",
              "hash": "V-authentication-S-sentinel-password",
              "text": "password",
              "type": "String"
            },
            {
              "default": "0",
              "doc": "Redis database ID.",
              "hash": "V-authentication-S-sentinel-database",
              "text": "database",
              "type": "Integer"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-sentinel-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-sentinel-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-sentinel",
          "text": "sentinel"
        },
        {
          "doc": "Configuration of authenticator using HTTP Server as authentication service (Using GET request).",
          "fields": [
            {
              "doc": "HTTP request method.",
              "hash": "V-authentication-S-get-method",
              "text": "method",
              "type": "String(\"get\")"
            },
            {
              "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
              "doc": "List of HTTP headers (without <code>content-type</code>).",
              "hash": "V-authentication-S-get-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-get-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-get-backend",
              "text": "backend",
              "type": "String(\"http\")"
            },
            {
              "doc": "URL of the HTTP server.",
              "hash": "V-authentication-S-get-url",
              "text": "url",
              "type": "String"
            },
            {
              "doc": "HTTP request body.",
              "hash": "V-authentication-S-get-body",
              "text": "body",
              "type": "Map"
            },
            {
              "default": "\"5s\"",
              "doc": "HTTP request timeout.",
              "hash": "V-authentication-S-get-request_timeout",
              "text": "request_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-get-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"15s\"",
              "doc": "The timeout when connecting to the HTTP server.",
              "hash": "V-authentication-S-get-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
              "hash": "V-authentication-S-get-enable_pipelining",
              "text": "enable_pipelining",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-get-max_retries",
              "text": "max_retries",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "8",
              "doc": "The pool size.",
              "hash": "V-authentication-S-get-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Configure HTTP request parameters.",
              "hash": "V-authentication-S-get-request",
              "refs": [
                {
                  "doc": "",
                  "fields": [
                    {
                      "doc": "HTTP method.",
                      "hash": "V-authentication-S-get-request-S-request-method",
                      "text": "method",
                      "type": "String"
                    },
                    {
                      "doc": "URL path.",
                      "hash": "V-authentication-S-get-request-S-request-path",
                      "text": "path",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body.",
                      "hash": "V-authentication-S-get-request-S-request-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "doc": "List of HTTP headers.",
                      "hash": "V-authentication-S-get-request-S-request-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "Max retry times if error on sending request.",
                      "hash": "V-authentication-S-get-request-S-request-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "HTTP request timeout.",
                      "hash": "V-authentication-S-get-request-S-request-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-get-request-S-request",
                  "text": "request"
                }
              ],
              "text": "request",
              "type": "Struct(request)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-get-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-get-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-get-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-get",
          "text": "get"
        },
        {
          "doc": "Configuration of authenticator using HTTP Server as authentication service (Using POST request).",
          "fields": [
            {
              "doc": "HTTP request method.",
              "hash": "V-authentication-S-post-method",
              "text": "method",
              "type": "String(\"post\")"
            },
            {
              "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
              "doc": "List of HTTP Headers.",
              "hash": "V-authentication-S-post-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-post-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-post-backend",
              "text": "backend",
              "type": "String(\"http\")"
            },
            {
              "doc": "URL of the HTTP server.",
              "hash": "V-authentication-S-post-url",
              "text": "url",
              "type": "String"
            },
            {
              "doc": "HTTP request body.",
              "hash": "V-authentication-S-post-body",
              "text": "body",
              "type": "Map"
            },
            {
              "default": "\"5s\"",
              "doc": "HTTP request timeout.",
              "hash": "V-authentication-S-post-request_timeout",
              "text": "request_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-post-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"15s\"",
              "doc": "The timeout when connecting to the HTTP server.",
              "hash": "V-authentication-S-post-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
              "hash": "V-authentication-S-post-enable_pipelining",
              "text": "enable_pipelining",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-post-max_retries",
              "text": "max_retries",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "8",
              "doc": "The pool size.",
              "hash": "V-authentication-S-post-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Configure HTTP request parameters.",
              "hash": "V-authentication-S-post-request",
              "refs": [
                {
                  "doc": "",
                  "fields": [
                    {
                      "doc": "HTTP method.",
                      "hash": "V-authentication-S-post-request-S-request-method",
                      "text": "method",
                      "type": "String"
                    },
                    {
                      "doc": "URL path.",
                      "hash": "V-authentication-S-post-request-S-request-path",
                      "text": "path",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body.",
                      "hash": "V-authentication-S-post-request-S-request-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "doc": "List of HTTP headers.",
                      "hash": "V-authentication-S-post-request-S-request-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "Max retry times if error on sending request.",
                      "hash": "V-authentication-S-post-request-S-request-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "HTTP request timeout.",
                      "hash": "V-authentication-S-post-request-S-request-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-post-request-S-request",
                  "text": "request"
                }
              ],
              "text": "request",
              "type": "Struct(request)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-post-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL connection settings.",
              "hash": "V-authentication-S-post-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-post-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-post",
          "text": "post"
        },
        {
          "doc": "Configuration when the JWT for authentication is issued using the HMAC algorithm.",
          "fields": [
            {
              "doc": "Whether to use JWKS.",
              "hash": "V-authentication-S-hmac-based-use_jwks",
              "text": "use_jwks",
              "type": "Enum(false)"
            },
            {
              "doc": "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>) and RSA, ECDSA (configured as <code>public-key</code>).",
              "hash": "V-authentication-S-hmac-based-algorithm",
              "text": "algorithm",
              "type": "Enum(hmac-based)"
            },
            {
              "doc": "The key to verify the JWT using HMAC algorithm.",
              "hash": "V-authentication-S-hmac-based-secret",
              "text": "secret",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "Whether secret is base64 encoded.",
              "hash": "V-authentication-S-hmac-based-secret_base64_encoded",
              "text": "secret_base64_encoded",
              "type": "Boolean"
            },
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-hmac-based-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-hmac-based-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "A list of custom claims to validate, which is a list of name/value pairs.\nValues can use the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting\nAuthentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
              "hash": "V-authentication-S-hmac-based-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "Field to take JWT from.",
              "hash": "V-authentication-S-hmac-based-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-hmac-based-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-hmac-based",
          "text": "hmac-based"
        },
        {
          "doc": "Configuration when the JWT for authentication is issued using RSA or ECDSA algorithm.",
          "fields": [
            {
              "doc": "Whether to use JWKS.",
              "hash": "V-authentication-S-public-key-use_jwks",
              "text": "use_jwks",
              "type": "Enum(false)"
            },
            {
              "doc": "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>) and RSA, ECDSA (configured as <code>public-key</code>).",
              "hash": "V-authentication-S-public-key-algorithm",
              "text": "algorithm",
              "type": "Enum(public-key)"
            },
            {
              "doc": "The public key used to verify the JWT.",
              "hash": "V-authentication-S-public-key-public_key",
              "text": "public_key",
              "type": "String"
            },
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-public-key-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-public-key-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "A list of custom claims to validate, which is a list of name/value pairs.\nValues can use the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting\nAuthentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
              "hash": "V-authentication-S-public-key-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "Field to take JWT from.",
              "hash": "V-authentication-S-public-key-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-public-key-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-public-key",
          "text": "public-key"
        },
        {
          "doc": "Configuration when JWTs used for authentication need to be fetched from the JWKS endpoint.",
          "fields": [
            {
              "doc": "Whether to use JWKS.",
              "hash": "V-authentication-S-jwks-use_jwks",
              "text": "use_jwks",
              "type": "Enum(true)"
            },
            {
              "doc": "JWKS endpoint, it's a read-only endpoint that returns the server's public key set in the JWKS format.",
              "hash": "V-authentication-S-jwks-endpoint",
              "text": "endpoint",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "Size of the connection pool towards the bridge target service.",
              "hash": "V-authentication-S-jwks-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "300",
              "doc": "JWKS refresh interval.",
              "hash": "V-authentication-S-jwks-refresh_interval",
              "text": "refresh_interval",
              "type": "Integer"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL options.",
              "hash": "V-authentication-S-jwks-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM format private key file.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "Enable or disable peer verification.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable TLS session reuse.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "\"emqx_tls_psk:lookup\"",
                      "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-user_lookup_fun",
                      "text": "user_lookup_fun",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Enable TLS.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-jwks-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            },
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-jwks-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-jwks-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "A list of custom claims to validate, which is a list of name/value pairs.\nValues can use the following placeholders:\n- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting\n- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting\nAuthentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
              "hash": "V-authentication-S-jwks-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "Field to take JWT from.",
              "hash": "V-authentication-S-jwks-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-jwks-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-jwks",
          "text": "jwks"
        },
        {
          "doc": "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication.",
          "fields": [
            {
              "doc": "Authentication mechanism.",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"scram\")"
            },
            {
              "doc": "Backend type.",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"built_in_database\")"
            },
            {
              "default": "sha256",
              "doc": "Hashing algorithm.",
              "hash": "V-authentication-S-authentication-algorithm",
              "text": "algorithm",
              "type": "Enum(sha256,sha512)"
            },
            {
              "default": "4096",
              "doc": "Iteration count.",
              "hash": "V-authentication-S-authentication-iteration_count",
              "text": "iteration_count",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "true",
              "doc": "Set to <code>true</code> or <code>false</code> to disable this auth provider.",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        }
      ],
      "text": "authentication",
      "type": "Array(OneOf(Struct(authentication),Struct(authentication),Struct(authentication),Struct(standalone),Struct(replica-set),Struct(sharded-cluster),Struct(standalone),Struct(cluster),Struct(sentinel),Struct(get),Struct(post),Struct(hmac-based),Struct(public-key),Struct(jwks),Struct(authentication)))"
    },
    {
      "doc": "Authorization a.k.a. ACL.<br/>\nIn EMQX, MQTT client access control is extremely flexible.<br/>\nAn out-of-the-box set of authorization data sources are supported.\nFor example,<br/>\n'file' source is to support concise and yet generic ACL rules in a file;<br/>\n'built_in_database' source can be used to store per-client customizable rule sets,\nnatively in the EMQX node;<br/>\n'http' source to make EMQX call an external HTTP API to make the decision;<br/>\n'PostgreSQL' etc. to look up clients or rules from external databases",
      "hash": "V-authorization",
      "refs": [
        {
          "doc": "Settings that control client authorization.",
          "fields": [
            {
              "default": "allow",
              "doc": "Default access control action if the user or client matches no ACL rules,\nor if no such user or client is found by the configurable authorization\nsources such as built_in_database, an HTTP API, or a query against PostgreSQL.\nFind more details in 'authorization.sources' config.",
              "hash": "V-authorization-S-authorization-no_match",
              "text": "no_match",
              "type": "Enum(allow,deny)"
            },
            {
              "default": "ignore",
              "doc": "The action when the authorization check rejects an operation.",
              "hash": "V-authorization-S-authorization-deny_action",
              "text": "deny_action",
              "type": "Enum(ignore,disconnect)"
            },
            {
              "hash": "V-authorization-S-authorization-cache",
              "refs": [
                {
                  "doc": "Settings for the authorization cache.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable or disable the authorization cache.",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "32",
                      "doc": "Maximum number of cached items.",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-max_size",
                      "text": "max_size",
                      "type": "Integer(1..1048576)"
                    },
                    {
                      "default": "\"1m\"",
                      "doc": "Time to live for the cached data.",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-ttl",
                      "text": "ttl",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-cache-S-authz_cache",
                  "text": "authz_cache"
                }
              ],
              "text": "cache",
              "type": "Struct(authz_cache)"
            },
            {
              "default": "[]",
              "doc": "Authorization data sources.<br/>\nAn array of authorization (ACL) data providers.\nIt is designed as an array, not a hash-map, so the sources can be\nordered to form a chain of access controls.<br/>\n\nWhen authorizing a 'publish' or 'subscribe' action, the configured\nsources are checked in order. When checking an ACL source,\nin case the client (identified by username or client ID) is not found,\nit moves on to the next source. And it stops immediately\nonce an 'allow' or 'deny' decision is returned.<br/>\n\nIf the client is not found in any of the sources,\nthe default action configured in 'authorization.no_match' is applied.<br/>\n\nNOTE:\nThe source elements are identified by their 'type'.\nIt is NOT allowed to configure two or more sources of the same type.",
              "hash": "V-authorization-S-authorization-sources",
              "refs": [
                {
                  "doc": "Authorization using a static file.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-file-type",
                      "text": "type",
                      "type": "String(\"file\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-file-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "Path to the file which contains the ACL rules.\nIf the file provisioned before starting EMQX node,\nit can be placed anywhere as long as EMQX has read access to it.\nThat is, EMQX will treat it as read only.\n\nIn case the rule-set is created or updated from EMQX Dashboard or HTTP API,\na new file will be created and placed in `authz` subdirectory inside EMQX's `data_dir`,\nand the old file will not be used anymore.",
                      "hash": "V-authorization-S-authorization-sources-S-file-path",
                      "text": "path",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-file",
                  "text": "file"
                },
                {
                  "doc": "Authorization using an external HTTP server (via GET requests).",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-type",
                      "text": "type",
                      "type": "String(\"http\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "URL of the auth server.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"30s\"",
                      "doc": "HTTP request timeout.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-body",
                      "text": "body",
                      "type": "Map"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "The timeout when connecting to the HTTP server.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "100",
                      "doc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "8",
                      "doc": "The pool size.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Configure HTTP request parameters.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP method.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "URL path.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP request body.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "List of HTTP headers.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "Max retry times if error on sending request.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP request timeout.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_get-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "HTTP method.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-method",
                      "text": "method",
                      "type": "String(\"get\")"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                      "doc": "List of HTTP headers (without <code>content-type</code>).",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-headers",
                      "text": "headers",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-http_get",
                  "text": "http_get"
                },
                {
                  "doc": "Authorization using an external HTTP server (via POST requests).",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-type",
                      "text": "type",
                      "type": "String(\"http\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "URL of the auth server.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"30s\"",
                      "doc": "HTTP request timeout.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-body",
                      "text": "body",
                      "type": "Map"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "The timeout when connecting to the HTTP server.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "100",
                      "doc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "8",
                      "doc": "The pool size.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Configure HTTP request parameters.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP method.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "URL path.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP request body.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "List of HTTP headers.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "Max retry times if error on sending request.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP request timeout.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_post-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "HTTP method.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-method",
                      "text": "method",
                      "type": "String(\"post\")"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                      "doc": "List of HTTP Headers.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-headers",
                      "text": "headers",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-http_post",
                  "text": "http_post"
                },
                {
                  "doc": "Authorization using a built-in database (mnesia).",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-mnesia-type",
                      "text": "type",
                      "type": "String(\"built_in_database\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-mnesia-enable",
                      "text": "enable",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mnesia",
                  "text": "mnesia"
                },
                {
                  "doc": "Authorization using a single MongoDB instance.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` collection containing the authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders<br/>\n - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>\n - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "single",
                      "doc": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "Write mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "Use DNS SRV record.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's username in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Database name associated with the user's credentials.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "Database name.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology",
                      "refs": [
                        {
                          "doc": "Topology of MongoDB.",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "Size of the connection pool towards the bridge target service.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "Max Overflow.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt a connection before timing out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Specifies how long to block for server selection before throwing an exception.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The maximum duration that a worker can wait for a connection to become available.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Controls the minimum amount of time to wait between heartbeats.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_single-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_single",
                  "text": "mongo_single"
                },
                {
                  "doc": "Authorization using a MongoDB replica set.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` collection containing the authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders<br/>\n - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>\n - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "rs",
                      "doc": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"rs\")"
                    },
                    {
                      "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "Write mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "master",
                      "doc": "Read mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-r_mode",
                      "text": "r_mode",
                      "type": "Enum(master,slave_ok)"
                    },
                    {
                      "doc": "Name of the replica set.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-replica_set_name",
                      "text": "replica_set_name",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "Use DNS SRV record.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's username in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Database name associated with the user's credentials.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "Database name.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology",
                      "refs": [
                        {
                          "doc": "Topology of MongoDB.",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "Size of the connection pool towards the bridge target service.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "Max Overflow.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt a connection before timing out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Specifies how long to block for server selection before throwing an exception.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The maximum duration that a worker can wait for a connection to become available.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Controls the minimum amount of time to wait between heartbeats.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_rs",
                  "text": "mongo_rs"
                },
                {
                  "doc": "Authorization using a sharded MongoDB cluster.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` collection containing the authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "Conditional expression that defines the filter condition in the query.\nFilter supports the following placeholders<br/>\n - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>\n - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "sharded",
                      "doc": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"sharded\")"
                    },
                    {
                      "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "Write mode.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "Use DNS SRV record.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's username in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Database name associated with the user's credentials.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "Database name.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology",
                      "refs": [
                        {
                          "doc": "Topology of MongoDB.",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "Size of the connection pool towards the bridge target service.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "Max Overflow.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "Period for checking if there are more workers than configured (\"overflow\").",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt a connection before timing out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The duration to attempt to send or to receive on a socket before the attempt times out.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Specifies how long to block for server selection before throwing an exception.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "The maximum duration that a worker can wait for a connection to become available.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "Controls the minimum amount of time to wait between heartbeats.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_sharded",
                  "text": "mongo_sharded"
                },
                {
                  "doc": "Authorization using a MySQL database.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-type",
                      "text": "type",
                      "type": "String(\"mysql\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MySQL default port 3306 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "Database name.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"root\"",
                      "doc": "EMQX's username in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Key-value list of SQL prepared statements.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-prepare_statement",
                      "text": "prepare_statement",
                      "type": "Map"
                    },
                    {
                      "doc": "Database query used to retrieve authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-query",
                      "text": "query",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mysql",
                  "text": "mysql"
                },
                {
                  "doc": "Authorization using a PostgreSQL database.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-type",
                      "text": "type",
                      "type": "String(\"postgresql\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe PostgreSQL default port 5432 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "Database name.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's username in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Key-value list of SQL prepared statements.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-prepare_statement",
                      "text": "prepare_statement",
                      "type": "Map"
                    },
                    {
                      "doc": "Database query used to retrieve authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-query",
                      "text": "query",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-postgresql",
                  "text": "postgresql"
                },
                {
                  "doc": "Authorization using a single Redis instance.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "single",
                      "doc": "Single mode. Must be set to 'single' when Redis server is running in single mode.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-redis_type",
                      "text": "redis_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis database ID.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Database query used to retrieve authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_single",
                  "text": "redis_single"
                },
                {
                  "doc": "Authorization using a Redis Sentinel.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "sentinel",
                      "doc": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-redis_type",
                      "text": "redis_type",
                      "type": "String(\"sentinel\")"
                    },
                    {
                      "doc": "The cluster name in Redis sentinel mode.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-sentinel",
                      "text": "sentinel",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis database ID.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Database query used to retrieve authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_sentinel",
                  "text": "redis_sentinel"
                },
                {
                  "doc": "Authorization using a Redis cluster.",
                  "fields": [
                    {
                      "doc": "Backend type.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "Set to <code>true</code> or <code>false</code> to disable this ACL provider",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.\nA host entry has the following form: `Host[:Port]`.\nThe Redis default port 6379 is used if `[:Port]` is not specified.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "cluster",
                      "doc": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-redis_type",
                      "text": "redis_type",
                      "type": "String(\"cluster\")"
                    },
                    {
                      "default": "8",
                      "doc": "Size of the connection pool towards the bridge target service.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "EMQX's password in the external database.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Database query used to retrieve authorization data.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_cluster",
                  "text": "redis_cluster"
                }
              ],
              "text": "sources",
              "type": "Array(OneOf(Struct(file),Struct(http_get),Struct(http_post),Struct(mnesia),Struct(mongo_single),Struct(mongo_rs),Struct(mongo_sharded),Struct(mysql),Struct(postgresql),Struct(redis_single),Struct(redis_sentinel),Struct(redis_cluster)))"
            }
          ],
          "hash": "T-authorization-S-authorization",
          "text": "authorization"
        }
      ],
      "text": "authorization",
      "type": "Struct(authorization)"
    },
    {
      "hash": "V-node",
      "refs": [
        {
          "doc": "Node name, cookie, config & data directories and the Erlang virtual machine (BEAM) boot parameters.",
          "fields": [
            {
              "default": "\"emqx@127.0.0.1\"",
              "doc": "Unique name of the EMQX node. It must follow <code>%name%@FQDN</code> or\n<code>%name%@IPv4</code> format.",
              "hash": "V-node-S-node-name",
              "text": "name",
              "type": "String"
            },
            {
              "doc": "Secret cookie is a random string that should be the same on all nodes in\nthe given EMQX cluster, but unique per EMQX cluster. It is used to prevent EMQX nodes that\nbelong to different clusters from accidentally connecting to each other.",
              "hash": "V-node-S-node-cookie",
              "text": "cookie",
              "type": "String"
            },
            {
              "default": "2097152",
              "doc": "Maximum number of simultaneously existing processes for this Erlang system.\nThe actual maximum chosen may be much larger than the Number passed.\nFor more information, see: https://www.erlang.org/doc/man/erl.html",
              "hash": "V-node-S-node-process_limit",
              "text": "process_limit",
              "type": "Integer(1024..134217727)"
            },
            {
              "default": "1048576",
              "doc": "Maximum number of simultaneously existing ports for this Erlang system.\nThe actual maximum chosen may be much larger than the Number passed.\nFor more information, see: https://www.erlang.org/doc/man/erl.html",
              "hash": "V-node-S-node-max_ports",
              "text": "max_ports",
              "type": "Integer(1024..134217727)"
            },
            {
              "default": "8192",
              "doc": "Erlang's distribution buffer busy limit in kilobytes.",
              "hash": "V-node-S-node-dist_buffer_size",
              "text": "dist_buffer_size",
              "type": "Integer(1..2097151)"
            },
            {
              "default": "262144",
              "doc": "Max number of ETS tables",
              "hash": "V-node-S-node-max_ets_tables",
              "text": "max_ets_tables",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "\"15m\"",
              "doc": "Periodic garbage collection interval. Set to <code>disabled</code> to have it disabled.",
              "hash": "V-node-S-node-global_gc_interval",
              "text": "global_gc_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "default": "\"log/erl_crash.dump\"",
              "doc": "Location of the crash dump file.",
              "hash": "V-node-S-node-crash_dump_file",
              "text": "crash_dump_file",
              "type": "String"
            },
            {
              "default": "\"30s\"",
              "doc": "This variable gives the number of seconds that the emulator is allowed to spend writing a crash dump. When the given number of seconds have elapsed, the emulator is terminated.<br/>\n- If setting to 0 seconds, the runtime system does not even attempt to write the crash dump file. It only terminates.<br/>\n- If setting to a positive value S, wait for S seconds to complete the crash dump file and then terminates the runtime system with a SIGALRM signal.<br/>\n- A negative value causes the termination of the runtime system to wait indefinitely until the crash dump file has been completely written.",
              "hash": "V-node-S-node-crash_dump_seconds",
              "text": "crash_dump_seconds",
              "type": "String"
            },
            {
              "default": "\"100MB\"",
              "doc": "This variable sets the maximum size of a crash dump file in bytes.\nThe crash dump will be truncated if this limit is exceeded.\nIf setting it to 0, the runtime system does not even attempt to write a crash dump file.",
              "hash": "V-node-S-node-crash_dump_bytes",
              "text": "crash_dump_bytes",
              "type": "String"
            },
            {
              "default": "\"2m\"",
              "doc": "This is the approximate time an EMQX node may be unresponsive until it is considered down and thereby disconnected.",
              "hash": "V-node-S-node-dist_net_ticktime",
              "text": "dist_net_ticktime",
              "type": "String"
            },
            {
              "default": "23",
              "doc": "Maximum depth of the call stack printed in error messages and\n<code>process_info</code>.",
              "hash": "V-node-S-node-backtrace_depth",
              "text": "backtrace_depth",
              "type": "Integer"
            },
            {
              "default": "[]",
              "doc": "List of Erlang applications that shall be rebooted when the EMQX broker joins the cluster.",
              "hash": "V-node-S-node-applications",
              "text": "applications",
              "type": "String"
            },
            {
              "doc": "Deprecated since 5.0.8.",
              "hash": "V-node-S-node-etc_dir",
              "text": "etc_dir",
              "type": "String"
            },
            {
              "hash": "V-node-S-node-cluster_call",
              "refs": [
                {
                  "doc": "Options for the 'cluster call' feature that allows to execute a callback on all nodes in the cluster.",
                  "fields": [
                    {
                      "default": "\"1m\"",
                      "doc": "Time interval to retry after a failed call.",
                      "hash": "V-node-S-node-cluster_call-S-cluster_call-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "100",
                      "doc": "Retain the maximum number of completed transactions (for queries).",
                      "hash": "V-node-S-node-cluster_call-S-cluster_call-max_history",
                      "text": "max_history",
                      "type": "Integer(1..500)"
                    },
                    {
                      "default": "\"5m\"",
                      "doc": "Time interval to clear completed but stale transactions.\nEnsure that the number of completed transactions is less than the <code>max_history</code>.",
                      "hash": "V-node-S-node-cluster_call-S-cluster_call-cleanup_interval",
                      "text": "cleanup_interval",
                      "type": "String"
                    }
                  ],
                  "hash": "T-node-S-node-cluster_call-S-cluster_call",
                  "text": "cluster_call"
                }
              ],
              "text": "cluster_call",
              "type": "Struct(cluster_call)"
            },
            {
              "default": "core",
              "doc": "Select a node role.<br/>\n<code>core</code> nodes provide durability of the data, and take care of writes.\nIt is recommended to place core nodes in different racks or different availability zones.<br/>\n<code>replicant</code> nodes are ephemeral worker nodes. Removing them from the cluster\ndoesn't affect database redundancy<br/>\nIt is recommended to have more replicant nodes than core nodes.<br/>\nNote: this parameter only takes effect when the <code>backend</code> is set\nto <code>rlog</code>.",
              "hash": "V-node-S-node-db_role",
              "text": "db_role",
              "type": "Enum(core,replicant)"
            },
            {
              "default": "async",
              "doc": "In sync mode the core node waits for an ack from the replicant nodes before sending the next\ntransaction log entry.",
              "hash": "V-node-S-node-tlog_push_mode",
              "text": "tlog_push_mode",
              "type": "Enum(sync,async)"
            }
          ],
          "hash": "T-node-S-node",
          "text": "node"
        }
      ],
      "text": "node",
      "type": "Struct(node)"
    },
    {
      "hash": "V-cluster",
      "refs": [
        {
          "doc": "EMQX nodes can form a cluster to scale up the total capacity.<br/>\n      Here holds the configs to instruct how individual nodes can discover each other.",
          "fields": [
            {
              "default": "emqxcl",
              "doc": "Human-friendly name of the EMQX cluster.",
              "hash": "V-cluster-S-cluster-name",
              "text": "name",
              "type": "String"
            },
            {
              "default": "manual",
              "doc": "Service discovery method for the cluster nodes. Possible values are:\n- manual: Use <code>emqx ctl cluster</code> command to manage cluster.<br/>\n- static: Configure static nodes list by setting <code>seeds</code> in config file.<br/>\n- dns: Use DNS A record to discover peer nodes.<br/>\n- etcd: Use etcd to discover peer nodes.<br/>\n- k8s: Use Kubernetes API to discover peer pods.",
              "hash": "V-cluster-S-cluster-discovery_strategy",
              "text": "discovery_strategy",
              "type": "Enum(manual,static,mcast,dns,etcd,k8s)"
            },
            {
              "default": "[]",
              "doc": "List of core nodes that the replicant will connect to.<br/>\nNote: this parameter only takes effect when the <code>backend</code> is set\nto <code>rlog</code> and the <code>role</code> is set to <code>replicant</code>.<br/>\nThis value needs to be defined for manual or static cluster discovery mechanisms.<br/>\nIf an automatic cluster discovery mechanism is being used (such as <code>etcd</code>),\nthere is no need to set this value.",
              "hash": "V-cluster-S-cluster-core_nodes",
              "text": "core_nodes",
              "type": "String"
            },
            {
              "default": "\"5m\"",
              "doc": "Remove disconnected nodes from the cluster after this interval.",
              "hash": "V-cluster-S-cluster-autoclean",
              "text": "autoclean",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "If <code>true</code>, the node will try to heal network partitions automatically.",
              "hash": "V-cluster-S-cluster-autoheal",
              "text": "autoheal",
              "type": "Boolean"
            },
            {
              "default": "inet_tcp",
              "doc": "The Erlang distribution protocol for the cluster.<br/>\n- inet_tcp: IPv4 TCP <br/>\n- inet_tls: IPv4 TLS, works together with <code>etc/ssl_dist.conf</code>",
              "hash": "V-cluster-S-cluster-proto_dist",
              "text": "proto_dist",
              "type": "Enum(inet_tcp,inet6_tcp,inet_tls)"
            },
            {
              "hash": "V-cluster-S-cluster-static",
              "refs": [
                {
                  "doc": "Service discovery via static nodes.\nThe new node joins the cluster by connecting to one of the bootstrap nodes.",
                  "fields": [
                    {
                      "default": "[]",
                      "doc": "List EMQX node names in the static cluster. See <code>node.name</code>.",
                      "hash": "V-cluster-S-cluster-static-S-cluster_static-seeds",
                      "text": "seeds",
                      "type": "Array(String)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-static-S-cluster_static",
                  "text": "cluster_static"
                }
              ],
              "text": "static",
              "type": "Struct(cluster_static)"
            },
            {
              "hash": "V-cluster-S-cluster-mcast",
              "refs": [
                {
                  "doc": "Service discovery via UDP multicast.",
                  "fields": [
                    {
                      "default": "\"239.192.0.1\"",
                      "doc": "Multicast IPv4 address.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-addr",
                      "text": "addr",
                      "type": "String"
                    },
                    {
                      "default": "[4369,4370]",
                      "doc": "List of UDP ports used for service discovery.<br/>\nNote: probe messages are broadcast to all the specified ports.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-ports",
                      "text": "ports",
                      "type": "Array(Integer)"
                    },
                    {
                      "default": "\"0.0.0.0\"",
                      "doc": "Local IP address the node discovery service needs to bind to.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-iface",
                      "text": "iface",
                      "type": "String"
                    },
                    {
                      "default": "255",
                      "doc": "Time-to-live (TTL) for the outgoing UDP datagrams.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-ttl",
                      "text": "ttl",
                      "type": "Integer(0..255)"
                    },
                    {
                      "default": "true",
                      "doc": "If <code>true</code>, loop UDP datagrams back to the local socket.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-loop",
                      "text": "loop",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"16KB\"",
                      "doc": "Size of the kernel-level buffer for outgoing datagrams.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-sndbuf",
                      "text": "sndbuf",
                      "type": "String"
                    },
                    {
                      "default": "\"16KB\"",
                      "doc": "Size of the kernel-level buffer for incoming datagrams.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-recbuf",
                      "text": "recbuf",
                      "type": "String"
                    },
                    {
                      "default": "\"32KB\"",
                      "doc": "Size of the user-level buffer.",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-buffer",
                      "text": "buffer",
                      "type": "String"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-mcast-S-cluster_mcast",
                  "text": "cluster_mcast"
                }
              ],
              "text": "mcast",
              "type": "Struct(cluster_mcast)"
            },
            {
              "hash": "V-cluster-S-cluster-dns",
              "refs": [
                {
                  "doc": "Service discovery via DNS SRV records.",
                  "fields": [
                    {
                      "default": "\"localhost\"",
                      "doc": "The domain name from which to discover peer EMQX nodes' IP addresses.\nApplicable when <code>cluster.discovery_strategy = dns</code>",
                      "hash": "V-cluster-S-cluster-dns-S-cluster_dns-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "default": "a",
                      "doc": "DNS record type.",
                      "hash": "V-cluster-S-cluster-dns-S-cluster_dns-record_type",
                      "text": "record_type",
                      "type": "Enum(a,srv)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-dns-S-cluster_dns",
                  "text": "cluster_dns"
                }
              ],
              "text": "dns",
              "type": "Struct(cluster_dns)"
            },
            {
              "hash": "V-cluster-S-cluster-etcd",
              "refs": [
                {
                  "doc": "Service discovery using 'etcd' service.",
                  "fields": [
                    {
                      "doc": "List of endpoint URLs of the etcd cluster",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "\"emqxcl\"",
                      "doc": "Key prefix used for EMQX service discovery.",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-prefix",
                      "text": "prefix",
                      "type": "String"
                    },
                    {
                      "default": "\"1m\"",
                      "doc": "Expiration time of the etcd key associated with the node.\nIt is refreshed automatically, as long as the node is alive.",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-node_ttl",
                      "text": "node_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "Options for the TLS connection to the etcd cluster.",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-etcd-S-cluster_etcd",
                  "text": "cluster_etcd"
                }
              ],
              "text": "etcd",
              "type": "Struct(cluster_etcd)"
            },
            {
              "hash": "V-cluster-S-cluster-k8s",
              "refs": [
                {
                  "doc": "Service discovery via Kubernetes API server.",
                  "fields": [
                    {
                      "default": "\"http://10.110.111.204:8080\"",
                      "doc": "Kubernetes API endpoint URL.",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-apiserver",
                      "text": "apiserver",
                      "type": "String"
                    },
                    {
                      "default": "\"emqx\"",
                      "doc": "EMQX broker service name.",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-service_name",
                      "text": "service_name",
                      "type": "String"
                    },
                    {
                      "default": "ip",
                      "doc": "Address type used for connecting to the discovered nodes.\nSetting <code>cluster.k8s.address_type</code> to <code>ip</code> will\nmake EMQX to discover IP addresses of peer nodes from Kubernetes API.",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-address_type",
                      "text": "address_type",
                      "type": "Enum(ip,dns,hostname)"
                    },
                    {
                      "default": "\"default\"",
                      "doc": "Kubernetes namespace.",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-namespace",
                      "text": "namespace",
                      "type": "String"
                    },
                    {
                      "default": "\"pod.local\"",
                      "doc": "Node name suffix.<br/>\nNote: this parameter is only relevant when <code>address_type</code> is <code>dns</code>\nor <code>hostname</code>.",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-suffix",
                      "text": "suffix",
                      "type": "String"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-k8s-S-cluster_k8s",
                  "text": "cluster_k8s"
                }
              ],
              "text": "k8s",
              "type": "Struct(cluster_k8s)"
            }
          ],
          "hash": "T-cluster-S-cluster",
          "text": "cluster"
        }
      ],
      "text": "cluster",
      "type": "Struct(cluster)"
    },
    {
      "hash": "V-log",
      "refs": [
        {
          "doc": "EMQX logging supports multiple sinks for the log events.\nEach sink is represented by a _log handler_, which can be configured independently.",
          "fields": [
            {
              "hash": "V-log-S-log-console_handler",
              "refs": [
                {
                  "doc": "Log handler that prints log events to the EMQX console.",
                  "fields": [
                    {
                      "default": "false",
                      "doc": "Enable this log handler.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "warning",
                      "doc": "The log level for the current log handler.\nDefaults to warning.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-level",
                      "text": "level",
                      "type": "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)"
                    },
                    {
                      "default": "\"system\"",
                      "doc": "The time offset to be used when formatting the timestamp.\nCan be one of:\n  - <code>system</code>: the time offset used by the local system\n  - <code>utc</code>: the UTC time offset\n  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"\nDefaults to: <code>system</code>.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-time_offset",
                      "text": "time_offset",
                      "type": "String"
                    },
                    {
                      "default": "unlimited",
                      "doc": "Set the maximum length of a single log message. If this length is exceeded, the log message will be truncated.\nNOTE: Restrict char limiter if formatter is JSON , it will get a truncated incomplete JSON data, which is not recommended.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-chars_limit",
                      "text": "chars_limit",
                      "type": "OneOf(String(\"unlimited\"),Integer(100..inf))"
                    },
                    {
                      "default": "text",
                      "doc": "Choose log formatter. <code>text</code> for free text, and <code>json</code> for structured logging.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-formatter",
                      "text": "formatter",
                      "type": "Enum(text,json)"
                    },
                    {
                      "default": "true",
                      "doc": "Print logs in a single line if set to true. Otherwise, log messages may span multiple lines.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-single_line",
                      "text": "single_line",
                      "type": "Boolean"
                    },
                    {
                      "default": "100",
                      "doc": "As long as the number of buffered log events is lower than this value,\nall log events are handled asynchronously. This means that the client process sending the log event,\nby calling a log function in the Logger API, does not wait for a response from the handler\nbut continues executing immediately after the event is sent.\nIt is not affected by the time it takes the handler to print the event to the log device.\nIf the message queue grows larger than this value,\nthe handler starts handling log events synchronously instead,\nmeaning that the client process sending the event must wait for a response.\nWhen the handler reduces the message queue to a level below the sync_mode_qlen threshold,\nasynchronous operation is resumed.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-sync_mode_qlen",
                      "text": "sync_mode_qlen",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "3000",
                      "doc": "When the number of buffered log events is larger than this value, the new log events are dropped.\nWhen drop mode is activated or deactivated, a message is printed in the logs.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-drop_mode_qlen",
                      "text": "drop_mode_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "8000",
                      "doc": "If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place.\nTo flush events, the handler discards the buffered log messages without logging.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-flush_qlen",
                      "text": "flush_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill",
                      "refs": [
                        {
                          "doc": "Log overload kill features an overload protection that activates when the log handlers use too much memory or have too many buffered log messages.<br/>\nWhen the overload is detected, the log handler is terminated and restarted after a cooldown period.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enable log handler overload kill feature.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"30MB\"",
                              "doc": "Maximum memory size that the log handler process is allowed to use.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-mem_size",
                              "text": "mem_size",
                              "type": "String"
                            },
                            {
                              "default": "20000",
                              "doc": "Maximum allowed queue length.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-qlen",
                              "text": "qlen",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "The handler restarts automatically after a delay in the event of termination, unless the value `infinity` is set, which blocks any subsequent restarts.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-restart_after",
                              "text": "restart_after",
                              "type": "OneOf(String,String(\"infinity\"))"
                            }
                          ],
                          "hash": "T-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill",
                          "text": "log_overload_kill"
                        }
                      ],
                      "text": "overload_kill",
                      "type": "Struct(log_overload_kill)"
                    },
                    {
                      "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit",
                      "refs": [
                        {
                          "doc": "Large bursts of log events produced in a short time can potentially cause problems, such as:\n - Log files grow very large\n - Log files are rotated too quickly, and useful information gets overwritten\n - Overall performance impact on the system\n\nLog burst limit feature can temporarily disable logging to avoid these issues.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enable log burst control feature.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10000",
                              "doc": "Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-max_count",
                              "text": "max_count",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"1s\"",
                              "doc": "See <code>max_count</code>.",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-window_time",
                              "text": "window_time",
                              "type": "String"
                            }
                          ],
                          "hash": "T-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit",
                          "text": "log_burst_limit"
                        }
                      ],
                      "text": "burst_limit",
                      "type": "Struct(log_burst_limit)"
                    },
                    {
                      "default": "error",
                      "doc": "Type of supervisor reports that are logged. Defaults to <code>error</code><br/>\n  - <code>error</code>: only log errors in the Erlang processes<br/>.\n  - <code>progress</code>: log process startup.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-supervisor_reports",
                      "text": "supervisor_reports",
                      "type": "Enum(error,progress)"
                    },
                    {
                      "default": "100",
                      "doc": "Maximum depth for Erlang term log formatting and Erlang process message queue inspection.",
                      "hash": "V-log-S-log-console_handler-S-console_handler-max_depth",
                      "text": "max_depth",
                      "type": "OneOf(String(\"unlimited\"),Integer(0..+inf))"
                    }
                  ],
                  "hash": "T-log-S-log-console_handler-S-console_handler",
                  "text": "console_handler"
                }
              ],
              "text": "console_handler",
              "type": "Struct(console_handler)"
            },
            {
              "doc": "File-based log handlers.",
              "hash": "V-log-S-log-file_handlers",
              "refs": [
                {
                  "doc": "Log handler that prints log events to files.",
                  "fields": [
                    {
                      "doc": "Name the log file.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-file",
                      "text": "file",
                      "type": "String"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation",
                      "refs": [
                        {
                          "doc": "By default, the logs are stored in `./log` directory (for installation from zip file) or in `/var/log/emqx` (for binary installation).<br/>\nThis section of the configuration controls the number of files kept for each log handler.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enable log rotation feature.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of log files.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation-count",
                              "text": "count",
                              "type": "Integer(1..2048)"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation",
                          "text": "log_rotation"
                        }
                      ],
                      "text": "rotation",
                      "type": "Struct(log_rotation)"
                    },
                    {
                      "default": "\"50MB\"",
                      "doc": "This parameter controls log file rotation. The value `infinity` means the log file will grow indefinitely, otherwise the log file will be rotated once it reaches `max_size` in bytes.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-max_size",
                      "text": "max_size",
                      "type": "OneOf(String(\"infinity\"),String)"
                    },
                    {
                      "default": "true",
                      "doc": "Enable this log handler.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "warning",
                      "doc": "The log level for the current log handler.\nDefaults to warning.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-level",
                      "text": "level",
                      "type": "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)"
                    },
                    {
                      "default": "\"system\"",
                      "doc": "The time offset to be used when formatting the timestamp.\nCan be one of:\n  - <code>system</code>: the time offset used by the local system\n  - <code>utc</code>: the UTC time offset\n  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"\nDefaults to: <code>system</code>.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-time_offset",
                      "text": "time_offset",
                      "type": "String"
                    },
                    {
                      "default": "unlimited",
                      "doc": "Set the maximum length of a single log message. If this length is exceeded, the log message will be truncated.\nNOTE: Restrict char limiter if formatter is JSON , it will get a truncated incomplete JSON data, which is not recommended.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-chars_limit",
                      "text": "chars_limit",
                      "type": "OneOf(String(\"unlimited\"),Integer(100..inf))"
                    },
                    {
                      "default": "text",
                      "doc": "Choose log formatter. <code>text</code> for free text, and <code>json</code> for structured logging.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-formatter",
                      "text": "formatter",
                      "type": "Enum(text,json)"
                    },
                    {
                      "default": "true",
                      "doc": "Print logs in a single line if set to true. Otherwise, log messages may span multiple lines.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-single_line",
                      "text": "single_line",
                      "type": "Boolean"
                    },
                    {
                      "default": "100",
                      "doc": "As long as the number of buffered log events is lower than this value,\nall log events are handled asynchronously. This means that the client process sending the log event,\nby calling a log function in the Logger API, does not wait for a response from the handler\nbut continues executing immediately after the event is sent.\nIt is not affected by the time it takes the handler to print the event to the log device.\nIf the message queue grows larger than this value,\nthe handler starts handling log events synchronously instead,\nmeaning that the client process sending the event must wait for a response.\nWhen the handler reduces the message queue to a level below the sync_mode_qlen threshold,\nasynchronous operation is resumed.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-sync_mode_qlen",
                      "text": "sync_mode_qlen",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "3000",
                      "doc": "When the number of buffered log events is larger than this value, the new log events are dropped.\nWhen drop mode is activated or deactivated, a message is printed in the logs.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-drop_mode_qlen",
                      "text": "drop_mode_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "8000",
                      "doc": "If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place.\nTo flush events, the handler discards the buffered log messages without logging.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-flush_qlen",
                      "text": "flush_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill",
                      "refs": [
                        {
                          "doc": "Log overload kill features an overload protection that activates when the log handlers use too much memory or have too many buffered log messages.<br/>\nWhen the overload is detected, the log handler is terminated and restarted after a cooldown period.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enable log handler overload kill feature.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"30MB\"",
                              "doc": "Maximum memory size that the log handler process is allowed to use.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-mem_size",
                              "text": "mem_size",
                              "type": "String"
                            },
                            {
                              "default": "20000",
                              "doc": "Maximum allowed queue length.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-qlen",
                              "text": "qlen",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "The handler restarts automatically after a delay in the event of termination, unless the value `infinity` is set, which blocks any subsequent restarts.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-restart_after",
                              "text": "restart_after",
                              "type": "OneOf(String,String(\"infinity\"))"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill",
                          "text": "log_overload_kill"
                        }
                      ],
                      "text": "overload_kill",
                      "type": "Struct(log_overload_kill)"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit",
                      "refs": [
                        {
                          "doc": "Large bursts of log events produced in a short time can potentially cause problems, such as:\n - Log files grow very large\n - Log files are rotated too quickly, and useful information gets overwritten\n - Overall performance impact on the system\n\nLog burst limit feature can temporarily disable logging to avoid these issues.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enable log burst control feature.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10000",
                              "doc": "Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-max_count",
                              "text": "max_count",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"1s\"",
                              "doc": "See <code>max_count</code>.",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-window_time",
                              "text": "window_time",
                              "type": "String"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit",
                          "text": "log_burst_limit"
                        }
                      ],
                      "text": "burst_limit",
                      "type": "Struct(log_burst_limit)"
                    },
                    {
                      "default": "error",
                      "doc": "Type of supervisor reports that are logged. Defaults to <code>error</code><br/>\n  - <code>error</code>: only log errors in the Erlang processes<br/>.\n  - <code>progress</code>: log process startup.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-supervisor_reports",
                      "text": "supervisor_reports",
                      "type": "Enum(error,progress)"
                    },
                    {
                      "default": "100",
                      "doc": "Maximum depth for Erlang term log formatting and Erlang process message queue inspection.",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-max_depth",
                      "text": "max_depth",
                      "type": "OneOf(String(\"unlimited\"),Integer(0..+inf))"
                    }
                  ],
                  "hash": "T-log-S-log-file_handlers-S-log_file_handler",
                  "text": "log_file_handler"
                }
              ],
              "text": "file_handlers",
              "type": "Map($name->Struct(log_file_handler))"
            }
          ],
          "hash": "T-log-S-log",
          "text": "log"
        }
      ],
      "text": "log",
      "type": "Struct(log)"
    },
    {
      "hash": "V-rpc",
      "refs": [
        {
          "doc": "EMQX uses a library called <code>gen_rpc</code> for inter-broker communication.<br/>\nMost of the time the default config should work,\nbut in case you need to do performance fine-tuning or experiment a bit,\nthis is where to look.",
          "fields": [
            {
              "default": "async",
              "doc": "In <code>sync</code> mode the sending side waits for the ack from the receiving side.",
              "hash": "V-rpc-S-rpc-mode",
              "text": "mode",
              "type": "Enum(sync,async)"
            },
            {
              "default": "tcp",
              "doc": "Transport protocol used for inter-broker communication",
              "hash": "V-rpc-S-rpc-driver",
              "text": "driver",
              "type": "Enum(tcp,ssl)"
            },
            {
              "default": "256",
              "doc": "The maximum number of batch messages sent in asynchronous mode.\n      Note that this configuration does not work in synchronous mode.",
              "hash": "V-rpc-S-rpc-async_batch_size",
              "text": "async_batch_size",
              "type": "Integer"
            },
            {
              "default": "stateless",
              "doc": "<code>manual</code>: discover ports by <code>tcp_server_port</code>.<br/>\n<code>stateless</code>: discover ports in a stateless manner, using the following algorithm.\nIf node name is <code>emqxN@127.0.0.1</code>, where the N is an integer,\nthen the listening port will be 5370 + N.",
              "hash": "V-rpc-S-rpc-port_discovery",
              "text": "port_discovery",
              "type": "Enum(manual,stateless)"
            },
            {
              "default": "5369",
              "doc": "Listening port used by RPC local service.<br/>\nNote that this config only takes effect when rpc.port_discovery is set to manual.",
              "hash": "V-rpc-S-rpc-tcp_server_port",
              "text": "tcp_server_port",
              "type": "Integer"
            },
            {
              "default": "5369",
              "doc": "Listening port used by RPC local service.<br/>\nNote that this config only takes effect when rpc.port_discovery is set to manual\nand <code>driver</code> is set to <code>ssl</code>.",
              "hash": "V-rpc-S-rpc-ssl_server_port",
              "text": "ssl_server_port",
              "type": "Integer"
            },
            {
              "default": "10",
              "doc": "Set the maximum number of RPC communication channels initiated by this node to each remote node.",
              "hash": "V-rpc-S-rpc-tcp_client_num",
              "text": "tcp_client_num",
              "type": "Integer(1..256)"
            },
            {
              "default": "\"5s\"",
              "doc": "Timeout for establishing an RPC connection.",
              "hash": "V-rpc-S-rpc-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "doc": "Path to TLS certificate file used to validate identity of the cluster nodes.\nNote that this config only takes effect when <code>rpc.driver</code> is set to <code>ssl</code>.",
              "hash": "V-rpc-S-rpc-certfile",
              "text": "certfile",
              "type": "String"
            },
            {
              "doc": "Path to the private key file for the <code>rpc.certfile</code>.<br/>\nNote: contents of this file are secret, so it's necessary to set permissions to 600.",
              "hash": "V-rpc-S-rpc-keyfile",
              "text": "keyfile",
              "type": "String"
            },
            {
              "doc": "Path to certification authority TLS certificate file used to validate <code>rpc.certfile</code>.<br/>\nNote: certificates of all nodes in the cluster must be signed by the same CA.",
              "hash": "V-rpc-S-rpc-cacertfile",
              "text": "cacertfile",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "Timeout for sending the RPC request.",
              "hash": "V-rpc-S-rpc-send_timeout",
              "text": "send_timeout",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "Timeout for the remote node authentication.",
              "hash": "V-rpc-S-rpc-authentication_timeout",
              "text": "authentication_timeout",
              "type": "String"
            },
            {
              "default": "\"15s\"",
              "doc": "Timeout for the reply to a synchronous RPC.",
              "hash": "V-rpc-S-rpc-call_receive_timeout",
              "text": "call_receive_timeout",
              "type": "String"
            },
            {
              "default": "\"15m\"",
              "doc": "How long the connections between the brokers should remain open after the last message is sent.",
              "hash": "V-rpc-S-rpc-socket_keepalive_idle",
              "text": "socket_keepalive_idle",
              "type": "String"
            },
            {
              "default": "\"75s\"",
              "doc": "The interval between keepalive messages.",
              "hash": "V-rpc-S-rpc-socket_keepalive_interval",
              "text": "socket_keepalive_interval",
              "type": "String"
            },
            {
              "default": "9",
              "doc": "How many times the keepalive probe message can fail to receive a reply\nuntil the RPC connection is considered lost.",
              "hash": "V-rpc-S-rpc-socket_keepalive_count",
              "text": "socket_keepalive_count",
              "type": "Integer"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP tuning parameters. TCP sending buffer size.",
              "hash": "V-rpc-S-rpc-socket_sndbuf",
              "text": "socket_sndbuf",
              "type": "String"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP tuning parameters. TCP receiving buffer size.",
              "hash": "V-rpc-S-rpc-socket_recbuf",
              "text": "socket_recbuf",
              "type": "String"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP tuning parameters. Socket buffer size in user mode.",
              "hash": "V-rpc-S-rpc-socket_buffer",
              "text": "socket_buffer",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "Enable compatibility with old RPC authentication.",
              "hash": "V-rpc-S-rpc-insecure_fallback",
              "text": "insecure_fallback",
              "type": "Boolean"
            }
          ],
          "hash": "T-rpc-S-rpc",
          "text": "rpc"
        }
      ],
      "text": "rpc",
      "type": "Struct(rpc)"
    },
    {
      "doc": "Message broker options.",
      "hash": "V-broker",
      "refs": [
        {
          "doc": "Message broker options.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable session registry",
              "hash": "V-broker-S-broker-enable_session_registry",
              "text": "enable_session_registry",
              "type": "Boolean"
            },
            {
              "default": "quorum",
              "doc": "Session locking strategy in a cluster.\n  - `local`: only lock the session on the current node\n  - `one`: select only one remote node to lock the session\n  - `quorum`: select some nodes to lock the session\n  - `all`: lock the session on all the nodes in the cluster",
              "hash": "V-broker-S-broker-session_locking_strategy",
              "text": "session_locking_strategy",
              "type": "Enum(local,leader,quorum,all)"
            },
            {
              "default": "round_robin",
              "doc": "Dispatch strategy for shared subscription.\n  - `random`: dispatch the message to a random selected subscriber\n  - `round_robin`: select the subscribers in a round-robin manner\n  - `round_robin_per_group`: select the subscribers in round-robin fashion within each shared subscriber group\n  - `local`: select random local subscriber otherwise select random cluster-wide\n  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.\n  - `hash_clientid`: select the subscribers by hashing the `clientIds`\n  - `hash_topic`: select the subscribers by hashing the source topic",
              "hash": "V-broker-S-broker-shared_subscription_strategy",
              "text": "shared_subscription_strategy",
              "type": "Enum(random,round_robin,round_robin_per_group,sticky,local,hash_topic,hash_clientid)"
            },
            {
              "default": "false",
              "doc": "Deprecated, will be removed in 5.1.\nEnable/disable shared dispatch acknowledgement for QoS 1 and QoS 2 messages.\nThis should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline.",
              "hash": "V-broker-S-broker-shared_dispatch_ack_enabled",
              "text": "shared_dispatch_ack_enabled",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "Enable batch clean for deleted routes.",
              "hash": "V-broker-S-broker-route_batch_clean",
              "text": "route_batch_clean",
              "type": "Boolean"
            },
            {
              "doc": "Per group dispatch strategy for shared subscription.\nThis config is a map from shared subscription group name to the strategy\nname. The group name should be of format `[A-Za-z0-9]`. i.e. no\nspecial characters are allowed.",
              "hash": "V-broker-S-broker-shared_subscription_group",
              "refs": [
                {
                  "doc": "Per group dispatch strategy for shared subscription",
                  "fields": [
                    {
                      "default": "random",
                      "doc": "Dispatch strategy for shared subscription.\n- `random`: dispatch the message to a random selected subscriber\n- `round_robin`: select the subscribers in a round-robin manner\n- `round_robin_per_group`: select the subscribers in round-robin fashion within each shared subscriber group\n- `sticky`: always use the last selected subscriber to dispatch,\nuntil the subscriber disconnects.\n- `hash`: select the subscribers by the hash of `clientIds`\n- `local`: send to a random local subscriber. If local\nsubscriber was not found, send to a random subscriber cluster-wide",
                      "hash": "V-broker-S-broker-shared_subscription_group-S-shared_subscription_group-strategy",
                      "text": "strategy",
                      "type": "Enum(random,round_robin,round_robin_per_group,sticky,local,hash_topic,hash_clientid)"
                    }
                  ],
                  "hash": "T-broker-S-broker-shared_subscription_group-S-shared_subscription_group",
                  "text": "shared_subscription_group"
                }
              ],
              "text": "shared_subscription_group",
              "type": "Map($name->Struct(shared_subscription_group))"
            }
          ],
          "hash": "T-broker-S-broker",
          "text": "broker"
        }
      ],
      "text": "broker",
      "type": "Struct(broker)"
    },
    {
      "doc": "System topics configuration.",
      "hash": "V-sys_topics",
      "refs": [
        {
          "doc": "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
          "fields": [
            {
              "default": "\"1m\"",
              "doc": "Time interval of publishing `$SYS` messages.",
              "hash": "V-sys_topics-S-sys_topics-sys_msg_interval",
              "text": "sys_msg_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "default": "\"30s\"",
              "doc": "Time interval for publishing following heartbeat messages:\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
              "hash": "V-sys_topics-S-sys_topics-sys_heartbeat_interval",
              "text": "sys_heartbeat_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "doc": "Client events messages.",
              "hash": "V-sys_topics-S-sys_topics-sys_event_messages",
              "refs": [
                {
                  "doc": "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable to publish client connected event messages",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_connected",
                      "text": "client_connected",
                      "type": "Boolean"
                    },
                    {
                      "default": "true",
                      "doc": "Enable to publish client disconnected event messages.",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_disconnected",
                      "text": "client_disconnected",
                      "type": "Boolean"
                    },
                    {
                      "default": "false",
                      "doc": "Enable to publish event message that client subscribed a topic successfully.",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_subscribed",
                      "text": "client_subscribed",
                      "type": "Boolean"
                    },
                    {
                      "default": "false",
                      "doc": "Enable to publish event message that client unsubscribed a topic successfully.",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_unsubscribed",
                      "text": "client_unsubscribed",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-sys_topics-S-sys_topics-sys_event_messages-S-event_names",
                  "text": "event_names"
                }
              ],
              "text": "sys_event_messages",
              "type": "Struct(event_names)"
            }
          ],
          "hash": "T-sys_topics-S-sys_topics",
          "text": "sys_topics"
        }
      ],
      "text": "sys_topics",
      "type": "Struct(sys_topics)"
    },
    {
      "hash": "V-force_shutdown",
      "refs": [
        {
          "doc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable `force_shutdown` feature.",
              "hash": "V-force_shutdown-S-force_shutdown-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "1000",
              "doc": "Maximum message queue length.",
              "hash": "V-force_shutdown-S-force_shutdown-max_message_queue_len",
              "text": "max_message_queue_len",
              "type": "Integer(0..inf)"
            },
            {
              "default": "\"32MB\"",
              "doc": "Total heap size",
              "hash": "V-force_shutdown-S-force_shutdown-max_heap_size",
              "text": "max_heap_size",
              "type": "String"
            }
          ],
          "hash": "T-force_shutdown-S-force_shutdown",
          "text": "force_shutdown"
        }
      ],
      "text": "force_shutdown",
      "type": "Struct(force_shutdown)"
    },
    {
      "hash": "V-overload_protection",
      "refs": [
        {
          "doc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
          "fields": [
            {
              "default": "false",
              "doc": "React on system overload or not.",
              "hash": "V-overload_protection-S-overload_protection-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "1",
              "doc": "The maximum duration of delay for background task execution during high load conditions.",
              "hash": "V-overload_protection-S-overload_protection-backoff_delay",
              "text": "backoff_delay",
              "type": "Integer(0..inf)"
            },
            {
              "default": "false",
              "doc": "When at high load, skip forceful GC.",
              "hash": "V-overload_protection-S-overload_protection-backoff_gc",
              "text": "backoff_gc",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "When at high load, skip process hibernation.",
              "hash": "V-overload_protection-S-overload_protection-backoff_hibernation",
              "text": "backoff_hibernation",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "When at high load, close new incoming connections.",
              "hash": "V-overload_protection-S-overload_protection-backoff_new_conn",
              "text": "backoff_new_conn",
              "type": "Boolean"
            }
          ],
          "hash": "T-overload_protection-S-overload_protection",
          "text": "overload_protection"
        }
      ],
      "text": "overload_protection",
      "type": "Struct(overload_protection)"
    },
    {
      "hash": "V-force_gc",
      "refs": [
        {
          "doc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable forced garbage collection.",
              "hash": "V-force_gc-S-force_gc-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "16000",
              "doc": "GC the process after this many received messages.",
              "hash": "V-force_gc-S-force_gc-count",
              "text": "count",
              "type": "Integer(0..inf)"
            },
            {
              "default": "\"16MB\"",
              "doc": "GC the process after specified number of bytes have passed through.",
              "hash": "V-force_gc-S-force_gc-bytes",
              "text": "bytes",
              "type": "String"
            }
          ],
          "hash": "T-force_gc-S-force_gc",
          "text": "force_gc"
        }
      ],
      "text": "force_gc",
      "type": "Struct(force_gc)"
    },
    {
      "hash": "V-conn_congestion",
      "refs": [
        {
          "doc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable or disable connection congestion alarm.",
              "hash": "V-conn_congestion-S-conn_congestion-enable_alarm",
              "text": "enable_alarm",
              "type": "Boolean"
            },
            {
              "default": "\"1m\"",
              "doc": "Minimal time before clearing the alarm.<br/>The alarm is cleared only when there's no pending data in<br/>the queue, and at least <code>min_alarm_sustain_duration</code>milliseconds passed since the last time we considered the connection 'congested'.<br/>This is to avoid clearing and raising the alarm again too often.",
              "hash": "V-conn_congestion-S-conn_congestion-min_alarm_sustain_duration",
              "text": "min_alarm_sustain_duration",
              "type": "String"
            }
          ],
          "hash": "T-conn_congestion-S-conn_congestion",
          "text": "conn_congestion"
        }
      ],
      "text": "conn_congestion",
      "type": "Struct(conn_congestion)"
    },
    {
      "hash": "V-stats",
      "refs": [
        {
          "doc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable/disable statistic data collection.",
              "hash": "V-stats-S-stats-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-stats-S-stats",
          "text": "stats"
        }
      ],
      "text": "stats",
      "type": "Struct(stats)"
    },
    {
      "hash": "V-sysmon",
      "refs": [
        {
          "doc": "Features related to system monitoring and introspection.",
          "fields": [
            {
              "hash": "V-sysmon-S-sysmon-vm",
              "refs": [
                {
                  "doc": "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
                  "fields": [
                    {
                      "default": "\"30s\"",
                      "doc": "The time interval for the periodic process limit check.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_check_interval",
                      "text": "process_check_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"80%\"",
                      "doc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is raised.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_high_watermark",
                      "text": "process_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60%\"",
                      "doc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is cleared.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_low_watermark",
                      "text": "process_low_watermark",
                      "type": "String"
                    },
                    {
                      "default": "disabled",
                      "doc": "When an Erlang process spends long time to perform garbage collection, a warning level <code>long_gc</code> log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_gc</code>.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_gc",
                      "text": "long_gc",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"240ms\"",
                      "doc": "When the Erlang VM detect a task scheduled for too long, a warning level 'long_schedule' log is emitted,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/long_schedule</code>.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_schedule",
                      "text": "long_schedule",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"32MB\"",
                      "doc": "When an Erlang process consumed a large amount of memory for its heap space,\nthe system will write a warning level <code>large_heap</code> log, and an MQTT message is published to\nthe system topic <code>$SYS/sysmon/large_heap</code>.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-large_heap",
                      "text": "large_heap",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "true",
                      "doc": "When the RPC connection used to communicate with other nodes in the cluster is overloaded,\nthere will be a <code>busy_dist_port</code> warning log,\nand an MQTT message is published to system topic <code>$SYS/sysmon/busy_dist_port</code>.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_dist_port",
                      "text": "busy_dist_port",
                      "type": "Boolean"
                    },
                    {
                      "default": "true",
                      "doc": "When a port (e.g. TCP socket) is overloaded, there will be a <code>busy_port</code> warning log,\nand an MQTT message is published to the system topic <code>$SYS/sysmon/busy_port</code>.",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_port",
                      "text": "busy_port",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-sysmon-S-sysmon-vm-S-sysmon_vm",
                  "text": "sysmon_vm"
                }
              ],
              "text": "vm",
              "type": "Struct(sysmon_vm)"
            },
            {
              "hash": "V-sysmon-S-sysmon-os",
              "refs": [
                {
                  "doc": "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
                  "fields": [
                    {
                      "default": "\"60s\"",
                      "doc": "The time interval for the periodic CPU check.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_check_interval",
                      "text": "cpu_check_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"80%\"",
                      "doc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is raised.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_high_watermark",
                      "text": "cpu_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60%\"",
                      "doc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is cleared.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_low_watermark",
                      "text": "cpu_low_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60s\"",
                      "doc": "The time interval for the periodic memory check.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-mem_check_interval",
                      "text": "mem_check_interval",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"70%\"",
                      "doc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated before the corresponding alarm is raised.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-sysmem_high_watermark",
                      "text": "sysmem_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"5%\"",
                      "doc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated by one Erlang process before\n the corresponding alarm is raised.",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-procmem_high_watermark",
                      "text": "procmem_high_watermark",
                      "type": "String"
                    }
                  ],
                  "hash": "T-sysmon-S-sysmon-os-S-sysmon_os",
                  "text": "sysmon_os"
                }
              ],
              "text": "os",
              "type": "Struct(sysmon_os)"
            },
            {
              "hash": "V-sysmon-S-sysmon-top",
              "refs": [
                {
                  "doc": "This part of the configuration is responsible for monitoring\n the Erlang processes in the VM. This information can be sent to an external\n PostgreSQL database. This feature is inactive unless the PostgreSQL sink is configured.",
                  "fields": [
                    {
                      "default": "10",
                      "doc": "The number of top processes per monitoring group",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-num_items",
                      "text": "num_items",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "\"2s\"",
                      "doc": "Specifies how often process top should be collected",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-sample_interval",
                      "text": "sample_interval",
                      "type": "String"
                    },
                    {
                      "default": "1000000",
                      "doc": "Stop collecting data when the number of processes\nin the VM exceeds this value",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-max_procs",
                      "text": "max_procs",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "\"\"",
                      "doc": "Hostname of the PostgreSQL database that collects the data points",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-db_hostname",
                      "text": "db_hostname",
                      "type": "String"
                    },
                    {
                      "default": "5432",
                      "doc": "Port of the PostgreSQL database that collects the data points.",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-db_port",
                      "text": "db_port",
                      "type": "Integer"
                    },
                    {
                      "default": "\"system_monitor\"",
                      "doc": "Username of the PostgreSQL database",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-db_username",
                      "text": "db_username",
                      "type": "String"
                    },
                    {
                      "default": "\"system_monitor_password\"",
                      "doc": "EMQX user password in the PostgreSQL database",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-db_password",
                      "text": "db_password",
                      "type": "String"
                    },
                    {
                      "default": "\"postgres\"",
                      "doc": "PostgreSQL database name",
                      "hash": "V-sysmon-S-sysmon-top-S-sysmon_top-db_name",
                      "text": "db_name",
                      "type": "String"
                    }
                  ],
                  "hash": "T-sysmon-S-sysmon-top-S-sysmon_top",
                  "text": "sysmon_top"
                }
              ],
              "text": "top",
              "type": "Struct(sysmon_top)"
            }
          ],
          "hash": "T-sysmon-S-sysmon",
          "text": "sysmon"
        }
      ],
      "text": "sysmon",
      "type": "Struct(sysmon)"
    },
    {
      "hash": "V-alarm",
      "refs": [
        {
          "doc": "Settings for the alarms.",
          "fields": [
            {
              "default": "[log, publish]",
              "doc": "The actions triggered when the alarm is activated.<br/>Currently, the following actions are supported: <code>log</code> and <code>publish</code>.\n<code>log</code> is to write the alarm to log (console or file).\n<code>publish</code> is to publish the alarm as an MQTT message to the system topics:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
              "hash": "V-alarm-S-alarm-actions",
              "text": "actions",
              "type": "Array(String)"
            },
            {
              "default": "1000",
              "doc": "The maximum total number of deactivated alarms to keep as history.<br/>When this limit is exceeded, the oldest deactivated alarms are deleted to cap the total number.",
              "hash": "V-alarm-S-alarm-size_limit",
              "text": "size_limit",
              "type": "Integer(1..3000)"
            },
            {
              "default": "\"24h\"",
              "doc": "Retention time of deactivated alarms. Alarms are not deleted immediately\nwhen deactivated, but after the retention time.",
              "hash": "V-alarm-S-alarm-validity_period",
              "text": "validity_period",
              "type": "String"
            }
          ],
          "hash": "T-alarm-S-alarm",
          "text": "alarm"
        }
      ],
      "text": "alarm",
      "type": "Struct(alarm)"
    },
    {
      "hash": "V-flapping_detect",
      "refs": [
        {
          "doc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
          "fields": [
            {
              "default": "false",
              "doc": "Enable flapping connection detection feature.",
              "hash": "V-flapping_detect-S-flapping_detect-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "15",
              "doc": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
              "hash": "V-flapping_detect-S-flapping_detect-max_count",
              "text": "max_count",
              "type": "Integer"
            },
            {
              "default": "\"1m\"",
              "doc": "The time window for flapping detection.",
              "hash": "V-flapping_detect-S-flapping_detect-window_time",
              "text": "window_time",
              "type": "String"
            },
            {
              "default": "\"5m\"",
              "doc": "How long the flapping clientid will be banned.",
              "hash": "V-flapping_detect-S-flapping_detect-ban_time",
              "text": "ban_time",
              "type": "String"
            }
          ],
          "hash": "T-flapping_detect-S-flapping_detect",
          "text": "flapping_detect"
        }
      ],
      "text": "flapping_detect",
      "type": "Struct(flapping_detect)"
    },
    {
      "hash": "V-persistent_session_store",
      "refs": [
        {
          "doc": "Settings for message persistence.",
          "fields": [
            {
              "default": "false",
              "doc": "Use the database to store information about persistent sessions.\nThis makes it possible to migrate a client connection to another\ncluster node if a node is stopped.",
              "hash": "V-persistent_session_store-S-persistent_session_store-enabled",
              "text": "enabled",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "Save information about the persistent sessions on disc.\nIf this option is enabled, persistent sessions will survive full restart of the cluster.\nOtherwise, all the data will be stored in RAM, and it will be lost when all the nodes in the cluster are stopped.",
              "hash": "V-persistent_session_store-S-persistent_session_store-on_disc",
              "text": "on_disc",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "Maintain a copy of the data in RAM for faster access.",
              "hash": "V-persistent_session_store-S-persistent_session_store-ram_cache",
              "text": "ram_cache",
              "type": "Boolean"
            },
            {
              "default": "{\n  messages {ram_cache = \"false\"}\n  session {ram_cache = \"true\"}\n  session_messages {ram_cache = \"true\"}\n  type = \"builtin\"\n}\n",
              "doc": "Database management system used to store information about persistent sessions and messages.\n- `builtin`: Use the embedded database (mria)",
              "hash": "V-persistent_session_store-S-persistent_session_store-backend",
              "refs": [
                {
                  "doc": "Settings for the built-in storage engine of persistent messages.",
                  "fields": [
                    {
                      "default": "builtin",
                      "doc": "",
                      "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-type",
                      "text": "type",
                      "type": "Enum(builtin)"
                    },
                    {
                      "doc": "Performance tuning options for built-in session table.",
                      "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session",
                      "refs": [
                        {
                          "doc": "Tuning options for the mria table.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Maintain a copy of the data in RAM for faster access.",
                              "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session-S-persistent_table_mria_opts-ram_cache",
                              "text": "ram_cache",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session-S-persistent_table_mria_opts",
                          "text": "persistent_table_mria_opts"
                        }
                      ],
                      "text": "session",
                      "type": "Struct(persistent_table_mria_opts)"
                    },
                    {
                      "doc": "Performance tuning options for built-in session messages table.",
                      "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session_messages",
                      "refs": [
                        {
                          "doc": "Tuning options for the mria table.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Maintain a copy of the data in RAM for faster access.",
                              "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session_messages-S-persistent_table_mria_opts-ram_cache",
                              "text": "ram_cache",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-session_messages-S-persistent_table_mria_opts",
                          "text": "persistent_table_mria_opts"
                        }
                      ],
                      "text": "session_messages",
                      "type": "Struct(persistent_table_mria_opts)"
                    },
                    {
                      "doc": "Performance tuning options for built-in messages table.",
                      "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-messages",
                      "refs": [
                        {
                          "doc": "Tuning options for the mria table.",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Maintain a copy of the data in RAM for faster access.",
                              "hash": "V-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-messages-S-persistent_table_mria_opts-ram_cache",
                              "text": "ram_cache",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin-messages-S-persistent_table_mria_opts",
                          "text": "persistent_table_mria_opts"
                        }
                      ],
                      "text": "messages",
                      "type": "Struct(persistent_table_mria_opts)"
                    }
                  ],
                  "hash": "T-persistent_session_store-S-persistent_session_store-backend-S-persistent_session_builtin",
                  "text": "persistent_session_builtin"
                }
              ],
              "text": "backend",
              "type": "OneOf(Struct(persistent_session_builtin))"
            },
            {
              "default": "\"1h\"",
              "doc": "The time messages that was not delivered to a persistent session\nis stored before being garbage collected if the node the previous\nsession was handled on restarts of is stopped.",
              "hash": "V-persistent_session_store-S-persistent_session_store-max_retain_undelivered",
              "text": "max_retain_undelivered",
              "type": "String"
            },
            {
              "default": "\"1h\"",
              "doc": "The starting interval for garbage collection of undelivered messages to\na persistent session. This affects how often the \"max_retain_undelivered\"\nis checked for removal.",
              "hash": "V-persistent_session_store-S-persistent_session_store-message_gc_interval",
              "text": "message_gc_interval",
              "type": "String"
            },
            {
              "default": "\"1m\"",
              "doc": "The starting interval for garbage collection of transient data for\npersistent session messages. This does not affect the lifetime length\nof persistent session messages.",
              "hash": "V-persistent_session_store-S-persistent_session_store-session_message_gc_interval",
              "text": "session_message_gc_interval",
              "type": "String"
            }
          ],
          "hash": "T-persistent_session_store-S-persistent_session_store",
          "text": "persistent_session_store"
        }
      ],
      "text": "persistent_session_store",
      "type": "Struct(persistent_session_store)"
    },
    {
      "hash": "V-trace",
      "refs": [
        {
          "doc": "Real-time filtering logs for the ClientID or Topic or IP for debugging.",
          "fields": [
            {
              "default": "text",
              "doc": "Determine the format of the payload format in the trace file.<br/>\n`text`: Text-based protocol or plain text protocol.\n It is recommended when payload is JSON encoded.<br/>\n`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/>\n`hidden`: payload is obfuscated as `******`",
              "hash": "V-trace-S-trace-payload_encode",
              "text": "payload_encode",
              "type": "Enum(hex,text,hidden)"
            }
          ],
          "hash": "T-trace-S-trace",
          "text": "trace"
        }
      ],
      "text": "trace",
      "type": "Struct(trace)"
    },
    {
      "hash": "V-bridges",
      "refs": [
        {
          "doc": "Configuration for MQTT bridges.",
          "fields": [
            {
              "doc": "WebHook to an HTTP server.",
              "hash": "V-bridges-S-bridges-webhook",
              "refs": [
                {
                  "doc": "Configuration for an HTTP bridge.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable or disable this bridge",
                      "hash": "V-bridges-S-bridges-webhook-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "{}",
                      "doc": "Resource options.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "Creation options.",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "The number of buffer workers. Only applicable for egress type bridges.\nFor bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Health check interval.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "Whether start the resource right after created.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "The auto restart interval after the resource is disconnected.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "Query mode. Optional 'sync/async', default 'async'.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"100MB\"",
                              "doc": "Maximum number of bytes to buffer for each buffer worker.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-max_queue_bytes",
                              "text": "max_queue_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "The timeout when connecting to the HTTP server.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "random",
                      "doc": "The type of the pool. Can be one of `random`, `hash`.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-pool_type",
                      "text": "pool_type",
                      "type": "Enum(random,hash)"
                    },
                    {
                      "default": "8",
                      "doc": "The pool size.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "100",
                      "doc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Configure HTTP request parameters.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP method.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "URL path.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP request body.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "List of HTTP headers.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "Max retry times if error on sending request.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP request timeout.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "The URL of the HTTP Bridge.<br/>\nTemplate with variables is allowed in the path, but variables cannot be used in the scheme, host,\nor port part.<br/>\nFor example, <code> http://localhost:9901/${topic} </code> is allowed, but\n<code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code>\nis not allowed.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since 5.0.12.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-direction",
                      "text": "direction",
                      "type": "String(\"egress\")"
                    },
                    {
                      "doc": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.<br/>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "post",
                      "doc": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/>\nTemplate with variables is allowed.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-method",
                      "text": "method",
                      "type": "Enum(post,put,get,delete)"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=5\"\n}\n",
                      "doc": "The headers of the HTTP request.<br/>\nTemplate with variables is allowed.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "The body of the HTTP request.<br/>\nIf not provided, the body will be a JSON object of all the available fields.<br/>\nThere, 'all the available fields' means the context of a MQTT message when\nthis webhook is triggered by receiving a MQTT message (the `local_topic` is set),\nor the context of the event when this webhook is triggered by a rule (i.e. this\nwebhook is used as an action of a rule).<br/>\nTemplate with variables is allowed.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "default": "2",
                      "doc": "HTTP request max retry times if failed.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "HTTP request timeout.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-webhook-S-config",
                  "text": "config"
                }
              ],
              "text": "webhook",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "MQTT bridges to/from another MQTT broker",
              "hash": "V-bridges-S-bridges-mqtt",
              "refs": [
                {
                  "doc": "The config for MQTT Bridges.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "Enable or disable this bridge",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "{}",
                      "doc": "Resource options.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "Creation options.",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "The number of buffer workers. Only applicable for egress type bridges.\nFor bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Health check interval.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "Whether start the resource right after created.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "The auto restart interval after the resource is disconnected.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "Query mode. Optional 'sync/async', default 'async'.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"100MB\"",
                              "doc": "Maximum number of bytes to buffer for each buffer worker.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-max_queue_bytes",
                              "text": "max_queue_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "cluster_shareload",
                      "doc": "The mode of the MQTT Bridge.<br/>\n- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/>\nIn 'cluster_shareload' mode, the incoming load from the remote broker is shared by\nusing shared subscription.<br/>\nNote that the 'clientid' is suffixed by the node name, this is to avoid\nclientid conflicts between different nodes. And we can only use shared subscription\ntopic filters for <code>remote.topic</code> of ingress connections.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-mode",
                      "text": "mode",
                      "type": "Enum(cluster_shareload)"
                    },
                    {
                      "doc": "The host and port of the remote MQTT broker",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "Optional prefix to prepend to the clientid used by egress bridges.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-clientid_prefix",
                      "text": "clientid_prefix",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.16.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-reconnect_interval",
                      "text": "reconnect_interval",
                      "type": "String"
                    },
                    {
                      "default": "v4",
                      "doc": "The MQTT protocol version",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-proto_ver",
                      "text": "proto_ver",
                      "type": "Enum(v3,v4,v5)"
                    },
                    {
                      "default": "false",
                      "doc": "If enable bridge mode.\nNOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT\nbroker MUST support this feature.\nIf bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.\nThis means that loop detection will be more effective and that retained messages will be propagated correctly.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-bridge_mode",
                      "text": "bridge_mode",
                      "type": "Boolean"
                    },
                    {
                      "doc": "The username of the MQTT protocol",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "The password of the MQTT protocol",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "Whether to start a clean session when reconnecting a remote broker for ingress bridge",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-clean_start",
                      "text": "clean_start",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"300s\"",
                      "doc": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-keepalive",
                      "text": "keepalive",
                      "type": "String"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "32",
                      "doc": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-max_inflight",
                      "text": "max_inflight",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "SSL connection settings.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then\n        send them to the local broker.<br/>\n        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/>\n        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is\n        configured, then messages got from the remote broker will be sent to both the 'local.topic' and\n        the rule.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress",
                      "refs": [
                        {
                          "doc": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then\n        send them to the local broker.<br/>\n        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/>\n        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is\n        configured, then messages got from the remote broker will be sent to both the 'local.topic' and\n        the rule.",
                          "fields": [
                            {
                              "doc": "The configs about subscribing to the remote broker.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote",
                              "refs": [
                                {
                                  "doc": "The configs about subscribing to the remote broker.",
                                  "fields": [
                                    {
                                      "doc": "Receive messages from which topic of the remote broker",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "1",
                                      "doc": "The QoS level to be used when subscribing to the remote broker",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote-qos",
                                      "text": "qos",
                                      "type": "Integer(0..2)"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote",
                                  "text": "ingress_remote"
                                }
                              ],
                              "text": "remote",
                              "type": "Struct(ingress_remote)"
                            },
                            {
                              "doc": "The configs about sending message to the local broker.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local",
                              "refs": [
                                {
                                  "doc": "The configs about sending message to the local broker.",
                                  "fields": [
                                    {
                                      "doc": "Send messages to which topic of the local broker.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${qos}\"",
                                      "doc": "The QoS of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "\"${retain}\"",
                                      "doc": "The 'retain' flag of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "doc": "The payload of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-payload",
                                      "text": "payload",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local",
                                  "text": "ingress_local"
                                }
                              ],
                              "text": "local",
                              "type": "Struct(ingress_local)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress",
                          "text": "ingress"
                        }
                      ],
                      "text": "ingress",
                      "type": "Struct(ingress)"
                    },
                    {
                      "doc": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/>\nTemplate with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/>\nNOTE: if this bridge is used as the action of a rule, and also 'local.topic'\nis configured, then both the data got from the rule and the MQTT messages that matches\n'local.topic' will be forwarded.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress",
                      "refs": [
                        {
                          "doc": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/>\nTemplate with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/>\nNOTE: if this bridge is used as the action of a rule, and also 'local.topic'\nis configured, then both the data got from the rule and the MQTT messages that matches\n'local.topic' will be forwarded.",
                          "fields": [
                            {
                              "doc": "The configs about receiving messages from local broker.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-local",
                              "refs": [
                                {
                                  "doc": "The configs about receiving messages from local broker.",
                                  "fields": [
                                    {
                                      "doc": "The local topic to be forwarded to the remote broker",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-local-S-egress_local-topic",
                                      "text": "topic",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress-local-S-egress_local",
                                  "text": "egress_local"
                                }
                              ],
                              "text": "local",
                              "type": "Struct(egress_local)"
                            },
                            {
                              "doc": "The configs about sending message to the remote broker.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote",
                              "refs": [
                                {
                                  "doc": "The configs about sending message to the remote broker.",
                                  "fields": [
                                    {
                                      "doc": "Forward to which topic of the remote broker.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "1",
                                      "doc": "The QoS of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "false",
                                      "doc": "The 'retain' flag of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "doc": "The payload of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-payload",
                                      "text": "payload",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote",
                                  "text": "egress_remote"
                                }
                              ],
                              "text": "remote",
                              "type": "Struct(egress_remote)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress",
                          "text": "egress"
                        }
                      ],
                      "text": "egress",
                      "type": "Struct(egress)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mqtt-S-config",
                  "text": "config"
                }
              ],
              "text": "mqtt",
              "type": "Map($name->Struct(config))"
            }
          ],
          "hash": "T-bridges-S-bridges",
          "text": "bridges"
        }
      ],
      "text": "bridges",
      "type": "Struct(bridges)"
    },
    {
      "hash": "V-retainer",
      "refs": [
        {
          "doc": "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable retainer feature",
              "hash": "V-retainer-S-retainer-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"0s\"",
              "doc": "Message retention time. 0 means message will never be expired.",
              "hash": "V-retainer-S-retainer-msg_expiry_interval",
              "text": "msg_expiry_interval",
              "type": "String"
            },
            {
              "default": "\"0s\"",
              "doc": "Periodic interval for cleaning up expired messages.\nNever clear if the value is 0.",
              "hash": "V-retainer-S-retainer-msg_clear_interval",
              "text": "msg_clear_interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "Flow control.",
              "hash": "V-retainer-S-retainer-flow_control",
              "refs": [
                {
                  "doc": "Retainer batching and rate limiting.",
                  "fields": [
                    {
                      "default": "0",
                      "doc": "Size of the batch when reading messages from storage. 0 means no limit.",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_read_number",
                      "text": "batch_read_number",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "The number of retained messages can be delivered per batch.",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_number",
                      "text": "batch_deliver_number",
                      "type": "Integer(0..1000)"
                    },
                    {
                      "doc": "The rate limiter name for retained messages' delivery.\nLimiter helps to avoid delivering too many messages to the client at once, which may cause the client to block or crash, or drop messages due to exceeding the size of the message queue.\nThe names of the available rate limiters are taken from the existing rate limiters under `limiter.batch`.\nIf this field is empty, limiter is not used.",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter",
                      "refs": [
                        {
                          "doc": "Internal limiter.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of this token bucket.",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "doc": "The rate limit for each user of the bucket",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client",
                              "refs": [
                                {
                                  "doc": "Settings for the client in bucket level.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "Rate for this bucket.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "The initial number of tokens for this bucket.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-initial",
                                      "text": "initial",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-low_watermark",
                                      "text": "low_watermark",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "The capacity of per user.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "false",
                                      "doc": "Is it possible to split the number of requested tokens?",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-divisible",
                                      "text": "divisible",
                                      "type": "Boolean"
                                    },
                                    {
                                      "default": "\"10s\"",
                                      "doc": "The maximum retry time when acquire failed.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-max_retry_time",
                                      "text": "max_retry_time",
                                      "type": "String"
                                    },
                                    {
                                      "default": "force",
                                      "doc": "The strategy when all the retries failed.",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-failure_strategy",
                                      "text": "failure_strategy",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts",
                                  "text": "client_opts"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(client_opts)"
                            }
                          ],
                          "hash": "T-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal",
                          "text": "internal"
                        }
                      ],
                      "text": "batch_deliver_limiter",
                      "type": "Struct(internal)"
                    }
                  ],
                  "hash": "T-retainer-S-retainer-flow_control-S-flow_control",
                  "text": "flow_control"
                }
              ],
              "text": "flow_control",
              "type": "Struct(flow_control)"
            },
            {
              "default": "\"1MB\"",
              "doc": "Maximum retained message size.",
              "hash": "V-retainer-S-retainer-max_payload_size",
              "text": "max_payload_size",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "When the retained flag of the `PUBLISH` message is set and Payload is empty,\nwhether to continue to publish the message.\nSee:\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038",
              "hash": "V-retainer-S-retainer-stop_publish_clear_msg",
              "text": "stop_publish_clear_msg",
              "type": "Boolean"
            },
            {
              "doc": "Settings for the database storing the retained messages.",
              "hash": "V-retainer-S-retainer-backend",
              "refs": [
                {
                  "doc": "Configuration of the internal database storing retained messages.",
                  "fields": [
                    {
                      "default": "built_in_database",
                      "doc": "Backend type.",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-type",
                      "text": "type",
                      "type": "String(\"built_in_database\")"
                    },
                    {
                      "default": "ram",
                      "doc": "Specifies whether the messages are stored in RAM or persisted on disc.",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-storage_type",
                      "text": "storage_type",
                      "type": "Enum(ram,disc)"
                    },
                    {
                      "default": "0",
                      "doc": "Maximum number of retained messages. 0 means no limit.",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-max_retained_messages",
                      "text": "max_retained_messages",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "[\n  [1, 2, 3],\n  [1, 3],\n  [2, 3],\n  [3]\n]\n",
                      "doc": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-index_specs",
                      "text": "index_specs",
                      "type": "Array(Integer)"
                    }
                  ],
                  "hash": "T-retainer-S-retainer-backend-S-mnesia_config",
                  "text": "mnesia_config"
                }
              ],
              "text": "backend",
              "type": "Struct(mnesia_config)"
            }
          ],
          "hash": "T-retainer-S-retainer",
          "text": "retainer"
        }
      ],
      "text": "retainer",
      "type": "Struct(retainer)"
    },
    {
      "hash": "V-statsd",
      "refs": [
        {
          "doc": "StatsD metrics collection and push configuration.",
          "fields": [
            {
              "default": "false",
              "doc": "Enable or disable StatsD metrics collection and push service.",
              "hash": "V-statsd-S-statsd-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"127.0.0.1:8125\"",
              "doc": "StatsD server address.",
              "hash": "V-statsd-S-statsd-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "\"30s\"",
              "doc": "The sampling interval for metrics.",
              "hash": "V-statsd-S-statsd-sample_time_interval",
              "text": "sample_time_interval",
              "type": "String"
            },
            {
              "default": "\"30s\"",
              "doc": "The push interval for metrics.",
              "hash": "V-statsd-S-statsd-flush_time_interval",
              "text": "flush_time_interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "The tags for metrics.",
              "hash": "V-statsd-S-statsd-tags",
              "text": "tags",
              "type": "Map"
            }
          ],
          "hash": "T-statsd-S-statsd",
          "text": "statsd"
        }
      ],
      "text": "statsd",
      "type": "Struct(statsd)"
    },
    {
      "hash": "V-auto_subscribe",
      "refs": [
        {
          "doc": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
          "fields": [
            {
              "default": "[]",
              "doc": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
              "hash": "V-auto_subscribe-S-auto_subscribe-topics",
              "refs": [
                {
                  "doc": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}\nRequired field, and cannot be empty string",
                  "fields": [
                    {
                      "doc": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}\nRequired field, and cannot be empty string",
                      "hash": "V-auto_subscribe-S-auto_subscribe-topics-S-topic-topic",
                      "text": "topic",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Default value 0. Quality of service.\nAt most once (0)\nAt least once (1)\nExactly once (2)",
                      "hash": "V-auto_subscribe-S-auto_subscribe-topics-S-topic-qos",
                      "text": "qos",
                      "type": "Integer(0..2)"
                    },
                    {
                      "default": "0",
                      "doc": "Default value 0. This option is used to specify whether the server forwards the retained message to the client when establishing a subscription.\nRetain Handling is equal to 0, as long as the client successfully subscribes, the server will send the retained message.\nRetain Handling is equal to 1, if the client successfully subscribes and this subscription does not exist previously, the server sends the retained message. After all, sometimes the client re-initiate the subscription just to change the QoS, but it does not mean that it wants to receive the reserved messages again.\nRetain Handling is equal to 2, even if the client successfully subscribes, the server does not send the retained message.",
                      "hash": "V-auto_subscribe-S-auto_subscribe-topics-S-topic-rh",
                      "text": "rh",
                      "type": "Integer(0..2)"
                    },
                    {
                      "default": "0",
                      "doc": "Default value 0. This option is used to specify whether the server retains the RETAIN mark when forwarding messages to the client, and this option does not affect the RETAIN mark in the retained message. Therefore, when the option Retain As Publish is set to 0, the client will directly distinguish whether this is a normal forwarded message or a retained message according to the RETAIN mark in the message, instead of judging whether this message is the first received after subscribing(the forwarded message may be sent before the retained message, which depends on the specific implementation of different brokers).",
                      "hash": "V-auto_subscribe-S-auto_subscribe-topics-S-topic-rap",
                      "text": "rap",
                      "type": "Integer(0..1)"
                    },
                    {
                      "default": "0",
                      "doc": "Default value 0.\nMQTT v3.1.1： if you subscribe to the topic published by yourself, you will receive all messages that you published.\nMQTT v5: if you set this option as 1 when subscribing, the server will not forward the message you published to you.",
                      "hash": "V-auto_subscribe-S-auto_subscribe-topics-S-topic-nl",
                      "text": "nl",
                      "type": "Integer(0..1)"
                    }
                  ],
                  "hash": "T-auto_subscribe-S-auto_subscribe-topics-S-topic",
                  "text": "topic"
                }
              ],
              "text": "topics",
              "type": "Array(Struct(topic))"
            }
          ],
          "hash": "T-auto_subscribe-S-auto_subscribe",
          "text": "auto_subscribe"
        }
      ],
      "text": "auto_subscribe",
      "type": "Struct(auto_subscribe)"
    },
    {
      "hash": "V-delayed",
      "refs": [
        {
          "doc": "Settings for the delayed module.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable this feature",
              "hash": "V-delayed-S-delayed-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "0",
              "doc": "Maximum number of delayed messages (0 is no limit).",
              "hash": "V-delayed-S-delayed-max_delayed_messages",
              "text": "max_delayed_messages",
              "type": "Integer"
            }
          ],
          "hash": "T-delayed-S-delayed",
          "text": "delayed"
        }
      ],
      "text": "delayed",
      "type": "Struct(delayed)"
    },
    {
      "hash": "V-telemetry",
      "refs": [
        {
          "doc": "Settings for the telemetry module.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable telemetry.",
              "hash": "V-telemetry-S-telemetry-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-telemetry-S-telemetry",
          "text": "telemetry"
        }
      ],
      "text": "telemetry",
      "type": "Struct(telemetry)"
    },
    {
      "doc": "List of topic rewrite rules.",
      "hash": "V-rewrite",
      "refs": [
        {
          "doc": "The topic rewriting function of EMQX supports rewriting topic A to topic B when the client subscribes to topics, publishes messages, and cancels subscriptions according to user-configured rules.\nEach rewrite rule consists of three parts: subject filter, regular expression, and target expression.\nUnder the premise that the subject rewriting function is enabled, when EMQX receives a subject-based MQTT message such as a `PUBLISH` message,\nit will use the subject of the message to sequentially match the subject filter part of the rule in the configuration file. If the match is successful,\nthe regular expression is used to extract the information in the subject, and then replaced with the target expression to form a new subject.\nVariables in the format of `$N` can be used in the target expression to match the elements extracted from the regular expression.\nThe value of `$N` is the Nth element extracted from the regular expression. For example, `$1` is the regular expression. The first element extracted by the expression.\nIt should be noted that EMQX uses reverse order to read the rewrite rules in the configuration file.\nWhen a topic can match the topic filter of multiple topic rewrite rules at the same time, EMQX will only use the first rule it matches. Rewrite.\nIf the regular expression in this rule does not match the subject of the MQTT message, the rewriting will fail, and no other rules will be attempted for rewriting.\nTherefore, users need to carefully design MQTT message topics and topic rewriting rules when using them.",
          "fields": [
            {
              "doc": "Topic rewriting takes effect on the type of operation:\n  - `subscribe`: Rewrite topic when client do subscribe.\n  - `publish`: Rewrite topic when client do publish.\n  - `all`: Both",
              "hash": "V-rewrite-S-rewrite-action",
              "text": "action",
              "type": "Enum(subscribe,publish,all)"
            },
            {
              "doc": "Source topic, specified by the client.",
              "hash": "V-rewrite-S-rewrite-source_topic",
              "text": "source_topic",
              "type": "String"
            },
            {
              "doc": "Destination topic.",
              "hash": "V-rewrite-S-rewrite-dest_topic",
              "text": "dest_topic",
              "type": "String"
            },
            {
              "doc": "Regular expressions",
              "hash": "V-rewrite-S-rewrite-re",
              "text": "re",
              "type": "String"
            }
          ],
          "hash": "T-rewrite-S-rewrite",
          "text": "rewrite"
        }
      ],
      "text": "rewrite",
      "type": "Array(Struct(rewrite))"
    },
    {
      "doc": "List of topics whose metrics are reported.",
      "hash": "V-topic_metrics",
      "refs": [
        {
          "doc": "",
          "fields": [
            {
              "doc": "Collect metrics for the topic.",
              "hash": "V-topic_metrics-S-topic_metrics-topic",
              "text": "topic",
              "type": "String"
            }
          ],
          "hash": "T-topic_metrics-S-topic_metrics",
          "text": "topic_metrics"
        }
      ],
      "text": "topic_metrics",
      "type": "Array(Struct(topic_metrics))"
    },
    {
      "hash": "V-plugins",
      "refs": [
        {
          "doc": "Manage EMQX plugins.<br/>\nPlugins can be pre-built as a part of EMQX package,\nor installed as a standalone package in a location specified by\n<code>install_dir</code> config key<br/>\nThe standalone-installed plugins are referred to as 'external' plugins.",
          "fields": [
            {
              "default": "[]",
              "doc": "An array of plugins in the desired states.<br/>\nThe plugins are started in the defined order",
              "hash": "V-plugins-S-plugins-states",
              "refs": [
                {
                  "doc": "A per-plugin config to describe the desired state of the plugin.",
                  "fields": [
                    {
                      "doc": "The {name}-{version} of the plugin.<br/>\nIt should match the plugin application name-version as the for the plugin release package name<br/>\nFor example: my_plugin-0.1.0.",
                      "hash": "V-plugins-S-plugins-states-S-state-name_vsn",
                      "text": "name_vsn",
                      "type": "String"
                    },
                    {
                      "doc": "Set to 'true' to enable this plugin",
                      "hash": "V-plugins-S-plugins-states-S-state-enable",
                      "text": "enable",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-plugins-S-plugins-states-S-state",
                  "text": "state"
                }
              ],
              "text": "states",
              "type": "Array(Struct(state))"
            },
            {
              "default": "\"plugins\"",
              "doc": "The installation directory for the external plugins.\nThe plugin beam files and configuration files should reside in\nthe subdirectory named as <code>emqx_foo_bar-0.1.0</code>.\n<br/>\nNOTE: For security reasons, this directory should **NOT** be writable\nby anyone except <code>emqx</code> (or any user which runs EMQX).",
              "hash": "V-plugins-S-plugins-install_dir",
              "text": "install_dir",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "Check interval: check if the status of the plugins in the cluster is consistent, <br/>\nif the results of 3 consecutive checks are not consistent, then alarm.",
              "hash": "V-plugins-S-plugins-check_interval",
              "text": "check_interval",
              "type": "String"
            }
          ],
          "hash": "T-plugins-S-plugins",
          "text": "plugins"
        }
      ],
      "text": "plugins",
      "type": "Struct(plugins)"
    },
    {
      "hash": "V-dashboard",
      "refs": [
        {
          "doc": "Configuration for EMQX dashboard.",
          "fields": [
            {
              "doc": "HTTP(s) listeners are identified by their protocol type and are\nused to serve dashboard UI and restful HTTP API.\nListeners must have a unique combination of port number and IP address.\nFor example, an HTTP listener can listen on all configured IP addresses\non a given port for a machine by specifying the IP address 0.0.0.0.\nAlternatively, the HTTP listener can specify a unique IP address for each listener,\nbut use the same port.",
              "hash": "V-dashboard-S-dashboard-listeners",
              "refs": [
                {
                  "doc": "Configuration for the dashboard listener.",
                  "fields": [
                    {
                      "doc": "TCP listeners",
                      "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http",
                      "refs": [
                        {
                          "doc": "Configuration for the dashboard listener (plaintext).",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Ignore or enable this listener",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "18083",
                              "doc": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-bind",
                              "text": "bind",
                              "type": "OneOf(Integer(0..+inf),String)"
                            },
                            {
                              "default": "20",
                              "doc": "Socket acceptor pool size for TCP protocols. Default is the number of schedulers online",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-num_acceptors",
                              "text": "num_acceptors",
                              "type": "Integer"
                            },
                            {
                              "default": "512",
                              "doc": "Maximum number of simultaneous connections.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-max_connections",
                              "text": "max_connections",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "Defines the maximum length that the queue of pending connections can grow to.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-backlog",
                              "text": "backlog",
                              "type": "Integer"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "Send timeout for the socket.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable IPv6 support, default is false, which means IPv4 only.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-inet6",
                              "text": "inet6",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "Disable IPv4-to-IPv6 mapping for the listener.\nThe configuration is only valid when the inet6 is true.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-ipv6_v6only",
                              "text": "ipv6_v6only",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "Enable support for `HAProxy` header. Be aware once enabled regular HTTP requests can't be handled anymore.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-proxy_header",
                              "text": "proxy_header",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-dashboard-S-dashboard-listeners-S-listeners-http-S-http",
                          "text": "http"
                        }
                      ],
                      "text": "http",
                      "type": "Struct(http)"
                    },
                    {
                      "doc": "SSL listeners",
                      "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https",
                      "refs": [
                        {
                          "doc": "Configuration for the dashboard listener (TLS).",
                          "fields": [
                            {
                              "default": "false",
                              "doc": "Ignore or enable this listener",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "18084",
                              "doc": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-bind",
                              "text": "bind",
                              "type": "OneOf(Integer(0..+inf),String)"
                            },
                            {
                              "default": "20",
                              "doc": "Socket acceptor pool size for TCP protocols. Default is the number of schedulers online",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-num_acceptors",
                              "text": "num_acceptors",
                              "type": "Integer"
                            },
                            {
                              "default": "512",
                              "doc": "Maximum number of simultaneous connections.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-max_connections",
                              "text": "max_connections",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "Defines the maximum length that the queue of pending connections can grow to.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-backlog",
                              "text": "backlog",
                              "type": "Integer"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "Send timeout for the socket.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable IPv6 support, default is false, which means IPv4 only.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-inet6",
                              "text": "inet6",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "Disable IPv4-to-IPv6 mapping for the listener.\nThe configuration is only valid when the inet6 is true.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ipv6_v6only",
                              "text": "ipv6_v6only",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "Enable support for `HAProxy` header. Be aware once enabled regular HTTP requests can't be handled anymore.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-proxy_header",
                              "text": "proxy_header",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "\"emqx_tls_psk:lookup\"",
                              "doc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-user_lookup_fun",
                              "text": "user_lookup_fun",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "Maximum time duration allowed for the handshake to complete",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-dashboard-S-dashboard-listeners-S-listeners-https-S-https",
                          "text": "https"
                        }
                      ],
                      "text": "https",
                      "type": "Struct(https)"
                    }
                  ],
                  "hash": "T-dashboard-S-dashboard-listeners-S-listeners",
                  "text": "listeners"
                }
              ],
              "text": "listeners",
              "type": "Struct(listeners)"
            },
            {
              "default": "\"admin\"",
              "doc": "The default username of the automatically created dashboard user.",
              "hash": "V-dashboard-S-dashboard-default_username",
              "text": "default_username",
              "type": "String"
            },
            {
              "default": "\"public\"",
              "doc": "The initial default password for dashboard 'admin' user.\nFor safety, it should be changed as soon as possible.\nThis value is not valid when you log in to Dashboard for the first time via the web\nand change to a complex password as prompted.",
              "hash": "V-dashboard-S-dashboard-default_password",
              "text": "default_password",
              "type": "String"
            },
            {
              "default": "\"10s\"",
              "doc": "How often to update metrics displayed in the dashboard.\nNote: `sample_interval` should be a divisor of 60, default is 10s.",
              "hash": "V-dashboard-S-dashboard-sample_interval",
              "text": "sample_interval",
              "type": "String"
            },
            {
              "default": "\"60m\"",
              "doc": "JWT token expiration time. Default is 60 minutes",
              "hash": "V-dashboard-S-dashboard-token_expired_time",
              "text": "token_expired_time",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "Support Cross-Origin Resource Sharing (CORS).\nAllows a server to indicate any origins (domain, scheme, or port) other than\nits own from which a browser should permit loading resources.",
              "hash": "V-dashboard-S-dashboard-cors",
              "text": "cors",
              "type": "Boolean"
            },
            {
              "default": "en",
              "doc": "Internationalization language support.",
              "hash": "V-dashboard-S-dashboard-i18n_lang",
              "text": "i18n_lang",
              "type": "Enum(en,zh)"
            },
            {
              "default": "\"\"",
              "doc": "Deprecated, use api_key.bootstrap_file.",
              "hash": "V-dashboard-S-dashboard-bootstrap_users_file",
              "text": "bootstrap_users_file",
              "type": "String"
            }
          ],
          "hash": "T-dashboard-S-dashboard",
          "text": "dashboard"
        }
      ],
      "text": "dashboard",
      "type": "Struct(dashboard)"
    },
    {
      "hash": "V-prometheus",
      "refs": [
        {
          "doc": "Settings for reporting metrics to Prometheus",
          "fields": [
            {
              "default": "\"http://127.0.0.1:9091\"",
              "doc": "URL of Prometheus server",
              "hash": "V-prometheus-S-prometheus-push_gateway_server",
              "text": "push_gateway_server",
              "type": "String"
            },
            {
              "default": "\"15s\"",
              "doc": "Data reporting interval",
              "hash": "V-prometheus-S-prometheus-interval",
              "text": "interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "A list of HTTP Headers when pushing to Push Gateway.<br/>\nFor example, <code> { Authorization = \"some-authz-tokens\"}</code>",
              "hash": "V-prometheus-S-prometheus-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "default": "\"${name}/instance/${name}~${host}\"",
              "doc": "Job Name that is pushed to the Push Gateway. Available variables:<br/>\n- ${name}: Name of EMQX node.<br/>\n- ${host}: Host name of EMQX node.<br/>\nFor example, when the EMQX node name is <code>emqx@127.0.0.1</code> then the <code>name</code> variable takes value <code>emqx</code> and the <code>host</code> variable takes value <code>127.0.0.1</code>.<br/>\nDefault value is: <code>${name}/instance/${name}~${host}</code>",
              "hash": "V-prometheus-S-prometheus-job_name",
              "text": "job_name",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "Turn Prometheus data pushing on or off",
              "hash": "V-prometheus-S-prometheus-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-prometheus-S-prometheus",
          "text": "prometheus"
        }
      ],
      "text": "prometheus",
      "type": "Struct(prometheus)"
    },
    {
      "hash": "V-rule_engine",
      "refs": [
        {
          "doc": "Configuration for the EMQX Rule Engine.",
          "fields": [
            {
              "default": "true",
              "doc": "When set to 'true' (default), rule-engine will ignore messages published to $SYS topics.",
              "hash": "V-rule_engine-S-rule_engine-ignore_sys_message",
              "text": "ignore_sys_message",
              "type": "Boolean"
            },
            {
              "default": "\"10s\"",
              "doc": "Default timeout for the `jq` rule engine function",
              "hash": "V-rule_engine-S-rule_engine-jq_function_default_timeout",
              "text": "jq_function_default_timeout",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "The rules",
              "hash": "V-rule_engine-S-rule_engine-rules",
              "refs": [
                {
                  "doc": "Configuration for a rule.",
                  "fields": [
                    {
                      "default": "\"\"",
                      "doc": "The name of the rule",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "doc": "SQL query to transform the messages.\nExample: <code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "default": "[]",
                      "doc": "A list of actions of the rule.\nAn action can be a string that refers to the channel ID of an EMQX bridge, or an object\nthat refers to a function.\nThere a some built-in functions like \"republish\" and \"console\", and we also support user\nprovided functions in the format: \"{module}:{function}\".\nThe actions in the list are executed sequentially.\nThis means that if one of the action is executing slowly, all the following actions will not\nbe executed until it returns.\nIf one of the action crashed, all other actions come after it will still be executed, in the\noriginal order.\nIf there's any error when running an action, there will be an error message, and the 'failure'\ncounter of the function action or the bridge channel will increase.",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions",
                      "refs": [
                        {
                          "doc": "Configuration for a built-in action.",
                          "fields": [
                            {
                              "doc": "Republish the message as a new MQTT message",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-function",
                              "text": "function",
                              "type": "String(\"republish\")"
                            },
                            {
                              "default": "{}",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args",
                              "refs": [
                                {
                                  "doc": "The arguments of the built-in 'republish' action.One can use variables in the args.\nThe variables are selected by the rule. For example, if the rule SQL is defined as following:\n<code>\n    SELECT clientid, qos, payload FROM \"t/1\"\n</code>\nThen there are 3 variables available: <code>clientid</code>, <code>qos</code> and\n<code>payload</code>. And if we've set the args to:\n<code>\n    {\n        topic = \"t/${clientid}\"\n        qos = \"${qos}\"\n        payload = \"msg: ${payload}\"\n    }\n</code>\nWhen the rule is triggered by an MQTT message with payload = `hello`, qos = 1,\nclientid = `Steve`, the rule will republish a new MQTT message to topic `t/Steve`,\npayload = `msg: hello`, and `qos = 1`.",
                                  "fields": [
                                    {
                                      "doc": "The target topic of message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${qos}\"",
                                      "doc": "The qos of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${qos}. If variable ${qos} is not found from the selected result of the rule,\n0 is used.",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "\"${retain}\"",
                                      "doc": "The 'retain' flag of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${retain}. If variable ${retain} is not found from the selected result\nof the rule, false is used.",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "default": "\"${payload}\"",
                                      "doc": "The payload of the message to be re-published.\nTemplate with variables is allowed, see description of the 'republish_args'.\nDefaults to ${payload}. If variable ${payload} is not found from the selected result\nof the rule, then the string \"undefined\" is used.",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-payload",
                                      "text": "payload",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${user_properties}\"",
                                      "doc": "From which variable should the MQTT message's User-Property pairs be taken from.\nThe value must be a map.\nYou may configure it to <code>${pub_props.'User-Property'}</code> or\nuse <code>SELECT *,pub_props.'User-Property' as user_properties</code>\nto forward the original user properties to the republished message.\nYou may also call <code>map_put</code> function like\n<code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code>\nto inject user properties.\nNOTE: MQTT spec allows duplicated user property names, but EMQX Rule-Engine does not.",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-user_properties",
                                      "text": "user_properties",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args",
                                  "text": "republish_args"
                                }
                              ],
                              "text": "args",
                              "type": "Struct(republish_args)"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish",
                          "text": "builtin_action_republish"
                        },
                        {
                          "doc": "Configuration for a built-in action.",
                          "fields": [
                            {
                              "doc": "Print the actions to the console",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_console-function",
                              "text": "function",
                              "type": "String(\"console\")"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_console",
                          "text": "builtin_action_console"
                        },
                        {
                          "doc": "Configuration for a built-in action.",
                          "fields": [
                            {
                              "doc": "The user provided function. Should be in the format: '{module}:{function}'.\nWhere {module} is the Erlang callback module and {function} is the Erlang function.\n\nTo write your own function, checkout the function <code>console</code> and\n<code>republish</code> in the source file:\n<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function-function",
                              "text": "function",
                              "type": "String"
                            },
                            {
                              "default": "{}",
                              "doc": "The args will be passed as the 3rd argument to module:function/3,\ncheckout the function <code>console</code> and <code>republish</code> in the source file:\n<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function-args",
                              "text": "args",
                              "type": "Map"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function",
                          "text": "user_provided_function"
                        }
                      ],
                      "text": "actions",
                      "type": "Array(OneOf(String,Struct(builtin_action_republish),Struct(builtin_action_console),Struct(user_provided_function)))"
                    },
                    {
                      "default": "true",
                      "doc": "Enable or disable the rule",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"\"",
                      "doc": "The description of the rule",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-description",
                      "text": "description",
                      "type": "String"
                    },
                    {
                      "doc": "Rule metadata, do not change manually",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-metadata",
                      "text": "metadata",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-rule_engine-S-rule_engine-rules-S-rules",
                  "text": "rules"
                }
              ],
              "text": "rules",
              "type": "Map($id->Struct(rules))"
            }
          ],
          "hash": "T-rule_engine-S-rule_engine",
          "text": "rule_engine"
        }
      ],
      "text": "rule_engine",
      "type": "Struct(rule_engine)"
    },
    {
      "hash": "V-exhook",
      "refs": [
        {
          "doc": "External hook (exhook) configuration.",
          "fields": [
            {
              "default": "[]",
              "doc": "List of exhook servers",
              "hash": "V-exhook-S-exhook-servers",
              "refs": [
                {
                  "doc": "gRPC server configuration.",
                  "fields": [
                    {
                      "doc": "Name of the exhook server",
                      "hash": "V-exhook-S-exhook-servers-S-server-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "Enable this Exhook server",
                      "hash": "V-exhook-S-exhook-servers-S-server-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "URL of the gRPC server",
                      "hash": "V-exhook-S-exhook-servers-S-server-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "The timeout of request gRPC server",
                      "hash": "V-exhook-S-exhook-servers-S-server-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "default": "deny",
                      "doc": "The value that is returned when the request to the gRPC server fails for any reason",
                      "hash": "V-exhook-S-exhook-servers-S-server-failed_action",
                      "text": "failed_action",
                      "type": "Enum(deny,ignore)"
                    },
                    {
                      "hash": "V-exhook-S-exhook-servers-S-server-ssl",
                      "refs": [
                        {
                          "doc": "SSL client configuration.",
                          "fields": [
                            {
                              "doc": "Trusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM format private key file.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "Enable or disable peer verification.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "Enable TLS session reuse.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "String containing the user's password. Only used if the private key file is password-protected.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "All TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "Hibernate the SSL process after idling for amount of time reducing its memory footprint.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Enable TLS.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Specify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf",
                          "text": "ssl_conf"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_conf)"
                    },
                    {
                      "default": "{keepalive = true, nodelay = true}",
                      "hash": "V-exhook-S-exhook-servers-S-server-socket_options",
                      "refs": [
                        {
                          "doc": "Connection socket options",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "Enables/disables periodic transmission on a connected socket when no other data is exchanged.\nIf the other end does not respond, the connection is considered broken and an error message is sent to the controlling process.",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-keepalive",
                              "text": "keepalive",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "If true, option TCP_NODELAY is turned on for the socket,\nwhich means that also small amounts of data are sent immediately",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "doc": "The minimum size of receive buffer to use for the socket",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "The minimum size of send buffer to use for the socket",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            }
                          ],
                          "hash": "T-exhook-S-exhook-servers-S-server-socket_options-S-socket_options",
                          "text": "socket_options"
                        }
                      ],
                      "text": "socket_options",
                      "type": "Struct(socket_options)"
                    },
                    {
                      "default": "\"60s\"",
                      "doc": "Whether to automatically reconnect (initialize) the gRPC server.\nWhen gRPC is not available, Exhook tries to request the gRPC service at that interval and reinitialize the list of mounted hooks.",
                      "hash": "V-exhook-S-exhook-servers-S-server-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "OneOf(String(\"false\"),String)"
                    },
                    {
                      "default": "8",
                      "doc": "The process pool size for gRPC client",
                      "hash": "V-exhook-S-exhook-servers-S-server-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    }
                  ],
                  "hash": "T-exhook-S-exhook-servers-S-server",
                  "text": "server"
                }
              ],
              "text": "servers",
              "type": "Array(Struct(server))"
            }
          ],
          "hash": "T-exhook-S-exhook",
          "text": "exhook"
        }
      ],
      "text": "exhook",
      "type": "Struct(exhook)"
    },
    {
      "hash": "V-psk_authentication",
      "refs": [
        {
          "doc": "PSK stands for 'Pre-Shared Keys'.\nThis config to enable TLS-PSK authentication.\n\nImportant! Make sure the SSL listener with only <code>tlsv1.2</code> enabled, and also PSK cipher suites\nconfigured, such as <code>RSA-PSK-AES256-GCM-SHA384</code>.\n\nSee listener SSL options config for more details.\n\nThe IDs and secrets can be provided from a file which is configurable by the <code>init_file</code> field.",
          "fields": [
            {
              "default": "false",
              "doc": "Whether to enable TLS PSK support",
              "hash": "V-psk_authentication-S-psk_authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "If init_file is specified, EMQX will import PSKs from the file into the built-in database at startup for use by the runtime.\nThe file has to be structured line-by-line, each line must be in the format of <code>PSKIdentity:SharedSecret</code>.\nFor example: <code>mydevice1:c2VjcmV0</code>",
              "hash": "V-psk_authentication-S-psk_authentication-init_file",
              "text": "init_file",
              "type": "String"
            },
            {
              "default": "\":\"",
              "doc": "The separator between <code>PSKIdentity</code> and <code>SharedSecret</code> in the PSK file",
              "hash": "V-psk_authentication-S-psk_authentication-separator",
              "text": "separator",
              "type": "String"
            },
            {
              "default": "50",
              "doc": "The size of each chunk used to import to the built-in database from PSK file",
              "hash": "V-psk_authentication-S-psk_authentication-chunk_size",
              "text": "chunk_size",
              "type": "Integer"
            }
          ],
          "hash": "T-psk_authentication-S-psk_authentication",
          "text": "psk_authentication"
        }
      ],
      "text": "psk_authentication",
      "type": "Struct(psk_authentication)"
    },
    {
      "hash": "V-limiter",
      "refs": [
        {
          "doc": "Settings for the rate limiter.",
          "fields": [
            {
              "default": "{}",
              "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
              "hash": "V-limiter-S-limiter-bytes_in",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "Rate for this bucket.",
                      "hash": "V-limiter-S-limiter-bytes_in-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                      "hash": "V-limiter-S-limiter-bytes_in-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-bytes_in-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "bytes_in",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
              "hash": "V-limiter-S-limiter-message_in",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "Rate for this bucket.",
                      "hash": "V-limiter-S-limiter-message_in-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                      "hash": "V-limiter-S-limiter-message_in-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-message_in-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "message_in",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
              "hash": "V-limiter-S-limiter-connection",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "Rate for this bucket.",
                      "hash": "V-limiter-S-limiter-connection-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                      "hash": "V-limiter-S-limiter-connection-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-connection-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "connection",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
              "hash": "V-limiter-S-limiter-message_routing",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "Rate for this bucket.",
                      "hash": "V-limiter-S-limiter-message_routing-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                      "hash": "V-limiter-S-limiter-message_routing-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-message_routing-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "message_routing",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "Limiter for EMQX internal app.",
              "hash": "V-limiter-S-limiter-internal",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "Rate for this bucket.",
                      "hash": "V-limiter-S-limiter-internal-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                      "hash": "V-limiter-S-limiter-internal-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-internal-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "internal",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{\n  bytes_in {}\n  connection {}\n  internal {}\n  message_in {}\n  message_routing {}\n}\n",
              "doc": "The rate limit for each user of the bucket",
              "hash": "V-limiter-S-limiter-client",
              "refs": [
                {
                  "doc": "Fields of the client level.",
                  "fields": [
                    {
                      "default": "{}",
                      "doc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of per user.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Is it possible to split the number of requested tokens?",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "The maximum retry time when acquire failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "The strategy when all the retries failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "bytes_in",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-message_in",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of per user.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Is it possible to split the number of requested tokens?",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "The maximum retry time when acquire failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "The strategy when all the retries failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "message_in",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-connection",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of per user.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Is it possible to split the number of requested tokens?",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "The maximum retry time when acquire failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "The strategy when all the retries failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-connection-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "connection",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of per user.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Is it possible to split the number of requested tokens?",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "The maximum retry time when acquire failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "The strategy when all the retries failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "message_routing",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "Limiter for EMQX internal app.",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-internal",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "Rate for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "The initial number of tokens for this bucket.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "The capacity of per user.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "Is it possible to split the number of requested tokens?",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "The maximum retry time when acquire failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "The strategy when all the retries failed.",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-internal-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "internal",
                      "type": "Struct(client_opts)"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-client-S-client_fields",
                  "text": "client_fields"
                }
              ],
              "text": "client",
              "type": "Struct(client_fields)"
            }
          ],
          "hash": "T-limiter-S-limiter",
          "text": "limiter"
        }
      ],
      "text": "limiter",
      "type": "Struct(limiter)"
    },
    {
      "hash": "V-slow_subs",
      "refs": [
        {
          "doc": "Configuration for `slow_subs` feature.",
          "fields": [
            {
              "default": "false",
              "doc": "Enable this feature",
              "hash": "V-slow_subs-S-slow_subs-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"500ms\"",
              "doc": "The latency threshold for statistics",
              "hash": "V-slow_subs-S-slow_subs-threshold",
              "text": "threshold",
              "type": "String"
            },
            {
              "default": "\"300s\"",
              "doc": "The eviction time of the record, which in the statistics record table",
              "hash": "V-slow_subs-S-slow_subs-expire_interval",
              "text": "expire_interval",
              "type": "String"
            },
            {
              "default": "10",
              "doc": "The maximum number of records in the slow subscription statistics record table",
              "hash": "V-slow_subs-S-slow_subs-top_k_num",
              "text": "top_k_num",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "whole",
              "doc": "The method to calculate the latency",
              "hash": "V-slow_subs-S-slow_subs-stats_type",
              "text": "stats_type",
              "type": "Enum(whole,internal,response)"
            }
          ],
          "hash": "T-slow_subs-S-slow_subs",
          "text": "slow_subs"
        }
      ],
      "text": "slow_subs",
      "type": "Struct(slow_subs)"
    },
    {
      "hash": "V-api_key",
      "refs": [
        {
          "doc": "API Key, can be used to request API other than the management API key and the Dashboard user management API",
          "fields": [
            {
              "default": "\"\"",
              "doc": "Bootstrap file is used to add an api_key when emqx is launched,\n      the format is:\n       ```\n       7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n       ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n       ```",
              "hash": "V-api_key-S-api_key-bootstrap_file",
              "text": "bootstrap_file",
              "type": "String"
            }
          ],
          "hash": "T-api_key-S-api_key",
          "text": "api_key"
        }
      ],
      "text": "api_key",
      "type": "Struct(api_key)"
    }
  ],
  "hash": "T-root",
  "text": "root"
}
