{
  "doc": "",
  "fields": [
    {
      "hash": "V-listeners",
      "refs": [
        {
          "doc": "MQTT listeners identified by their protocol type and assigned names",
          "fields": [
            {
              "doc": "TCP 监听器。",
              "hash": "V-listeners-S-listeners-tcp",
              "refs": [
                {
                  "doc": "Settings for the MQTT over TCP listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启停监听器。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "1883",
                      "doc": "监听套接字的 IP 地址和端口。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "监听器接收池的大小。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "5000000",
                      "doc": "监听器允许的最大并发连接数。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "监听器所属的配置组。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "速率限制类型",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "此监听器的访问控制规则。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "连接的 TCP 发送超时。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "如果发送超时，则关闭连接。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "连接的 TCP 接收缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "连接的 TCP 发送缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "驱动程序使用的用户空间缓冲区的大小。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 TCP_NODELAY 标识",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 SO_REUSEADDR 标识。",
                              "hash": "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener",
                  "text": "mqtt_tcp_listener"
                }
              ],
              "text": "tcp",
              "type": "Map($name->OneOf(Struct(mqtt_tcp_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc": "SSL 监听器。",
              "hash": "V-listeners-S-listeners-ssl",
              "refs": [
                {
                  "doc": "Settings for the MQTT over SSL listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启停监听器。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8883",
                      "doc": "监听套接字的 IP 地址和端口。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "监听器接收池的大小。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "5000000",
                      "doc": "监听器允许的最大并发连接数。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "监听器所属的配置组。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "速率限制类型",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "此监听器的访问控制规则。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "连接的 TCP 发送超时。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "如果发送超时，则关闭连接。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "连接的 TCP 接收缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "连接的 TCP 发送缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "驱动程序使用的用户空间缓冲区的大小。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 TCP_NODELAY 标识",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 SO_REUSEADDR 标识。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "Socket options for SSL connections.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "握手完成所允许的最长时间",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-gc_after_handshake",
                              "text": "gc_after_handshake",
                              "type": "Boolean"
                            },
                            {
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp",
                              "refs": [
                                {
                                  "doc": "Per listener OCSP Stapling configuration.",
                                  "fields": [
                                    {
                                      "default": "false",
                                      "doc": "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                      "text": "enable_ocsp_stapling",
                                      "type": "Boolean"
                                    },
                                    {
                                      "doc": "用于检查服务器证书的 OCSP Responder 的 URL。",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-responder_url",
                                      "text": "responder_url",
                                      "type": "String"
                                    },
                                    {
                                      "doc": "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-issuer_pem",
                                      "text": "issuer_pem",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"5m\"",
                                      "doc": "为服务器刷新OCSP响应的周期。",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_interval",
                                      "text": "refresh_interval",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"15s\"",
                                      "doc": "检查 OCSP 响应时，HTTP 请求的超时。",
                                      "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_http_timeout",
                                      "text": "refresh_http_timeout",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp",
                                  "text": "ocsp"
                                }
                              ],
                              "text": "ocsp",
                              "type": "Struct(ocsp)"
                            },
                            {
                              "default": "false",
                              "doc": "是否为该监听器启用 CRL 检查。",
                              "hash": "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-enable_crl_check",
                              "text": "enable_crl_check",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts",
                          "text": "listener_ssl_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_ssl_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener",
                  "text": "mqtt_ssl_listener"
                }
              ],
              "text": "ssl",
              "type": "Map($name->OneOf(Struct(mqtt_ssl_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc": "HTTP websocket 监听器。",
              "hash": "V-listeners-S-listeners-ws",
              "refs": [
                {
                  "doc": "Settings for the MQTT over WebSocket listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启停监听器。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8083",
                      "doc": "监听套接字的 IP 地址和端口。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "监听器接收池的大小。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "5000000",
                      "doc": "监听器允许的最大并发连接数。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "监听器所属的配置组。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "速率限制类型",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "此监听器的访问控制规则。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "连接的 TCP 发送超时。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "如果发送超时，则关闭连接。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "连接的 TCP 接收缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "连接的 TCP 发送缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "驱动程序使用的用户空间缓冲区的大小。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 TCP_NODELAY 标识",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 SO_REUSEADDR 标识。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket",
                      "refs": [
                        {
                          "doc": "WebSocket listener options.",
                          "fields": [
                            {
                              "default": "\"/mqtt\"",
                              "doc": "WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_path",
                              "text": "mqtt_path",
                              "type": "String"
                            },
                            {
                              "default": "multiple",
                              "doc": "WebSocket消息是否允许包含多个 MQTT 数据包。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text": "mqtt_piggyback",
                              "type": "Enum(single,multiple)"
                            },
                            {
                              "default": "false",
                              "doc": "如果 <code>true</code>，则使用<code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-compress",
                              "text": "compress",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"7200s\"",
                              "doc": "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-idle_timeout",
                              "text": "idle_timeout",
                              "type": "String"
                            },
                            {
                              "default": "infinity",
                              "doc": "单个 MQTT 数据包的最大长度。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-max_frame_size",
                              "text": "max_frame_size",
                              "type": "OneOf(String(\"infinity\"),Integer)"
                            },
                            {
                              "default": "true",
                              "doc": "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text": "fail_if_no_subprotocol",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
                              "doc": "逗号分隔的 subprotocols 支持列表。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text": "supported_subprotocols",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origin_enable",
                              "text": "check_origin_enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>false</code> and <code>check_origin_enable</code> is <code>true</code>, the server will reject requests that don't have <code>origin</code> HTTP header.",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text": "allow_origin_absence",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"http://localhost:18083, http://127.0.0.1:18083\"",
                              "doc": "允许的 origins 列表",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origins",
                              "text": "check_origins",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-for\"",
                              "doc": "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_address_header",
                              "text": "proxy_address_header",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-port\"",
                              "doc": "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_port_header",
                              "text": "proxy_port_header",
                              "type": "String"
                            },
                            {
                              "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts",
                              "refs": [
                                {
                                  "doc": "Compression options.",
                                  "fields": [
                                    {
                                      "doc": "压缩级别",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text": "level",
                                      "type": "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "default": "8",
                                      "doc": "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text": "mem_level",
                                      "type": "Integer(1..9)"
                                    },
                                    {
                                      "default": "default",
                                      "doc": "指定压缩策略。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text": "strategy",
                                      "type": "Enum(default,filtered,huffman_only,rle)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "接管意味着在服务器消息之间保留压缩状态。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text": "server_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "接管意味着在客户端消息之间保留压缩状态。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text": "client_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "指定服务器压缩上下文的大小。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text": "server_max_window_bits",
                                      "type": "Integer(8..15)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "指定客户端压缩上下文的大小。",
                                      "hash": "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text": "client_max_window_bits",
                                      "type": "Integer(8..15)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "text": "deflate_opts"
                                }
                              ],
                              "text": "deflate_opts",
                              "type": "Struct(deflate_opts)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts",
                          "text": "ws_opts"
                        }
                      ],
                      "text": "websocket",
                      "type": "Struct(ws_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-ws-S-mqtt_ws_listener",
                  "text": "mqtt_ws_listener"
                }
              ],
              "text": "ws",
              "type": "Map($name->OneOf(Struct(mqtt_ws_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc": "HTTPS websocket 监听器。",
              "hash": "V-listeners-S-listeners-wss",
              "refs": [
                {
                  "doc": "Settings for the MQTT over WebSocket/SSL listener.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启停监听器。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "8084",
                      "doc": "监听套接字的 IP 地址和端口。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "监听器接收池的大小。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "5000000",
                      "doc": "监听器允许的最大并发连接数。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "监听器所属的配置组。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "速率限制类型",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    },
                    {
                      "default": "[\"allow all\"]",
                      "doc": "此监听器的访问控制规则。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-access_rules",
                      "text": "access_rules",
                      "type": "Array(String)"
                    },
                    {
                      "default": "false",
                      "doc": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol",
                      "text": "proxy_protocol",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol_timeout",
                      "text": "proxy_protocol_timeout",
                      "type": "String"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options",
                      "refs": [
                        {
                          "doc": "TCP listener options.",
                          "fields": [
                            {
                              "default": "100",
                              "doc": "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-active_n",
                              "text": "active_n",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-backlog",
                              "text": "backlog",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "连接的 TCP 发送超时。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "如果发送超时，则关闭连接。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text": "send_timeout_close",
                              "type": "Boolean"
                            },
                            {
                              "doc": "连接的 TCP 接收缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "连接的 TCP 发送缓冲区（OS 内核）。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"4KB\"",
                              "doc": "驱动程序使用的用户空间缓冲区的大小。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-buffer",
                              "text": "buffer",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text": "high_watermark",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 TCP_NODELAY 标识",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "连接的 SO_REUSEADDR 标识。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text": "reuseaddr",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts",
                          "text": "tcp_opts"
                        }
                      ],
                      "text": "tcp_options",
                      "type": "Struct(tcp_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "Socket options for WebSocket/SSL connections.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "握手完成所允许的最长时间",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts",
                          "text": "listener_wss_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_wss_opts)"
                    },
                    {
                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket",
                      "refs": [
                        {
                          "doc": "WebSocket listener options.",
                          "fields": [
                            {
                              "default": "\"/mqtt\"",
                              "doc": "WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_path",
                              "text": "mqtt_path",
                              "type": "String"
                            },
                            {
                              "default": "multiple",
                              "doc": "WebSocket消息是否允许包含多个 MQTT 数据包。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text": "mqtt_piggyback",
                              "type": "Enum(single,multiple)"
                            },
                            {
                              "default": "false",
                              "doc": "如果 <code>true</code>，则使用<code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-compress",
                              "text": "compress",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"7200s\"",
                              "doc": "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-idle_timeout",
                              "text": "idle_timeout",
                              "type": "String"
                            },
                            {
                              "default": "infinity",
                              "doc": "单个 MQTT 数据包的最大长度。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-max_frame_size",
                              "text": "max_frame_size",
                              "type": "OneOf(String(\"infinity\"),Integer)"
                            },
                            {
                              "default": "true",
                              "doc": "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text": "fail_if_no_subprotocol",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
                              "doc": "逗号分隔的 subprotocols 支持列表。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text": "supported_subprotocols",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origin_enable",
                              "text": "check_origin_enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "If <code>false</code> and <code>check_origin_enable</code> is <code>true</code>, the server will reject requests that don't have <code>origin</code> HTTP header.",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text": "allow_origin_absence",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"http://localhost:18083, http://127.0.0.1:18083\"",
                              "doc": "允许的 origins 列表",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origins",
                              "text": "check_origins",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-for\"",
                              "doc": "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_address_header",
                              "text": "proxy_address_header",
                              "type": "String"
                            },
                            {
                              "default": "\"x-forwarded-port\"",
                              "doc": "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_port_header",
                              "text": "proxy_port_header",
                              "type": "String"
                            },
                            {
                              "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts",
                              "refs": [
                                {
                                  "doc": "Compression options.",
                                  "fields": [
                                    {
                                      "doc": "压缩级别",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text": "level",
                                      "type": "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "default": "8",
                                      "doc": "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text": "mem_level",
                                      "type": "Integer(1..9)"
                                    },
                                    {
                                      "default": "default",
                                      "doc": "指定压缩策略。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text": "strategy",
                                      "type": "Enum(default,filtered,huffman_only,rle)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "接管意味着在服务器消息之间保留压缩状态。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text": "server_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "takeover",
                                      "doc": "接管意味着在客户端消息之间保留压缩状态。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text": "client_context_takeover",
                                      "type": "Enum(takeover,no_takeover)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "指定服务器压缩上下文的大小。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text": "server_max_window_bits",
                                      "type": "Integer(8..15)"
                                    },
                                    {
                                      "default": "15",
                                      "doc": "指定客户端压缩上下文的大小。",
                                      "hash": "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text": "client_max_window_bits",
                                      "type": "Integer(8..15)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "text": "deflate_opts"
                                }
                              ],
                              "text": "deflate_opts",
                              "type": "Struct(deflate_opts)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts",
                          "text": "ws_opts"
                        }
                      ],
                      "text": "websocket",
                      "type": "Struct(ws_opts)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-wss-S-mqtt_wss_listener",
                  "text": "mqtt_wss_listener"
                }
              ],
              "text": "wss",
              "type": "Map($name->OneOf(Struct(mqtt_wss_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc": "QUIC 监听器。",
              "hash": "V-listeners-S-listeners-quic",
              "refs": [
                {
                  "doc": "Settings for the MQTT over QUIC listener.",
                  "fields": [
                    {
                      "doc": "证书文件。在 5.1 中会被废弃，使用 .ssl_options.certfile 代替。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "私钥文件。在 5.1 中会被废弃，使用 .ssl_options.keyfile 代替。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "[\"TLS_AES_256_GCM_SHA384\", \"TLS_AES_128_GCM_SHA256\", \"TLS_CHACHA20_POLY1305_SHA256\"]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\n注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "0",
                      "doc": "一个连接在被关闭之前可以空闲多长时间。0表示禁用。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-idle_timeout",
                      "text": "idle_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"10s\"",
                      "doc": "一个握手在被丢弃之前可以空闲多长时间。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-handshake_idle_timeout",
                      "text": "handshake_idle_timeout",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "发送 PING 帧的频率，以保活连接. 设为 0 表示禁用。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-keep_alive_interval",
                      "text": "keep_alive_interval",
                      "type": "String"
                    },
                    {
                      "doc": "QUIC 传输层的 TLS 选项",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options",
                      "refs": [
                        {
                          "doc": "TLS options for QUIC transport.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-fail_if_no_peer_cert",
                              "text": "fail_if_no_peer_cert",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-gc_after_handshake",
                              "text": "gc_after_handshake",
                              "type": "Boolean"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp",
                              "refs": [
                                {
                                  "doc": "Per listener OCSP Stapling configuration.",
                                  "fields": [
                                    {
                                      "default": "false",
                                      "doc": "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                      "text": "enable_ocsp_stapling",
                                      "type": "Boolean"
                                    },
                                    {
                                      "doc": "用于检查服务器证书的 OCSP Responder 的 URL。",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp-responder_url",
                                      "text": "responder_url",
                                      "type": "String"
                                    },
                                    {
                                      "doc": "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp-issuer_pem",
                                      "text": "issuer_pem",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"5m\"",
                                      "doc": "为服务器刷新OCSP响应的周期。",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp-refresh_interval",
                                      "text": "refresh_interval",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"15s\"",
                                      "doc": "检查 OCSP 响应时，HTTP 请求的超时。",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp-refresh_http_timeout",
                                      "text": "refresh_http_timeout",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-ocsp-S-ocsp",
                                  "text": "ocsp"
                                }
                              ],
                              "text": "ocsp",
                              "type": "Struct(ocsp)"
                            },
                            {
                              "doc": "Deprecated since 5.0.20.",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-enable_crl_check",
                              "text": "enable_crl_check",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts",
                          "text": "listener_quic_ssl_opts"
                        }
                      ],
                      "text": "ssl_options",
                      "type": "Struct(listener_quic_ssl_opts)"
                    },
                    {
                      "default": "true",
                      "doc": "启停监听器。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enabled",
                      "text": "enabled",
                      "type": "Boolean"
                    },
                    {
                      "default": "14567",
                      "doc": "监听套接字的 IP 地址和端口。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-bind",
                      "text": "bind",
                      "type": "OneOf(String,Integer)"
                    },
                    {
                      "default": "16",
                      "doc": "监听器接收池的大小。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-acceptors",
                      "text": "acceptors",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "5000000",
                      "doc": "监听器允许的最大并发连接数。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-max_connections",
                      "text": "max_connections",
                      "type": "OneOf(String(\"infinity\"),Integer(1..+inf))"
                    },
                    {
                      "default": "\"\"",
                      "doc": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-mountpoint",
                      "text": "mountpoint",
                      "type": "String"
                    },
                    {
                      "default": "default",
                      "doc": "监听器所属的配置组。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-zone",
                      "text": "zone",
                      "type": "String"
                    },
                    {
                      "doc": "速率限制类型",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter",
                      "refs": [
                        {
                          "doc": "Fields of the listener.",
                          "fields": [
                            {
                              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-bytes_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "bytes_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_in-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_in",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"1000/s\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"1000\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-connection-S-bucket_limit",
                                  "text": "bucket_limit"
                                }
                              ],
                              "text": "connection",
                              "type": "Struct(bucket_limit)"
                            },
                            {
                              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing",
                              "refs": [
                                {
                                  "doc": "Settings for the bucket.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "该令牌桶的容量",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity-initial",
                                      "text": "initial",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-message_routing-S-bucket_infinity",
                                  "text": "bucket_infinity"
                                }
                              ],
                              "text": "message_routing",
                              "type": "Struct(bucket_infinity)"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client",
                              "refs": [
                                {
                                  "doc": "Fields of the client level of the listener.",
                                  "fields": [
                                    {
                                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-bytes_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "bytes_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_in-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_in",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-connection-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "connection",
                                      "type": "Struct(client_opts)"
                                    },
                                    {
                                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing",
                                      "refs": [
                                        {
                                          "doc": "Settings for the client in bucket level.",
                                          "fields": [
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "桶的令牌生成速率",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-rate",
                                              "text": "rate",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "桶中的初始令牌数",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-initial",
                                              "text": "initial",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"0\"",
                                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-low_watermark",
                                              "text": "low_watermark",
                                              "type": "String"
                                            },
                                            {
                                              "default": "\"infinity\"",
                                              "doc": "每个使用者的令牌容量上限",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-capacity",
                                              "text": "capacity",
                                              "type": "String"
                                            },
                                            {
                                              "default": "false",
                                              "doc": "申请的令牌数是否可以被分割",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-divisible",
                                              "text": "divisible",
                                              "type": "Boolean"
                                            },
                                            {
                                              "default": "\"10s\"",
                                              "doc": "申请失败后，尝试重新申请的时长最大值",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-max_retry_time",
                                              "text": "max_retry_time",
                                              "type": "String"
                                            },
                                            {
                                              "default": "force",
                                              "doc": "当所有的重试都失败后的处理策略",
                                              "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts-failure_strategy",
                                              "text": "failure_strategy",
                                              "type": "String"
                                            }
                                          ],
                                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields-message_routing-S-client_opts",
                                          "text": "client_opts"
                                        }
                                      ],
                                      "text": "message_routing",
                                      "type": "Struct(client_opts)"
                                    }
                                  ],
                                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields-client-S-listener_client_fields",
                                  "text": "listener_client_fields"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(listener_client_fields)"
                            }
                          ],
                          "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener-limiter-S-listener_fields",
                          "text": "listener_fields"
                        }
                      ],
                      "text": "limiter",
                      "type": "Struct(listener_fields)"
                    },
                    {
                      "default": "true",
                      "doc": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash": "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enable_authn",
                      "text": "enable_authn",
                      "type": "Enum(true,false,quick_deny_anonymous)"
                    }
                  ],
                  "hash": "T-listeners-S-listeners-quic-S-mqtt_quic_listener",
                  "text": "mqtt_quic_listener"
                }
              ],
              "text": "quic",
              "type": "Map($name->OneOf(Struct(mqtt_quic_listener),String(\"marked_for_deletion\")))"
            }
          ],
          "hash": "T-listeners-S-listeners",
          "text": "listeners"
        }
      ],
      "text": "listeners",
      "type": "Struct(listeners)"
    },
    {
      "doc": "全局的 MQTT 配置项。\nmqtt 下所有的配置作为全局的默认值存在，它可以被 <code>zone</code> 中的配置覆盖。",
      "hash": "V-mqtt",
      "refs": [
        {
          "doc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
          "fields": [
            {
              "default": "\"15s\"",
              "doc": "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
              "hash": "V-mqtt-S-mqtt-idle_timeout",
              "text": "idle_timeout",
              "type": "OneOf(String(\"infinity\"),String)"
            },
            {
              "default": "\"1MB\"",
              "doc": "允许的最大 MQTT 报文大小。",
              "hash": "V-mqtt-S-mqtt-max_packet_size",
              "text": "max_packet_size",
              "type": "String"
            },
            {
              "default": "65535",
              "doc": "允许的最大 MQTT Client ID 长度。",
              "hash": "V-mqtt-S-mqtt-max_clientid_len",
              "text": "max_clientid_len",
              "type": "Integer(23..65535)"
            },
            {
              "default": "128",
              "doc": "允许的最大主题层级。",
              "hash": "V-mqtt-S-mqtt-max_topic_levels",
              "text": "max_topic_levels",
              "type": "Integer(1..65535)"
            },
            {
              "default": "2",
              "doc": "允许的最大 QoS 等级。",
              "hash": "V-mqtt-S-mqtt-max_qos_allowed",
              "text": "max_qos_allowed",
              "type": "Integer(0..2)"
            },
            {
              "default": "65535",
              "doc": "允许的最大主题别名数，0 表示不支持主题别名。",
              "hash": "V-mqtt-S-mqtt-max_topic_alias",
              "text": "max_topic_alias",
              "type": "Integer(0..65535)"
            },
            {
              "default": "true",
              "doc": "是否启用对 MQTT 保留消息的支持。",
              "hash": "V-mqtt-S-mqtt-retain_available",
              "text": "retain_available",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "是否启用对 MQTT 通配符订阅的支持。",
              "hash": "V-mqtt-S-mqtt-wildcard_subscription",
              "text": "wildcard_subscription",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "是否启用对 MQTT 共享订阅的支持。",
              "hash": "V-mqtt-S-mqtt-shared_subscription",
              "text": "shared_subscription",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "是否启用对 MQTT 排它订阅的支持。",
              "hash": "V-mqtt-S-mqtt-exclusive_subscription",
              "text": "exclusive_subscription",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 <code>No Local</code> 选项。",
              "hash": "V-mqtt-S-mqtt-ignore_loop_deliver",
              "text": "ignore_loop_deliver",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
              "hash": "V-mqtt-S-mqtt-strict_mode",
              "text": "strict_mode",
              "type": "Boolean"
            },
            {
              "default": "\"\"",
              "doc": "UTF-8 字符串，用于指定返回给客户端的响应主题，如 <code>reqrsp/</code>，此时请求和应答客户端都需要使用 <code>reqrsp/</code> 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入<code>\"\"</code>；仅适用于 MQTT 5.0 客户端。",
              "hash": "V-mqtt-S-mqtt-response_information",
              "text": "response_information",
              "type": "String"
            },
            {
              "default": "disabled",
              "doc": "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
              "hash": "V-mqtt-S-mqtt-server_keepalive",
              "text": "server_keepalive",
              "type": "OneOf(Integer,String(\"disabled\"))"
            },
            {
              "default": "0.75",
              "doc": "EMQX 判定客户端保活超时使用的阈值系数。计算公式为：Keep Alive * Backoff * 2",
              "hash": "V-mqtt-S-mqtt-keepalive_backoff",
              "text": "keepalive_backoff",
              "type": "Number"
            },
            {
              "default": "infinity",
              "doc": "允许每个客户端建立的最大订阅数量。",
              "hash": "V-mqtt-S-mqtt-max_subscriptions",
              "text": "max_subscriptions",
              "type": "OneOf(Integer(1..inf),String(\"infinity\"))"
            },
            {
              "default": "false",
              "doc": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
              "hash": "V-mqtt-S-mqtt-upgrade_qos",
              "text": "upgrade_qos",
              "type": "Boolean"
            },
            {
              "default": "32",
              "doc": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
              "hash": "V-mqtt-S-mqtt-max_inflight",
              "text": "max_inflight",
              "type": "Integer(1..65535)"
            },
            {
              "default": "\"30s\"",
              "doc": "QoS 1/2 消息的重新投递间隔。",
              "hash": "V-mqtt-S-mqtt-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
              "hash": "V-mqtt-S-mqtt-max_awaiting_rel",
              "text": "max_awaiting_rel",
              "type": "OneOf(Integer,String(\"infinity\"))"
            },
            {
              "default": "\"300s\"",
              "doc": "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
              "hash": "V-mqtt-S-mqtt-await_rel_timeout",
              "text": "await_rel_timeout",
              "type": "String"
            },
            {
              "default": "\"2h\"",
              "doc": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
              "hash": "V-mqtt-S-mqtt-session_expiry_interval",
              "text": "session_expiry_interval",
              "type": "String"
            },
            {
              "default": "1000",
              "doc": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
              "hash": "V-mqtt-S-mqtt-max_mqueue_len",
              "text": "max_mqueue_len",
              "type": "OneOf(Integer(0..+inf),String(\"infinity\"))"
            },
            {
              "default": "disabled",
              "doc": "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
              "hash": "V-mqtt-S-mqtt-mqueue_priorities",
              "text": "mqueue_priorities",
              "type": "OneOf(Map,String(\"disabled\"))"
            },
            {
              "default": "lowest",
              "doc": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
              "hash": "V-mqtt-S-mqtt-mqueue_default_priority",
              "text": "mqueue_default_priority",
              "type": "Enum(highest,lowest)"
            },
            {
              "default": "true",
              "doc": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
              "hash": "V-mqtt-S-mqtt-mqueue_store_qos0",
              "text": "mqueue_store_qos0",
              "type": "Boolean"
            },
            {
              "default": "false",
              "doc": "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>对端证书作为用户名</code> 和 <code>对端证书作为客户端 ID</code>。",
              "hash": "V-mqtt-S-mqtt-use_username_as_clientid",
              "text": "use_username_as_clientid",
              "type": "Boolean"
            },
            {
              "default": "disabled",
              "doc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 的证书内容\n- <code>pem</code>: 将 <code>DER</code> 证书转换为 <code>PEM</code> 格式作为用户名\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
              "hash": "V-mqtt-S-mqtt-peer_cert_as_username",
              "text": "peer_cert_as_username",
              "type": "Enum(disabled,cn,dn,crt,pem,md5)"
            },
            {
              "default": "disabled",
              "doc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式作为客户端 ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
              "hash": "V-mqtt-S-mqtt-peer_cert_as_clientid",
              "text": "peer_cert_as_clientid",
              "type": "Enum(disabled,cn,dn,crt,pem,md5)"
            }
          ],
          "hash": "T-mqtt-S-mqtt",
          "text": "mqtt"
        }
      ],
      "text": "mqtt",
      "type": "Struct(mqtt)"
    },
    {
      "doc": "<code>zone</code> 是按<code>name</code> 分组的一组配置。\n对于灵活的配置映射，可以将 <code>name</code> 设置为侦听器的 <code>zone</code> 配置。\n注：名为 <code>default</code> 的内置区域是自动创建的，无法删除。",
      "hash": "V-zones",
      "refs": [
        {
          "doc": "A `Zone` defines a set of configuration items (such as the maximum number of connections) that can be shared between multiple listeners.\n\n`Listener` can refer to a `Zone` through the configuration item <code>listener.\\<Protocol>.\\<Listener Name>.zone</code>.\n\nThe configs defined in the zones will override the global configs with the same key.\n\nFor example, given the following config:\n```\na {\n    b: 1, c: 1\n}\nzone.my_zone {\n  a {\n    b:2\n  }\n}\n```\n\nThe global config `a` is overridden by the configs `a` inside the zone `my_zone`.\n\nIf there is a listener using the zone `my_zone`, the value of config `a` will be: `{b:2, c: 1}`.\nNote that although the default value of `a.c` is `0`, the global value is used, i.e. configs in the zone have no default values. To override `a.c` one must configure it explicitly in the zone.\n\nAll the global configs that can be overridden in zones are:\n - `stats.*`\n - `mqtt.*`\n - `authorization.*`\n - `flapping_detect.*`\n - `force_shutdown.*`\n - `conn_congestion.*`\n - `force_gc.*`\n\n",
          "fields": [
            {
              "hash": "V-zones-S-zone-mqtt",
              "refs": [
                {
                  "doc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
                  "fields": [
                    {
                      "doc": "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-idle_timeout",
                      "text": "idle_timeout",
                      "type": "OneOf(String(\"infinity\"),String)"
                    },
                    {
                      "doc": "允许的最大 MQTT 报文大小。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_packet_size",
                      "text": "max_packet_size",
                      "type": "String"
                    },
                    {
                      "doc": "允许的最大 MQTT Client ID 长度。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_clientid_len",
                      "text": "max_clientid_len",
                      "type": "Integer(23..65535)"
                    },
                    {
                      "doc": "允许的最大主题层级。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_topic_levels",
                      "text": "max_topic_levels",
                      "type": "Integer(1..65535)"
                    },
                    {
                      "doc": "允许的最大 QoS 等级。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_qos_allowed",
                      "text": "max_qos_allowed",
                      "type": "Integer(0..2)"
                    },
                    {
                      "doc": "允许的最大主题别名数，0 表示不支持主题别名。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_topic_alias",
                      "text": "max_topic_alias",
                      "type": "Integer(0..65535)"
                    },
                    {
                      "doc": "是否启用对 MQTT 保留消息的支持。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-retain_available",
                      "text": "retain_available",
                      "type": "Boolean"
                    },
                    {
                      "doc": "是否启用对 MQTT 通配符订阅的支持。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-wildcard_subscription",
                      "text": "wildcard_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "是否启用对 MQTT 共享订阅的支持。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-shared_subscription",
                      "text": "shared_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "是否启用对 MQTT 排它订阅的支持。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-exclusive_subscription",
                      "text": "exclusive_subscription",
                      "type": "Boolean"
                    },
                    {
                      "doc": "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 <code>No Local</code> 选项。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-ignore_loop_deliver",
                      "text": "ignore_loop_deliver",
                      "type": "Boolean"
                    },
                    {
                      "doc": "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-strict_mode",
                      "text": "strict_mode",
                      "type": "Boolean"
                    },
                    {
                      "doc": "UTF-8 字符串，用于指定返回给客户端的响应主题，如 <code>reqrsp/</code>，此时请求和应答客户端都需要使用 <code>reqrsp/</code> 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入<code>\"\"</code>；仅适用于 MQTT 5.0 客户端。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-response_information",
                      "text": "response_information",
                      "type": "String"
                    },
                    {
                      "doc": "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-server_keepalive",
                      "text": "server_keepalive",
                      "type": "OneOf(Integer,String(\"disabled\"))"
                    },
                    {
                      "doc": "EMQX 判定客户端保活超时使用的阈值系数。计算公式为：Keep Alive * Backoff * 2",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-keepalive_backoff",
                      "text": "keepalive_backoff",
                      "type": "Number"
                    },
                    {
                      "doc": "允许每个客户端建立的最大订阅数量。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_subscriptions",
                      "text": "max_subscriptions",
                      "type": "OneOf(Integer(1..inf),String(\"infinity\"))"
                    },
                    {
                      "doc": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-upgrade_qos",
                      "text": "upgrade_qos",
                      "type": "Boolean"
                    },
                    {
                      "doc": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_inflight",
                      "text": "max_inflight",
                      "type": "Integer(1..65535)"
                    },
                    {
                      "doc": "QoS 1/2 消息的重新投递间隔。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "doc": "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_awaiting_rel",
                      "text": "max_awaiting_rel",
                      "type": "OneOf(Integer,String(\"infinity\"))"
                    },
                    {
                      "doc": "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-await_rel_timeout",
                      "text": "await_rel_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-session_expiry_interval",
                      "text": "session_expiry_interval",
                      "type": "String"
                    },
                    {
                      "doc": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-max_mqueue_len",
                      "text": "max_mqueue_len",
                      "type": "OneOf(Integer(0..+inf),String(\"infinity\"))"
                    },
                    {
                      "doc": "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_priorities",
                      "text": "mqueue_priorities",
                      "type": "OneOf(Map,String(\"disabled\"))"
                    },
                    {
                      "doc": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_default_priority",
                      "text": "mqueue_default_priority",
                      "type": "Enum(highest,lowest)"
                    },
                    {
                      "doc": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-mqueue_store_qos0",
                      "text": "mqueue_store_qos0",
                      "type": "Boolean"
                    },
                    {
                      "doc": "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>对端证书作为用户名</code> 和 <code>对端证书作为客户端 ID</code>。",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-use_username_as_clientid",
                      "text": "use_username_as_clientid",
                      "type": "Boolean"
                    },
                    {
                      "doc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 的证书内容\n- <code>pem</code>: 将 <code>DER</code> 证书转换为 <code>PEM</code> 格式作为用户名\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-peer_cert_as_username",
                      "text": "peer_cert_as_username",
                      "type": "Enum(disabled,cn,dn,crt,pem,md5)"
                    },
                    {
                      "doc": "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式作为客户端 ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
                      "hash": "V-zones-S-zone-mqtt-S-mqtt-peer_cert_as_clientid",
                      "text": "peer_cert_as_clientid",
                      "type": "Enum(disabled,cn,dn,crt,pem,md5)"
                    }
                  ],
                  "hash": "T-zones-S-zone-mqtt-S-mqtt",
                  "text": "mqtt"
                }
              ],
              "text": "mqtt",
              "type": "Struct(mqtt)"
            },
            {
              "hash": "V-zones-S-zone-force_shutdown",
              "refs": [
                {
                  "doc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
                  "fields": [
                    {
                      "doc": "启用 `force_shutdown` 功能。",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "消息队列的最大长度。",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-max_message_queue_len",
                      "text": "max_message_queue_len",
                      "type": "Integer(0..inf)"
                    },
                    {
                      "doc": "Heap 的总大小。",
                      "hash": "V-zones-S-zone-force_shutdown-S-force_shutdown-max_heap_size",
                      "text": "max_heap_size",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-force_shutdown-S-force_shutdown",
                  "text": "force_shutdown"
                }
              ],
              "text": "force_shutdown",
              "type": "Struct(force_shutdown)"
            },
            {
              "hash": "V-zones-S-zone-force_gc",
              "refs": [
                {
                  "doc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
                  "fields": [
                    {
                      "doc": "启用强制垃圾回收。",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "在进程收到多少消息之后，对此进程执行垃圾回收。",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-count",
                      "text": "count",
                      "type": "Integer(0..inf)"
                    },
                    {
                      "doc": "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
                      "hash": "V-zones-S-zone-force_gc-S-force_gc-bytes",
                      "text": "bytes",
                      "type": "String"
                    }
                  ],
                  "hash": "T-zones-S-zone-force_gc-S-force_gc",
                  "text": "force_gc"
                }
              ],
              "text": "force_gc",
              "type": "Struct(force_gc)"
            }
          ],
          "hash": "T-zones-S-zone",
          "text": "zone"
        }
      ],
      "text": "zones",
      "type": "Map($name->Struct(zone))"
    },
    {
      "default": "[]",
      "doc": "全局 MQTT 监听器的默认认证配置。 为每个监听器配置认证参考监听器器配置中的<code>authentication</code> 配置。\n\n该配置可以被配置为：\n<ul>\n  <li><code>[]</code>: 默认值，允许所有的登录请求\n  <li>配置为单认证器，例如 <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>配置为认证器数组</li>\n</ul>\n\n当配置为认证链后，登录凭证会按照配置的顺序进行检查，直到做出<code>allow</code> 或 <code>deny</code>的结果。\n\n如果在所有的认证器都执行完后，还是没有结果，登录将被拒绝。",
      "hash": "V-authentication",
      "refs": [
        {
          "doc": "使用内置数据库作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"built_in_database\")"
            },
            {
              "default": "\"username\"",
              "doc": "指定使用客户端ID `clientid` 还是用户名 `username` 进行认证。",
              "hash": "V-authentication-S-authentication-user_id_type",
              "text": "user_id_type",
              "type": "Enum(clientid,username)"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash creation and verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    },
                    {
                      "default": "10",
                      "doc": "Salt rounds for BCRYPT password generation.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw-salt_rounds",
                      "text": "salt_rounds",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt_rw",
                  "text": "bcrypt_rw"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt_rw),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "使用 MySQL 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"mysql\")"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "doc": "用于查询密码散列等用于认证的数据的 SQL 语句。",
              "hash": "V-authentication-S-authentication-query",
              "text": "query",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "SQL 查询的超时时间。",
              "hash": "V-authentication-S-authentication-query_timeout",
              "text": "query_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
              "hash": "V-authentication-S-authentication-server",
              "text": "server",
              "type": "String"
            },
            {
              "doc": "数据库名字。",
              "hash": "V-authentication-S-authentication-database",
              "text": "database",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-authentication-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "\"root\"",
              "doc": "内部数据库的用户名。",
              "hash": "V-authentication-S-authentication-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-authentication-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-authentication-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-authentication-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "使用 PostgreSQL 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"postgresql\")"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-authentication-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-authentication-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "doc": "用于查询密码散列等用于认证的数据的 SQL 语句。",
              "hash": "V-authentication-S-authentication-query",
              "text": "query",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
              "hash": "V-authentication-S-authentication-server",
              "text": "server",
              "type": "String"
            },
            {
              "doc": "数据库名字。",
              "hash": "V-authentication-S-authentication-database",
              "text": "database",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-authentication-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库的用户名。",
              "hash": "V-authentication-S-authentication-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-authentication-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-authentication-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-authentication-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-authentication-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-authentication-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        },
        {
          "doc": "使用 MongoDB (Standalone) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-standalone-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-standalone-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "存储认证数据的集合。",
              "hash": "V-authentication-S-standalone-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
              "hash": "V-authentication-S-standalone-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "文档中用于存放密码散列的字段。",
              "hash": "V-authentication-S-standalone-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "文档中用于存放盐值的字段。",
              "hash": "V-authentication-S-standalone-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "文档中用于定义用户是否具有超级用户权限的字段。",
              "hash": "V-authentication-S-standalone-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-standalone-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-standalone-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "single",
              "doc": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
              "hash": "V-authentication-S-standalone-mongo_type",
              "text": "mongo_type",
              "type": "String(\"single\")"
            },
            {
              "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
              "hash": "V-authentication-S-standalone-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "写模式。",
              "hash": "V-authentication-S-standalone-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "false",
              "doc": "使用 DNS SRV 记录。",
              "hash": "V-authentication-S-standalone-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-standalone-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库的用户名。",
              "hash": "V-authentication-S-standalone-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-standalone-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "与用户证书关联的数据库名称。",
              "hash": "V-authentication-S-standalone-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "数据库名字。",
              "hash": "V-authentication-S-standalone-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-standalone-topology",
              "refs": [
                {
                  "doc": "配置 Topology",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "最大溢出。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "当池内工人太多时，等待多久清除多余工人。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "超时重连的等待时间。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "工作者等待连接可用的最长时间。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                      "hash": "V-authentication-S-standalone-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "心跳间的最小间隙",
                      "hash": "V-authentication-S-standalone-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-standalone-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-standalone",
          "text": "standalone"
        },
        {
          "doc": "使用 MongoDB (Replica Set) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-replica-set-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-replica-set-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "存储认证数据的集合。",
              "hash": "V-authentication-S-replica-set-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
              "hash": "V-authentication-S-replica-set-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "文档中用于存放密码散列的字段。",
              "hash": "V-authentication-S-replica-set-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "文档中用于存放盐值的字段。",
              "hash": "V-authentication-S-replica-set-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "文档中用于定义用户是否具有超级用户权限的字段。",
              "hash": "V-authentication-S-replica-set-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-replica-set-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-replica-set-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-replica-set-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "rs",
              "doc": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
              "hash": "V-authentication-S-replica-set-mongo_type",
              "text": "mongo_type",
              "type": "String(\"rs\")"
            },
            {
              "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
              "hash": "V-authentication-S-replica-set-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "写模式。",
              "hash": "V-authentication-S-replica-set-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "master",
              "doc": "读模式。",
              "hash": "V-authentication-S-replica-set-r_mode",
              "text": "r_mode",
              "type": "Enum(master,slave_ok)"
            },
            {
              "doc": "副本集的名称。",
              "hash": "V-authentication-S-replica-set-replica_set_name",
              "text": "replica_set_name",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "使用 DNS SRV 记录。",
              "hash": "V-authentication-S-replica-set-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-replica-set-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库的用户名。",
              "hash": "V-authentication-S-replica-set-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-replica-set-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "与用户证书关联的数据库名称。",
              "hash": "V-authentication-S-replica-set-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "数据库名字。",
              "hash": "V-authentication-S-replica-set-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-replica-set-topology",
              "refs": [
                {
                  "doc": "配置 Topology",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "最大溢出。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "当池内工人太多时，等待多久清除多余工人。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "超时重连的等待时间。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "工作者等待连接可用的最长时间。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "心跳间的最小间隙",
                      "hash": "V-authentication-S-replica-set-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-replica-set-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-replica-set-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-replica-set-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-replica-set",
          "text": "replica-set"
        },
        {
          "doc": "使用 MongoDB (Sharded Cluster) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-sharded-cluster-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-sharded-cluster-backend",
              "text": "backend",
              "type": "String(\"mongodb\")"
            },
            {
              "doc": "存储认证数据的集合。",
              "hash": "V-authentication-S-sharded-cluster-collection",
              "text": "collection",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
              "hash": "V-authentication-S-sharded-cluster-filter",
              "text": "filter",
              "type": "Map"
            },
            {
              "default": "\"password_hash\"",
              "doc": "文档中用于存放密码散列的字段。",
              "hash": "V-authentication-S-sharded-cluster-password_hash_field",
              "text": "password_hash_field",
              "type": "String"
            },
            {
              "default": "\"salt\"",
              "doc": "文档中用于存放盐值的字段。",
              "hash": "V-authentication-S-sharded-cluster-salt_field",
              "text": "salt_field",
              "type": "String"
            },
            {
              "default": "\"is_superuser\"",
              "doc": "文档中用于定义用户是否具有超级用户权限的字段。",
              "hash": "V-authentication-S-sharded-cluster-is_superuser_field",
              "text": "is_superuser_field",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-sharded-cluster-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-sharded-cluster-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "sharded",
              "doc": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
              "hash": "V-authentication-S-sharded-cluster-mongo_type",
              "text": "mongo_type",
              "type": "String(\"sharded\")"
            },
            {
              "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
              "hash": "V-authentication-S-sharded-cluster-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "unsafe",
              "doc": "写模式。",
              "hash": "V-authentication-S-sharded-cluster-w_mode",
              "text": "w_mode",
              "type": "Enum(unsafe,safe)"
            },
            {
              "default": "false",
              "doc": "使用 DNS SRV 记录。",
              "hash": "V-authentication-S-sharded-cluster-srv_record",
              "text": "srv_record",
              "type": "Boolean"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-sharded-cluster-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库的用户名。",
              "hash": "V-authentication-S-sharded-cluster-username",
              "text": "username",
              "type": "String"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-sharded-cluster-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "与用户证书关联的数据库名称。",
              "hash": "V-authentication-S-sharded-cluster-auth_source",
              "text": "auth_source",
              "type": "String"
            },
            {
              "doc": "数据库名字。",
              "hash": "V-authentication-S-sharded-cluster-database",
              "text": "database",
              "type": "String"
            },
            {
              "hash": "V-authentication-S-sharded-cluster-topology",
              "refs": [
                {
                  "doc": "配置 Topology",
                  "fields": [
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "最大溢出。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-max_overflow",
                      "text": "max_overflow",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "当池内工人太多时，等待多久清除多余工人。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-overflow_ttl",
                      "text": "overflow_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-overflow_check_period",
                      "text": "overflow_check_period",
                      "type": "String"
                    },
                    {
                      "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-local_threshold_ms",
                      "text": "local_threshold_ms",
                      "type": "String"
                    },
                    {
                      "doc": "超时重连的等待时间。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-connect_timeout_ms",
                      "text": "connect_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-socket_timeout_ms",
                      "text": "socket_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-server_selection_timeout_ms",
                      "text": "server_selection_timeout_ms",
                      "type": "String"
                    },
                    {
                      "doc": "工作者等待连接可用的最长时间。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-wait_queue_timeout_ms",
                      "text": "wait_queue_timeout_ms",
                      "type": "String"
                    },
                    {
                      "default": "\"200s\"",
                      "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-heartbeat_frequency_ms",
                      "text": "heartbeat_frequency_ms",
                      "type": "String"
                    },
                    {
                      "doc": "心跳间的最小间隙",
                      "hash": "V-authentication-S-sharded-cluster-topology-S-topology-min_heartbeat_frequency_ms",
                      "text": "min_heartbeat_frequency_ms",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-topology-S-topology",
                  "text": "topology"
                }
              ],
              "text": "topology",
              "type": "Struct(topology)"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-sharded-cluster-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-sharded-cluster-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-sharded-cluster-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-sharded-cluster",
          "text": "sharded-cluster"
        },
        {
          "doc": "使用 Redis (Standalone) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-standalone-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-standalone-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash": "V-authentication-S-standalone-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-standalone-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-standalone-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-standalone-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
              "hash": "V-authentication-S-standalone-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "single",
              "doc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
              "hash": "V-authentication-S-standalone-redis_type",
              "text": "redis_type",
              "type": "String(\"single\")"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-standalone-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-standalone-password",
              "text": "password",
              "type": "String"
            },
            {
              "default": "0",
              "doc": "Redis 数据库 ID。",
              "hash": "V-authentication-S-standalone-database",
              "text": "database",
              "type": "Integer"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-standalone-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-standalone-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-standalone-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-standalone-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-standalone",
          "text": "standalone"
        },
        {
          "doc": "使用 Redis (Cluster) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-cluster-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-cluster-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash": "V-authentication-S-cluster-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-cluster-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-cluster-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-cluster-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
              "hash": "V-authentication-S-cluster-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "cluster",
              "doc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
              "hash": "V-authentication-S-cluster-redis_type",
              "text": "redis_type",
              "type": "String(\"cluster\")"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-cluster-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-cluster-password",
              "text": "password",
              "type": "String"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-cluster-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-cluster-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-cluster-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-cluster-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-cluster",
          "text": "cluster"
        },
        {
          "doc": "使用 Redis (Sentinel) 作为认证数据源的认证器的配置项。",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-sentinel-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-sentinel-backend",
              "text": "backend",
              "type": "String(\"redis\")"
            },
            {
              "doc": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash": "V-authentication-S-sentinel-cmd",
              "text": "cmd",
              "type": "String"
            },
            {
              "default": "{name = sha256, salt_position = prefix}",
              "doc": "Options for password hash verification.",
              "hash": "V-authentication-S-sentinel-password_hash_algorithm",
              "refs": [
                {
                  "doc": "Settings for bcrypt password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "BCRYPT password hashing.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-bcrypt-name",
                      "text": "name",
                      "type": "String(\"bcrypt\")"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-bcrypt",
                  "text": "bcrypt"
                },
                {
                  "doc": "Settings for PBKDF2 password hashing algorithm.",
                  "fields": [
                    {
                      "doc": "PBKDF2 password hashing.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-name",
                      "text": "name",
                      "type": "String(\"pbkdf2\")"
                    },
                    {
                      "doc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text": "mac_fun",
                      "type": "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc": "Iteration count for PBKDF2 hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-iterations",
                      "text": "iterations",
                      "type": "Integer"
                    },
                    {
                      "doc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text": "dk_length",
                      "type": "Integer"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-pbkdf2",
                  "text": "pbkdf2"
                },
                {
                  "doc": "Settings for simple algorithms.",
                  "fields": [
                    {
                      "doc": "Simple password hashing algorithm.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-simple-name",
                      "text": "name",
                      "type": "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "default": "prefix",
                      "doc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash": "V-authentication-S-sentinel-password_hash_algorithm-S-simple-salt_position",
                      "text": "salt_position",
                      "type": "Enum(disable,prefix,suffix)"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-password_hash_algorithm-S-simple",
                  "text": "simple"
                }
              ],
              "text": "password_hash_algorithm",
              "type": "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-sentinel-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
              "hash": "V-authentication-S-sentinel-servers",
              "text": "servers",
              "type": "String"
            },
            {
              "default": "sentinel",
              "doc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
              "hash": "V-authentication-S-sentinel-redis_type",
              "text": "redis_type",
              "type": "String(\"sentinel\")"
            },
            {
              "doc": "Redis 哨兵模式下的集群名称。",
              "hash": "V-authentication-S-sentinel-sentinel",
              "text": "sentinel",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-sentinel-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "内部数据库密码。",
              "hash": "V-authentication-S-sentinel-password",
              "text": "password",
              "type": "String"
            },
            {
              "default": "0",
              "doc": "Redis 数据库 ID。",
              "hash": "V-authentication-S-sentinel-database",
              "text": "database",
              "type": "Integer"
            },
            {
              "doc": "Deprecated since v5.0.15.",
              "hash": "V-authentication-S-sentinel-auto_reconnect",
              "text": "auto_reconnect",
              "type": "Boolean"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-sentinel-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-sentinel-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-sentinel-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-sentinel",
          "text": "sentinel"
        },
        {
          "doc": "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 GET 请求)。",
          "fields": [
            {
              "doc": "HTTP 请求方法。",
              "hash": "V-authentication-S-get-method",
              "text": "method",
              "type": "String(\"get\")"
            },
            {
              "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
              "doc": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
              "hash": "V-authentication-S-get-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-get-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-get-backend",
              "text": "backend",
              "type": "String(\"http\")"
            },
            {
              "doc": "认证 HTTP 服务器地址。",
              "hash": "V-authentication-S-get-url",
              "text": "url",
              "type": "String"
            },
            {
              "doc": "HTTP request body。",
              "hash": "V-authentication-S-get-body",
              "text": "body",
              "type": "Map"
            },
            {
              "default": "\"5s\"",
              "doc": "HTTP 请求超时时长。",
              "hash": "V-authentication-S-get-request_timeout",
              "text": "request_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-get-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"15s\"",
              "doc": "连接HTTP服务器的超时时间。",
              "hash": "V-authentication-S-get-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
              "hash": "V-authentication-S-get-enable_pipelining",
              "text": "enable_pipelining",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-get-max_retries",
              "text": "max_retries",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "8",
              "doc": "连接池大小。",
              "hash": "V-authentication-S-get-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "设置 HTTP 请求的参数。",
              "hash": "V-authentication-S-get-request",
              "refs": [
                {
                  "doc": "",
                  "fields": [
                    {
                      "doc": "HTTP 请求方法。",
                      "hash": "V-authentication-S-get-request-S-request-method",
                      "text": "method",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP请求路径。",
                      "hash": "V-authentication-S-get-request-S-request-path",
                      "text": "path",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP请求报文主体。",
                      "hash": "V-authentication-S-get-request-S-request-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP 头字段列表。",
                      "hash": "V-authentication-S-get-request-S-request-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "请求出错时的最大重试次数。",
                      "hash": "V-authentication-S-get-request-S-request-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "HTTP 请求超时。",
                      "hash": "V-authentication-S-get-request-S-request-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-get-request-S-request",
                  "text": "request"
                }
              ],
              "text": "request",
              "type": "Struct(request)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-get-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-get-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-get-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-get-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-get",
          "text": "get"
        },
        {
          "doc": "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 POST 请求)。",
          "fields": [
            {
              "doc": "HTTP 请求方法。",
              "hash": "V-authentication-S-post-method",
              "text": "method",
              "type": "String(\"post\")"
            },
            {
              "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
              "doc": "HTTP Headers 列表",
              "hash": "V-authentication-S-post-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-post-mechanism",
              "text": "mechanism",
              "type": "String(\"password_based\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-post-backend",
              "text": "backend",
              "type": "String(\"http\")"
            },
            {
              "doc": "认证 HTTP 服务器地址。",
              "hash": "V-authentication-S-post-url",
              "text": "url",
              "type": "String"
            },
            {
              "doc": "HTTP request body。",
              "hash": "V-authentication-S-post-body",
              "text": "body",
              "type": "Map"
            },
            {
              "default": "\"5s\"",
              "doc": "HTTP 请求超时时长。",
              "hash": "V-authentication-S-post-request_timeout",
              "text": "request_timeout",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-post-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"15s\"",
              "doc": "连接HTTP服务器的超时时间。",
              "hash": "V-authentication-S-post-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "default": "100",
              "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
              "hash": "V-authentication-S-post-enable_pipelining",
              "text": "enable_pipelining",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-post-max_retries",
              "text": "max_retries",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "8",
              "doc": "连接池大小。",
              "hash": "V-authentication-S-post-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "doc": "设置 HTTP 请求的参数。",
              "hash": "V-authentication-S-post-request",
              "refs": [
                {
                  "doc": "",
                  "fields": [
                    {
                      "doc": "HTTP 请求方法。",
                      "hash": "V-authentication-S-post-request-S-request-method",
                      "text": "method",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP请求路径。",
                      "hash": "V-authentication-S-post-request-S-request-path",
                      "text": "path",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP请求报文主体。",
                      "hash": "V-authentication-S-post-request-S-request-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP 头字段列表。",
                      "hash": "V-authentication-S-post-request-S-request-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "请求出错时的最大重试次数。",
                      "hash": "V-authentication-S-post-request-S-request-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "HTTP 请求超时。",
                      "hash": "V-authentication-S-post-request-S-request-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authentication-S-post-request-S-request",
                  "text": "request"
                }
              ],
              "text": "request",
              "type": "Struct(request)"
            },
            {
              "doc": "Deprecated since 5.0.4.",
              "hash": "V-authentication-S-post-retry_interval",
              "text": "retry_interval",
              "type": "String"
            },
            {
              "default": "{enable = false}",
              "doc": "启用 SSL 连接。",
              "hash": "V-authentication-S-post-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-post-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-post-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            }
          ],
          "hash": "T-authentication-S-post",
          "text": "post"
        },
        {
          "doc": "用于认证的 JWT 使用 HMAC 算法签发时的配置。",
          "fields": [
            {
              "doc": "是否使用 JWKS。",
              "hash": "V-authentication-S-hmac-based-use_jwks",
              "text": "use_jwks",
              "type": "Enum(false)"
            },
            {
              "doc": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
              "hash": "V-authentication-S-hmac-based-algorithm",
              "text": "algorithm",
              "type": "Enum(hmac-based)"
            },
            {
              "doc": "使用 HMAC 算法时用于验证 JWT 的密钥",
              "hash": "V-authentication-S-hmac-based-secret",
              "text": "secret",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "密钥是否为 Base64 编码。",
              "hash": "V-authentication-S-hmac-based-secret_base64_encoded",
              "text": "secret_base64_encoded",
              "type": "Boolean"
            },
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-hmac-based-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-hmac-based-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
              "hash": "V-authentication-S-hmac-based-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "要从中获取 JWT 的字段。",
              "hash": "V-authentication-S-hmac-based-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-hmac-based-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-hmac-based",
          "text": "hmac-based"
        },
        {
          "doc": "用于认证的 JWT 使用 RSA 或 ECDSA 算法签发时的配置。",
          "fields": [
            {
              "doc": "是否使用 JWKS。",
              "hash": "V-authentication-S-public-key-use_jwks",
              "text": "use_jwks",
              "type": "Enum(false)"
            },
            {
              "doc": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
              "hash": "V-authentication-S-public-key-algorithm",
              "text": "algorithm",
              "type": "Enum(public-key)"
            },
            {
              "doc": "用于验证 JWT 的公钥。",
              "hash": "V-authentication-S-public-key-public_key",
              "text": "public_key",
              "type": "String"
            },
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-public-key-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-public-key-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
              "hash": "V-authentication-S-public-key-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "要从中获取 JWT 的字段。",
              "hash": "V-authentication-S-public-key-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-public-key-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-public-key",
          "text": "public-key"
        },
        {
          "doc": "用于认证的 JWTs 需要从 JWKS 端点获取时的配置。",
          "fields": [
            {
              "doc": "是否使用 JWKS。",
              "hash": "V-authentication-S-jwks-use_jwks",
              "text": "use_jwks",
              "type": "Enum(true)"
            },
            {
              "doc": "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
              "hash": "V-authentication-S-jwks-endpoint",
              "text": "endpoint",
              "type": "String"
            },
            {
              "default": "8",
              "doc": "桥接远端服务时使用的连接池大小。",
              "hash": "V-authentication-S-jwks-pool_size",
              "text": "pool_size",
              "type": "Integer(1..+inf)"
            },
            {
              "default": "300",
              "doc": "JWKS 刷新间隔。",
              "hash": "V-authentication-S-jwks-refresh_interval",
              "text": "refresh_interval",
              "type": "Integer"
            },
            {
              "default": "{enable = false}",
              "doc": "SSL 选项。",
              "hash": "V-authentication-S-jwks-ssl",
              "refs": [
                {
                  "doc": "Socket options for SSL clients.",
                  "fields": [
                    {
                      "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-cacertfile",
                      "text": "cacertfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-certfile",
                      "text": "certfile",
                      "type": "String"
                    },
                    {
                      "doc": "PEM格式的私钥文件。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-keyfile",
                      "text": "keyfile",
                      "type": "String"
                    },
                    {
                      "default": "verify_none",
                      "doc": "启用或禁用对等验证。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-verify",
                      "text": "verify",
                      "type": "Enum(verify_peer,verify_none)"
                    },
                    {
                      "default": "true",
                      "doc": "启用 TLS 会话重用。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-reuse_sessions",
                      "text": "reuse_sessions",
                      "type": "Boolean"
                    },
                    {
                      "default": "10",
                      "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-depth",
                      "text": "depth",
                      "type": "Integer"
                    },
                    {
                      "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                      "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-versions",
                      "text": "versions",
                      "type": "Array(String)"
                    },
                    {
                      "default": "[]",
                      "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-ciphers",
                      "text": "ciphers",
                      "type": "Array(String)"
                    },
                    {
                      "default": "true",
                      "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text": "secure_renegotiate",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-hibernate_after",
                      "text": "hibernate_after",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "启用 TLS。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash": "V-authentication-S-jwks-ssl-S-ssl_client_opts-server_name_indication",
                      "text": "server_name_indication",
                      "type": "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "hash": "T-authentication-S-jwks-ssl-S-ssl_client_opts",
                  "text": "ssl_client_opts"
                }
              ],
              "text": "ssl",
              "type": "Struct(ssl_client_opts)"
            },
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-jwks-mechanism",
              "text": "mechanism",
              "type": "String(\"jwt\")"
            },
            {
              "default": "\"acl\"",
              "doc": "JWT claim name to use for getting ACL rules.",
              "hash": "V-authentication-S-jwks-acl_claim_name",
              "text": "acl_claim_name",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
              "hash": "V-authentication-S-jwks-verify_claims",
              "text": "verify_claims",
              "type": "Map"
            },
            {
              "default": "password",
              "doc": "要从中获取 JWT 的字段。",
              "hash": "V-authentication-S-jwks-from",
              "text": "from",
              "type": "Enum(username,password)"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-jwks-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-jwks",
          "text": "jwks"
        },
        {
          "doc": "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication.",
          "fields": [
            {
              "doc": "认证机制。",
              "hash": "V-authentication-S-authentication-mechanism",
              "text": "mechanism",
              "type": "String(\"scram\")"
            },
            {
              "doc": "后端类型。",
              "hash": "V-authentication-S-authentication-backend",
              "text": "backend",
              "type": "String(\"built_in_database\")"
            },
            {
              "default": "sha256",
              "doc": "Hashing algorithm.",
              "hash": "V-authentication-S-authentication-algorithm",
              "text": "algorithm",
              "type": "Enum(sha256,sha512)"
            },
            {
              "default": "4096",
              "doc": "Iteration count.",
              "hash": "V-authentication-S-authentication-iteration_count",
              "text": "iteration_count",
              "type": "Integer(0..+inf)"
            },
            {
              "default": "true",
              "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
              "hash": "V-authentication-S-authentication-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-authentication-S-authentication",
          "text": "authentication"
        }
      ],
      "text": "authentication",
      "type": "Array(OneOf(Struct(authentication),Struct(authentication),Struct(authentication),Struct(standalone),Struct(replica-set),Struct(sharded-cluster),Struct(standalone),Struct(cluster),Struct(sentinel),Struct(get),Struct(post),Struct(hmac-based),Struct(public-key),Struct(jwks),Struct(authentication)))"
    },
    {
      "doc": "授权（ACL）。EMQX 支持完整的客户端访问控制（ACL）。",
      "hash": "V-authorization",
      "refs": [
        {
          "doc": "授权相关",
          "fields": [
            {
              "default": "allow",
              "doc": "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找\n到此类用户或客户端时，模式的认访问控制操作。\n在“授权”中查找更多详细信息。",
              "hash": "V-authorization-S-authorization-no_match",
              "text": "no_match",
              "type": "Enum(allow,deny)"
            },
            {
              "default": "ignore",
              "doc": "授权检查拒绝操作时的操作。",
              "hash": "V-authorization-S-authorization-deny_action",
              "text": "deny_action",
              "type": "Enum(ignore,disconnect)"
            },
            {
              "hash": "V-authorization-S-authorization-cache",
              "refs": [
                {
                  "doc": "Settings for the authorization cache.",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用或禁用授权缓存。",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "32",
                      "doc": "缓存项的最大数量。",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-max_size",
                      "text": "max_size",
                      "type": "Integer(1..1048576)"
                    },
                    {
                      "default": "\"1m\"",
                      "doc": "缓存数据的生存时间。",
                      "hash": "V-authorization-S-authorization-cache-S-authz_cache-ttl",
                      "text": "ttl",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-cache-S-authz_cache",
                  "text": "authz_cache"
                }
              ],
              "text": "cache",
              "type": "Struct(authz_cache)"
            },
            {
              "default": "[\n  {\n    enable = true\n    path = \"${EMQX_ETC_DIR}/acl.conf\"\n    type = \"file\"\n  }\n]\n",
              "doc": "授权数据源。<br/>\n授权（ACL）数据源的列表。\n它被设计为一个数组，而不是一个散列映射，\n所以可以作为链式访问控制。<br/>\n\n当授权一个 'publish' 或 'subscribe' 行为时，\n该配置列表中的所有数据源将按顺序进行检查。\n如果在某个客户端未找到时(使用 ClientID 或 Username)。\n将会移动到下一个数据源。直至得到 'allow' 或 'deny' 的结果。<br/>\n\n如果在任何数据源中都未找到对应的客户端信息。\n配置的默认行为 ('authorization.no_match') 将生效。<br/>\n\n注意：\n数据源使用 'type' 进行标识。\n使用同一类型的数据源多于一次不被允许。",
              "hash": "V-authorization-S-authorization-sources",
              "refs": [
                {
                  "doc": "使用静态文件授权",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-file-type",
                      "text": "type",
                      "type": "String(\"file\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-file-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "包含 ACL 规则的文件路径。\n如果在启动 EMQX 节点前预先配置该路径，\n那么可以将该文件置于任何 EMQX 可以访问到的位置。\n\n如果从 EMQX Dashboard 或 HTTP API 创建或修改了规则集，\n那么EMQX将会生成一个新的文件并将它存放在 `data_dir` 下的 `authz` 子目录中，\n并从此弃用旧的文件。",
                      "hash": "V-authorization-S-authorization-sources-S-file-path",
                      "text": "path",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-file",
                  "text": "file"
                },
                {
                  "doc": "使用外部 HTTP 服务器授权(GET 请求)。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-type",
                      "text": "type",
                      "type": "String(\"http\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "授权 HTTP 服务器地址。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"30s\"",
                      "doc": "HTTP 请求超时时长。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-body",
                      "text": "body",
                      "type": "Map"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "连接HTTP服务器的超时时间。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "100",
                      "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "8",
                      "doc": "连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "设置 HTTP 请求的参数。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP 请求方法。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求路径。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求报文主体。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP 头字段列表。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "请求出错时的最大重试次数。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP 请求超时。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_get-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "HTTP 请求方法",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-method",
                      "text": "method",
                      "type": "String(\"get\")"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                      "doc": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
                      "hash": "V-authorization-S-authorization-sources-S-http_get-headers",
                      "text": "headers",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-http_get",
                  "text": "http_get"
                },
                {
                  "doc": "使用外部 HTTP 服务器授权(POST 请求)。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-type",
                      "text": "type",
                      "type": "String(\"http\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "授权 HTTP 服务器地址。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"30s\"",
                      "doc": "HTTP 请求超时时长。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "HTTP request body。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-body",
                      "text": "body",
                      "type": "Map"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "连接HTTP服务器的超时时间。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "100",
                      "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "8",
                      "doc": "连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "设置 HTTP 请求的参数。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP 请求方法。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求路径。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求报文主体。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP 头字段列表。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "请求出错时的最大重试次数。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP 请求超时。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_post-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "HTTP 请求方法",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-method",
                      "text": "method",
                      "type": "String(\"post\")"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n",
                      "doc": "HTTP Headers 列表",
                      "hash": "V-authorization-S-authorization-sources-S-http_post-headers",
                      "text": "headers",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-http_post",
                  "text": "http_post"
                },
                {
                  "doc": "使用内部数据库授权（mnesia）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-mnesia-type",
                      "text": "type",
                      "type": "String(\"built_in_database\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-mnesia-enable",
                      "text": "enable",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mnesia",
                  "text": "mnesia"
                },
                {
                  "doc": "使用 MongoDB 授权（单实例）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` 授权数据集。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "single",
                      "doc": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_single-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_single",
                  "text": "mongo_single"
                },
                {
                  "doc": "使用 MongoDB 授权（副本集模式）",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` 授权数据集。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "rs",
                      "doc": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"rs\")"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "master",
                      "doc": "读模式。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-r_mode",
                      "text": "r_mode",
                      "type": "Enum(master,slave_ok)"
                    },
                    {
                      "doc": "副本集的名称。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-replica_set_name",
                      "text": "replica_set_name",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_rs",
                  "text": "mongo_rs"
                },
                {
                  "doc": "使用 MongoDB 授权（分片集群模式）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-type",
                      "text": "type",
                      "type": "String(\"mongodb\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "`MongoDB` 授权数据集。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- <code>${username}</code>：将在运行时被替换为客户端连接时使用的用户名<br/>\n- <code>${clientid}</code>：将在运行时被替换为客户端连接时使用的客户端标识符",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-filter",
                      "text": "filter",
                      "type": "Map"
                    },
                    {
                      "default": "sharded",
                      "doc": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"sharded\")"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mongo_sharded",
                  "text": "mongo_sharded"
                },
                {
                  "doc": "使用 MySOL 数据库授权",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-type",
                      "text": "type",
                      "type": "String(\"mysql\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"root\"",
                      "doc": "内部数据库的用户名。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "SQL 预处理语句列表。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-prepare_statement",
                      "text": "prepare_statement",
                      "type": "Map"
                    },
                    {
                      "doc": "访问控制数据查询语句/查询命令。",
                      "hash": "V-authorization-S-authorization-sources-S-mysql-query",
                      "text": "query",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-mysql",
                  "text": "mysql"
                },
                {
                  "doc": "使用 PostgreSQL 数据库授权",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-type",
                      "text": "type",
                      "type": "String(\"postgresql\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "SQL 预处理语句列表。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-prepare_statement",
                      "text": "prepare_statement",
                      "type": "Map"
                    },
                    {
                      "doc": "访问控制数据查询语句/查询命令。",
                      "hash": "V-authorization-S-authorization-sources-S-postgresql-query",
                      "text": "query",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-postgresql",
                  "text": "postgresql"
                },
                {
                  "doc": "使用 Redis 授权（单实例）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "single",
                      "doc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-redis_type",
                      "text": "redis_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis 数据库 ID。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "访问控制数据查查询命令",
                      "hash": "V-authorization-S-authorization-sources-S-redis_single-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_single",
                  "text": "redis_single"
                },
                {
                  "doc": "使用 Redis 授权（哨兵模式）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "sentinel",
                      "doc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-redis_type",
                      "text": "redis_type",
                      "type": "String(\"sentinel\")"
                    },
                    {
                      "doc": "Redis 哨兵模式下的集群名称。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-sentinel",
                      "text": "sentinel",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis 数据库 ID。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "访问控制数据查查询命令",
                      "hash": "V-authorization-S-authorization-sources-S-redis_sentinel-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_sentinel",
                  "text": "redis_sentinel"
                },
                {
                  "doc": "使用 Redis 授权（集群模式）。",
                  "fields": [
                    {
                      "doc": "数据后端类型",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-type",
                      "text": "type",
                      "type": "String(\"redis\")"
                    },
                    {
                      "default": "true",
                      "doc": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "cluster",
                      "doc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-redis_type",
                      "text": "redis_type",
                      "type": "String(\"cluster\")"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "访问控制数据查查询命令",
                      "hash": "V-authorization-S-authorization-sources-S-redis_cluster-cmd",
                      "text": "cmd",
                      "type": "String"
                    }
                  ],
                  "hash": "T-authorization-S-authorization-sources-S-redis_cluster",
                  "text": "redis_cluster"
                }
              ],
              "text": "sources",
              "type": "Array(OneOf(Struct(file),Struct(http_get),Struct(http_post),Struct(mnesia),Struct(mongo_single),Struct(mongo_rs),Struct(mongo_sharded),Struct(mysql),Struct(postgresql),Struct(redis_single),Struct(redis_sentinel),Struct(redis_cluster)))"
            }
          ],
          "hash": "T-authorization-S-authorization",
          "text": "authorization"
        }
      ],
      "text": "authorization",
      "type": "Struct(authorization)"
    },
    {
      "hash": "V-node",
      "refs": [
        {
          "doc": "节点名称、Cookie、配置文件、数据目录和 Erlang 虚拟机（BEAM）启动参数。",
          "fields": [
            {
              "default": "\"emqx@127.0.0.1\"",
              "doc": "节点名。格式为 \\<name>@\\<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。",
              "hash": "V-node-S-node-name",
              "text": "name",
              "type": "String"
            },
            {
              "doc": "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
              "hash": "V-node-S-node-cookie",
              "text": "cookie",
              "type": "String"
            },
            {
              "default": "2097152",
              "doc": "Erlang系统同时存在的最大进程数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
              "hash": "V-node-S-node-process_limit",
              "text": "process_limit",
              "type": "Integer(1024..134217727)"
            },
            {
              "default": "1048576",
              "doc": "Erlang系统同时存在的最大端口数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
              "hash": "V-node-S-node-max_ports",
              "text": "max_ports",
              "type": "Integer(1024..134217727)"
            },
            {
              "default": "8192",
              "doc": "Erlang分布式缓冲区的繁忙阈值，单位是KB。",
              "hash": "V-node-S-node-dist_buffer_size",
              "text": "dist_buffer_size",
              "type": "Integer(1..2097151)"
            },
            {
              "doc": "节点数据存放目录，可能会自动创建的子目录如下：<br/>\n- `mnesia/<node_name>`。EMQX的内置数据库目录。例如，`mnesia/emqx@127.0.0.1`。<br/>\n如果节点要被重新命名（例如，`emqx@10.0.1.1`）。旧目录应该首先被删除。<br/>\n- `configs`。在启动时生成的配置，以及集群/本地覆盖的配置。<br/>\n- `patches`: 热补丁文件将被放在这里。<br/>\n- `trace`: 日志跟踪文件。<br/>\n\n**注意**: 一个数据dir不能被两个或更多的EMQX节点同时使用。",
              "hash": "V-node-S-node-data_dir",
              "text": "data_dir",
              "type": "String"
            },
            {
              "default": "\"15m\"",
              "doc": "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。禁用设置为 <code>disabled</code>。",
              "hash": "V-node-S-node-global_gc_interval",
              "text": "global_gc_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "aliases": [
                "db_role"
              ],
              "default": "core",
              "doc": "选择节点的角色。<br/>\n<code>core</code> 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。<br/>\n<code>repliant</code> 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余<br/>\n建议复制节点多于核心节点。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>。",
              "hash": "V-node-S-node-role",
              "text": "role",
              "type": "Enum(core,replicant)"
            }
          ],
          "hash": "T-node-S-node",
          "text": "node"
        }
      ],
      "text": "node",
      "type": "Struct(node)"
    },
    {
      "hash": "V-cluster",
      "refs": [
        {
          "doc": "EMQX 节点可以组成一个集群，以提高总容量。<br/> 这里指定了节点之间如何连接。",
          "fields": [
            {
              "default": "emqxcl",
              "doc": "EMQX集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
              "hash": "V-cluster-S-cluster-name",
              "text": "name",
              "type": "String"
            },
            {
              "default": "manual",
              "doc": "集群节点发现方式。可选值为:\n- manual: 使用 <code>emqx ctl cluster</code> 命令管理集群。<br/>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<br/>\n- dns: 使用 DNS A 记录的方式发现节点。<br/>\n- etcd: 使用 etcd 发现节点。<br/>\n- k8s: 使用 Kubernetes API 发现节点。",
              "hash": "V-cluster-S-cluster-discovery_strategy",
              "text": "discovery_strategy",
              "type": "Enum(manual,static,mcast,dns,etcd,k8s)"
            },
            {
              "default": "[]",
              "doc": "当前节点连接的核心节点列表。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>\n并且设置<code>role</code>为<code>replicant</code>时生效。<br/>\n该值需要在手动或静态集群发现机制下设置。<br/>\n如果使用了自动集群发现机制（如<code>etcd</code>），则不需要设置该值。",
              "hash": "V-cluster-S-cluster-core_nodes",
              "text": "core_nodes",
              "type": "String"
            },
            {
              "default": "\"5m\"",
              "doc": "指定多久之后从集群中删除离线节点。",
              "hash": "V-cluster-S-cluster-autoclean",
              "text": "autoclean",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "集群脑裂自动恢复机制开关。",
              "hash": "V-cluster-S-cluster-autoheal",
              "text": "autoheal",
              "type": "Boolean"
            },
            {
              "default": "inet_tcp",
              "doc": "分布式 Erlang 集群协议类型。可选值为:<br/>\n- inet_tcp: 使用 IPv4 <br/>\n- inet_tls: 使用 TLS，需要配合 <code>etc/ssl_dist.conf</code> 一起使用。",
              "hash": "V-cluster-S-cluster-proto_dist",
              "text": "proto_dist",
              "type": "Enum(inet_tcp,inet6_tcp,inet_tls)"
            },
            {
              "hash": "V-cluster-S-cluster-static",
              "refs": [
                {
                  "doc": "静态节点服务发现。新节点通过连接一个节点来加入集群。",
                  "fields": [
                    {
                      "default": "[]",
                      "doc": "集群中的EMQX节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。",
                      "hash": "V-cluster-S-cluster-static-S-cluster_static-seeds",
                      "text": "seeds",
                      "type": "Array(String)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-static-S-cluster_static",
                  "text": "cluster_static"
                }
              ],
              "text": "static",
              "type": "Struct(cluster_static)"
            },
            {
              "hash": "V-cluster-S-cluster-mcast",
              "refs": [
                {
                  "doc": "UDP 组播服务发现。",
                  "fields": [
                    {
                      "default": "\"239.192.0.1\"",
                      "doc": "指定多播 IPv4 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-addr",
                      "text": "addr",
                      "type": "String"
                    },
                    {
                      "default": "[4369,4370]",
                      "doc": "指定多播端口。如有多个端口使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-ports",
                      "text": "ports",
                      "type": "Array(Integer)"
                    },
                    {
                      "default": "\"0.0.0.0\"",
                      "doc": "指定节点发现服务需要绑定到本地 IP 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-iface",
                      "text": "iface",
                      "type": "String"
                    },
                    {
                      "default": "255",
                      "doc": "指定多播的 Time-To-Live 值。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-ttl",
                      "text": "ttl",
                      "type": "Integer(0..255)"
                    },
                    {
                      "default": "true",
                      "doc": "设置多播的报文是否投递到本地回环地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-loop",
                      "text": "loop",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"16KB\"",
                      "doc": "外发数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-sndbuf",
                      "text": "sndbuf",
                      "type": "String"
                    },
                    {
                      "default": "\"16KB\"",
                      "doc": "接收数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-recbuf",
                      "text": "recbuf",
                      "type": "String"
                    },
                    {
                      "default": "\"32KB\"",
                      "doc": "用户级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-mcast-S-cluster_mcast-buffer",
                      "text": "buffer",
                      "type": "String"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-mcast-S-cluster_mcast",
                  "text": "cluster_mcast"
                }
              ],
              "text": "mcast",
              "type": "Struct(cluster_mcast)"
            },
            {
              "hash": "V-cluster-S-cluster-dns",
              "refs": [
                {
                  "doc": "DNS SRV 记录服务发现。",
                  "fields": [
                    {
                      "default": "\"localhost\"",
                      "doc": "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表。\n当<code>cluster.discovery_strategy</code> 为 <code>dns</code> 时有效。",
                      "hash": "V-cluster-S-cluster-dns-S-cluster_dns-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "default": "a",
                      "doc": "DNS 记录类型。",
                      "hash": "V-cluster-S-cluster-dns-S-cluster_dns-record_type",
                      "text": "record_type",
                      "type": "Enum(a,srv)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-dns-S-cluster_dns",
                  "text": "cluster_dns"
                }
              ],
              "text": "dns",
              "type": "Struct(cluster_dns)"
            },
            {
              "hash": "V-cluster-S-cluster-etcd",
              "refs": [
                {
                  "doc": "使用 'etcd' 服务的服务发现。",
                  "fields": [
                    {
                      "doc": "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "\"emqxcl\"",
                      "doc": "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <br/>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-prefix",
                      "text": "prefix",
                      "type": "String"
                    },
                    {
                      "default": "\"1m\"",
                      "doc": "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-node_ttl",
                      "text": "node_ttl",
                      "type": "String"
                    },
                    {
                      "doc": "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-cluster-S-cluster-etcd-S-cluster_etcd-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-etcd-S-cluster_etcd",
                  "text": "cluster_etcd"
                }
              ],
              "text": "etcd",
              "type": "Struct(cluster_etcd)"
            },
            {
              "hash": "V-cluster-S-cluster-k8s",
              "refs": [
                {
                  "doc": "Kubernetes 服务发现。",
                  "fields": [
                    {
                      "default": "\"http://10.110.111.204:8080\"",
                      "doc": "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-apiserver",
                      "text": "apiserver",
                      "type": "String"
                    },
                    {
                      "default": "\"emqx\"",
                      "doc": "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-service_name",
                      "text": "service_name",
                      "type": "String"
                    },
                    {
                      "default": "ip",
                      "doc": "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 <code>cluster.k8s.address_type</code> 为 <code>ip</code>，则将从 Kubernetes 接口中获取集群中其他节点\n的IP地址。",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-address_type",
                      "text": "address_type",
                      "type": "Enum(ip,dns,hostname)"
                    },
                    {
                      "default": "\"default\"",
                      "doc": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-namespace",
                      "text": "namespace",
                      "type": "String"
                    },
                    {
                      "default": "\"pod.local\"",
                      "doc": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。",
                      "hash": "V-cluster-S-cluster-k8s-S-cluster_k8s-suffix",
                      "text": "suffix",
                      "type": "String"
                    }
                  ],
                  "hash": "T-cluster-S-cluster-k8s-S-cluster_k8s",
                  "text": "cluster_k8s"
                }
              ],
              "text": "k8s",
              "type": "Struct(cluster_k8s)"
            }
          ],
          "hash": "T-cluster-S-cluster",
          "text": "cluster"
        }
      ],
      "text": "cluster",
      "type": "Struct(cluster)"
    },
    {
      "hash": "V-log",
      "refs": [
        {
          "doc": "EMQX 支持同时多个日志输出，一个控制台输出，和多个文件输出。\n默认情况下，EMQX 运行在容器中，或者在 'console' 或 'foreground' 模式下运行时，会输出到 控制台，否则输出到文件。",
          "fields": [
            {
              "hash": "V-log-S-log-console_handler",
              "refs": [
                {
                  "doc": "日志处理进程将日志事件打印到 EMQX 控制台。",
                  "fields": [
                    {
                      "default": "false",
                      "doc": "启用此日志处理进程。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "warning",
                      "doc": "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-level",
                      "text": "level",
                      "type": "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)"
                    },
                    {
                      "default": "\"system\"",
                      "doc": "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-time_offset",
                      "text": "time_offset",
                      "type": "String"
                    },
                    {
                      "default": "unlimited",
                      "doc": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-chars_limit",
                      "text": "chars_limit",
                      "type": "OneOf(String(\"unlimited\"),Integer(100..inf))"
                    },
                    {
                      "default": "text",
                      "doc": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-formatter",
                      "text": "formatter",
                      "type": "Enum(text,json)"
                    },
                    {
                      "default": "true",
                      "doc": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-single_line",
                      "text": "single_line",
                      "type": "Boolean"
                    },
                    {
                      "default": "100",
                      "doc": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-sync_mode_qlen",
                      "text": "sync_mode_qlen",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "3000",
                      "doc": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen </code> 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-drop_mode_qlen",
                      "text": "drop_mode_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "8000",
                      "doc": "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-flush_qlen",
                      "text": "flush_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill",
                      "refs": [
                        {
                          "doc": "日志过载终止，具有过载保护功能。当日志处理进程使用过多内存，或者缓存的日志消息过多时该功能被激活。<br/>\n检测到过载时，日志处理进程将终止，并在冷却期后重新启动。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "日志处理进程过载时为保护自己节点其它的业务能正常，强制杀死日志处理进程。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"30MB\"",
                              "doc": "日志处理进程允许使用的最大内存。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-mem_size",
                              "text": "mem_size",
                              "type": "String"
                            },
                            {
                              "default": "20000",
                              "doc": "允许的最大队列长度。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-qlen",
                              "text": "qlen",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "处理进程停止后，会在该延迟时间后自动重新启动。除非该值设置为 <code>infinity</code>，这会阻止任何后续的重启。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill-restart_after",
                              "text": "restart_after",
                              "type": "OneOf(String,String(\"infinity\"))"
                            }
                          ],
                          "hash": "T-log-S-log-console_handler-S-console_handler-overload_kill-S-log_overload_kill",
                          "text": "log_overload_kill"
                        }
                      ],
                      "text": "overload_kill",
                      "type": "Struct(log_overload_kill)"
                    },
                    {
                      "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit",
                      "refs": [
                        {
                          "doc": "短时间内产生的大量日志事件可能会导致问题，例如：\n  - 日志文件变得非常大\n  - 日志文件轮换过快，有用信息被覆盖\n  - 对系统的整体性能影响\n\n日志突发限制功能可以暂时禁用日志记录以避免这些问题。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "启用日志限流保护机制。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10000",
                              "doc": "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-max_count",
                              "text": "max_count",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"1s\"",
                              "doc": "参考 <code>max_count</code>。",
                              "hash": "V-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit-window_time",
                              "text": "window_time",
                              "type": "String"
                            }
                          ],
                          "hash": "T-log-S-log-console_handler-S-console_handler-burst_limit-S-log_burst_limit",
                          "text": "log_burst_limit"
                        }
                      ],
                      "text": "burst_limit",
                      "type": "Struct(log_burst_limit)"
                    },
                    {
                      "default": "error",
                      "doc": "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - <code>error</code>：仅记录 Erlang 进程中的错误。\n  - <code>progress</code>：除了 error 信息外，还需要记录进程启动的详细信息。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-supervisor_reports",
                      "text": "supervisor_reports",
                      "type": "Enum(error,progress)"
                    },
                    {
                      "default": "100",
                      "doc": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                      "hash": "V-log-S-log-console_handler-S-console_handler-max_depth",
                      "text": "max_depth",
                      "type": "OneOf(String(\"unlimited\"),Integer(0..+inf))"
                    }
                  ],
                  "hash": "T-log-S-log-console_handler-S-console_handler",
                  "text": "console_handler"
                }
              ],
              "text": "console_handler",
              "type": "Struct(console_handler)"
            },
            {
              "default": "{\n  default {level = \"warning\"}\n}\n",
              "doc": "输出到文件的日志处理进程列表",
              "hash": "V-log-S-log-file_handlers",
              "refs": [
                {
                  "doc": "日志处理进程将日志事件打印到文件。",
                  "fields": [
                    {
                      "default": "\"${EMQX_LOG_DIR}/emqx.log\"",
                      "doc": "日志文件路径及名字。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-file",
                      "text": "file",
                      "type": "String"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation",
                      "refs": [
                        {
                          "doc": "默认情况下，日志存储在 `./log` 目录（用于从 zip 文件安装）或 `/var/log/emqx`（用于二进制安装）。<br/>\n这部分配置，控制每个日志处理进程保留的文件数量。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "启用日志轮换功能。启动后生成日志文件后缀会加上对应的索引数字，比如：log/emqx.log.1。\n系统会默认生成<code>*.siz/*.idx</code>用于记录日志位置，请不要手动修改这两个文件。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "轮换的最大日志文件数。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation-count",
                              "text": "count",
                              "type": "Integer(1..2048)"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-rotation-S-log_rotation",
                          "text": "log_rotation"
                        }
                      ],
                      "text": "rotation",
                      "type": "Struct(log_rotation)"
                    },
                    {
                      "default": "\"50MB\"",
                      "doc": "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count配合使用。如果 counter 为 10，则是10个文件轮换。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-max_size",
                      "text": "max_size",
                      "type": "OneOf(String(\"infinity\"),String)"
                    },
                    {
                      "default": "true",
                      "doc": "启用此日志处理进程。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "warning",
                      "doc": "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-level",
                      "text": "level",
                      "type": "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)"
                    },
                    {
                      "default": "\"system\"",
                      "doc": "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-time_offset",
                      "text": "time_offset",
                      "type": "String"
                    },
                    {
                      "default": "unlimited",
                      "doc": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-chars_limit",
                      "text": "chars_limit",
                      "type": "OneOf(String(\"unlimited\"),Integer(100..inf))"
                    },
                    {
                      "default": "text",
                      "doc": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-formatter",
                      "text": "formatter",
                      "type": "Enum(text,json)"
                    },
                    {
                      "default": "true",
                      "doc": "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-single_line",
                      "text": "single_line",
                      "type": "Boolean"
                    },
                    {
                      "default": "100",
                      "doc": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-sync_mode_qlen",
                      "text": "sync_mode_qlen",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "3000",
                      "doc": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：<code> sync_mode_qlen =< drop_mode_qlen =< flush_qlen </code> 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-drop_mode_qlen",
                      "text": "drop_mode_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "8000",
                      "doc": "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-flush_qlen",
                      "text": "flush_qlen",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill",
                      "refs": [
                        {
                          "doc": "日志过载终止，具有过载保护功能。当日志处理进程使用过多内存，或者缓存的日志消息过多时该功能被激活。<br/>\n检测到过载时，日志处理进程将终止，并在冷却期后重新启动。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "日志处理进程过载时为保护自己节点其它的业务能正常，强制杀死日志处理进程。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"30MB\"",
                              "doc": "日志处理进程允许使用的最大内存。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-mem_size",
                              "text": "mem_size",
                              "type": "String"
                            },
                            {
                              "default": "20000",
                              "doc": "允许的最大队列长度。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-qlen",
                              "text": "qlen",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "处理进程停止后，会在该延迟时间后自动重新启动。除非该值设置为 <code>infinity</code>，这会阻止任何后续的重启。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill-restart_after",
                              "text": "restart_after",
                              "type": "OneOf(String,String(\"infinity\"))"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-overload_kill-S-log_overload_kill",
                          "text": "log_overload_kill"
                        }
                      ],
                      "text": "overload_kill",
                      "type": "Struct(log_overload_kill)"
                    },
                    {
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit",
                      "refs": [
                        {
                          "doc": "短时间内产生的大量日志事件可能会导致问题，例如：\n  - 日志文件变得非常大\n  - 日志文件轮换过快，有用信息被覆盖\n  - 对系统的整体性能影响\n\n日志突发限制功能可以暂时禁用日志记录以避免这些问题。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "启用日志限流保护机制。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "10000",
                              "doc": "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-max_count",
                              "text": "max_count",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"1s\"",
                              "doc": "参考 <code>max_count</code>。",
                              "hash": "V-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit-window_time",
                              "text": "window_time",
                              "type": "String"
                            }
                          ],
                          "hash": "T-log-S-log-file_handlers-S-log_file_handler-burst_limit-S-log_burst_limit",
                          "text": "log_burst_limit"
                        }
                      ],
                      "text": "burst_limit",
                      "type": "Struct(log_burst_limit)"
                    },
                    {
                      "default": "error",
                      "doc": "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - <code>error</code>：仅记录 Erlang 进程中的错误。\n  - <code>progress</code>：除了 error 信息外，还需要记录进程启动的详细信息。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-supervisor_reports",
                      "text": "supervisor_reports",
                      "type": "Enum(error,progress)"
                    },
                    {
                      "default": "100",
                      "doc": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                      "hash": "V-log-S-log-file_handlers-S-log_file_handler-max_depth",
                      "text": "max_depth",
                      "type": "OneOf(String(\"unlimited\"),Integer(0..+inf))"
                    }
                  ],
                  "hash": "T-log-S-log-file_handlers-S-log_file_handler",
                  "text": "log_file_handler"
                }
              ],
              "text": "file_handlers",
              "type": "Map($name->Struct(log_file_handler))"
            }
          ],
          "hash": "T-log-S-log",
          "text": "log"
        }
      ],
      "text": "log",
      "type": "Struct(log)"
    },
    {
      "hash": "V-rpc",
      "refs": [
        {
          "doc": "EMQX 使用 <code>gen_rpc</code> 库来实现跨节点通信。<br/>\n大多数情况下，默认的配置应该可以工作，但如果你需要做一些性能优化或者实验，可以尝试调整这些参数。",
          "fields": [
            {
              "default": "async",
              "doc": "在 <code>sync</code> 模式下，发送端等待接收端的 ack信号。",
              "hash": "V-rpc-S-rpc-mode",
              "text": "mode",
              "type": "Enum(sync,async)"
            },
            {
              "default": "tcp",
              "doc": "集群间通信使用的传输协议。",
              "hash": "V-rpc-S-rpc-driver",
              "text": "driver",
              "type": "Enum(tcp,ssl)"
            },
            {
              "default": "256",
              "doc": "异步模式下，发送的批量消息的最大数量。",
              "hash": "V-rpc-S-rpc-async_batch_size",
              "text": "async_batch_size",
              "type": "Integer"
            },
            {
              "default": "stateless",
              "doc": "<code>manual</code>: 通过 <code>tcp_server_port</code> 来发现端口。\n<br/><code>stateless</code>: 使用无状态的方式来发现端口，使用如下算法。如果节点名称是 <code>\nemqxN@127.0.0.1</code>, N 是一个数字，那么监听端口就是 5370 + N。",
              "hash": "V-rpc-S-rpc-port_discovery",
              "text": "port_discovery",
              "type": "Enum(manual,stateless)"
            },
            {
              "default": "5369",
              "doc": "RPC 本地服务使用的 TCP 端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 时，此配置才会生效。",
              "hash": "V-rpc-S-rpc-tcp_server_port",
              "text": "tcp_server_port",
              "type": "Integer"
            },
            {
              "default": "5369",
              "doc": "RPC 本地服务使用的监听SSL端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 且 <code> dirver </code> 设置为 <code>ssl</code>，\n此配置才会生效。",
              "hash": "V-rpc-S-rpc-ssl_server_port",
              "text": "ssl_server_port",
              "type": "Integer"
            },
            {
              "default": "10",
              "doc": "设置本节点与远程节点之间的 RPC 通信通道的最大数量。",
              "hash": "V-rpc-S-rpc-tcp_client_num",
              "text": "tcp_client_num",
              "type": "Integer(1..256)"
            },
            {
              "default": "\"5s\"",
              "doc": "建立 RPC 连接的超时时间。",
              "hash": "V-rpc-S-rpc-connect_timeout",
              "text": "connect_timeout",
              "type": "String"
            },
            {
              "doc": "TLS 证书文件的路径，用于验证集群节点的身份。\n只有当 <code>rpc.driver</code> 设置为 <code>ssl</code> 时，此配置才会生效。",
              "hash": "V-rpc-S-rpc-certfile",
              "text": "certfile",
              "type": "String"
            },
            {
              "doc": "<code>rpc.certfile</code> 的私钥文件的路径。<br/>\n注意：此文件内容是私钥，所以需要设置权限为 600。",
              "hash": "V-rpc-S-rpc-keyfile",
              "text": "keyfile",
              "type": "String"
            },
            {
              "doc": "验证 <code>rpc.certfile</code> 的 CA 证书文件的路径。<br/>\n注意：集群中所有节点的证书必须使用同一个 CA 签发。",
              "hash": "V-rpc-S-rpc-cacertfile",
              "text": "cacertfile",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "发送 RPC 请求的超时时间。",
              "hash": "V-rpc-S-rpc-send_timeout",
              "text": "send_timeout",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "远程节点认证的超时时间。",
              "hash": "V-rpc-S-rpc-authentication_timeout",
              "text": "authentication_timeout",
              "type": "String"
            },
            {
              "default": "\"15s\"",
              "doc": "同步 RPC 的回复超时时间。",
              "hash": "V-rpc-S-rpc-call_receive_timeout",
              "text": "call_receive_timeout",
              "type": "String"
            },
            {
              "default": "\"15m\"",
              "doc": "broker 之间的连接在最后一条消息发送后保持打开的时间。",
              "hash": "V-rpc-S-rpc-socket_keepalive_idle",
              "text": "socket_keepalive_idle",
              "type": "String"
            },
            {
              "default": "\"75s\"",
              "doc": "keepalive 消息的间隔。",
              "hash": "V-rpc-S-rpc-socket_keepalive_interval",
              "text": "socket_keepalive_interval",
              "type": "String"
            },
            {
              "default": "9",
              "doc": "keepalive 探测消息发送失败的次数，直到 RPC 连接被认为已经断开。",
              "hash": "V-rpc-S-rpc-socket_keepalive_count",
              "text": "socket_keepalive_count",
              "type": "Integer"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP 调节参数。TCP 发送缓冲区大小。",
              "hash": "V-rpc-S-rpc-socket_sndbuf",
              "text": "socket_sndbuf",
              "type": "String"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP 调节参数。TCP 接收缓冲区大小。",
              "hash": "V-rpc-S-rpc-socket_recbuf",
              "text": "socket_recbuf",
              "type": "String"
            },
            {
              "default": "\"1MB\"",
              "doc": "TCP 调节参数。用户模式套接字缓冲区大小。",
              "hash": "V-rpc-S-rpc-socket_buffer",
              "text": "socket_buffer",
              "type": "String"
            },
            {
              "default": "true",
              "doc": "兼容旧的无鉴权模式",
              "hash": "V-rpc-S-rpc-insecure_fallback",
              "text": "insecure_fallback",
              "type": "Boolean"
            }
          ],
          "hash": "T-rpc-S-rpc",
          "text": "rpc"
        }
      ],
      "text": "rpc",
      "type": "Struct(rpc)"
    },
    {
      "doc": "Broker 相关配置项。",
      "hash": "V-broker",
      "refs": [
        {
          "doc": "Message broker options.",
          "fields": [
            {
              "default": "true",
              "doc": "是否启用 Session Registry",
              "hash": "V-broker-S-broker-enable_session_registry",
              "text": "enable_session_registry",
              "type": "Boolean"
            },
            {
              "default": "quorum",
              "doc": "Session 在集群中的锁策略。\n  - `loca`：仅锁本节点的 Session；\n  - `one`：任选一个其它节点加锁；\n  - `quorum`：选择集群中半数以上的节点加锁；\n  - `all`：选择所有节点加锁。",
              "hash": "V-broker-S-broker-session_locking_strategy",
              "text": "session_locking_strategy",
              "type": "Enum(local,leader,quorum,all)"
            },
            {
              "default": "round_robin",
              "doc": "共享订阅消息派发策略。\n  - `random`：随机挑选一个共享订阅者派发；\n  - `round_robin`：使用 round-robin 策略派发；\n  - `round_robin_per_group`：在共享组内循环选择下一个成员；\n  - `local`：选择随机的本地成员，否则选择随机的集群范围内成员;\n  - `sticky`：总是使用上次选中的订阅者派发，直到它断开连接；\n  - `hash_clientid`：通过对发送者的客户端 ID 进行 Hash 处理来选择订阅者;\n  - `hash_topic`：通过对源主题进行 Hash 处理来选择订阅者。",
              "hash": "V-broker-S-broker-shared_subscription_strategy",
              "text": "shared_subscription_strategy",
              "type": "Enum(random,round_robin,round_robin_per_group,sticky,local,hash_topic,hash_clientid)"
            },
            {
              "default": "false",
              "doc": "该配置项已废弃，会在 5.1 中移除。\n启用/禁用 QoS 1 和 QoS 2 消息的共享派发确认。\n开启后，允许将消息从未及时回复 ACK 的订阅者 （例如，客户端离线） 重新派发给另外一个订阅者。",
              "hash": "V-broker-S-broker-shared_dispatch_ack_enabled",
              "text": "shared_dispatch_ack_enabled",
              "type": "Boolean"
            },
            {
              "default": "true",
              "doc": "是否开启批量清除路由。",
              "hash": "V-broker-S-broker-route_batch_clean",
              "text": "route_batch_clean",
              "type": "Boolean"
            }
          ],
          "hash": "T-broker-S-broker",
          "text": "broker"
        }
      ],
      "text": "broker",
      "type": "Struct(broker)"
    },
    {
      "doc": "系统主题配置。",
      "hash": "V-sys_topics",
      "refs": [
        {
          "doc": "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
          "fields": [
            {
              "default": "\"1m\"",
              "doc": "发送 `$SYS` 主题的间隔时间。",
              "hash": "V-sys_topics-S-sys_topics-sys_msg_interval",
              "text": "sys_msg_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "default": "\"30s\"",
              "doc": "发送心跳系统消息的间隔时间，它包括：\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
              "hash": "V-sys_topics-S-sys_topics-sys_heartbeat_interval",
              "text": "sys_heartbeat_interval",
              "type": "OneOf(String(\"disabled\"),String)"
            },
            {
              "doc": "客户端事件消息。",
              "hash": "V-sys_topics-S-sys_topics-sys_event_messages",
              "refs": [
                {
                  "doc": "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "是否开启客户端已连接事件消息。",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_connected",
                      "text": "client_connected",
                      "type": "Boolean"
                    },
                    {
                      "default": "true",
                      "doc": "是否开启客户端已断开连接事件消息。",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_disconnected",
                      "text": "client_disconnected",
                      "type": "Boolean"
                    },
                    {
                      "default": "false",
                      "doc": "是否开启客户端已成功订阅主题事件消息。",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_subscribed",
                      "text": "client_subscribed",
                      "type": "Boolean"
                    },
                    {
                      "default": "false",
                      "doc": "是否开启客户端已成功取消订阅主题事件消息。",
                      "hash": "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_unsubscribed",
                      "text": "client_unsubscribed",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-sys_topics-S-sys_topics-sys_event_messages-S-event_names",
                  "text": "event_names"
                }
              ],
              "text": "sys_event_messages",
              "type": "Struct(event_names)"
            }
          ],
          "hash": "T-sys_topics-S-sys_topics",
          "text": "sys_topics"
        }
      ],
      "text": "sys_topics",
      "type": "Struct(sys_topics)"
    },
    {
      "hash": "V-force_shutdown",
      "refs": [
        {
          "doc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
          "fields": [
            {
              "default": "true",
              "doc": "启用 `force_shutdown` 功能。",
              "hash": "V-force_shutdown-S-force_shutdown-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "1000",
              "doc": "消息队列的最大长度。",
              "hash": "V-force_shutdown-S-force_shutdown-max_message_queue_len",
              "text": "max_message_queue_len",
              "type": "Integer(0..inf)"
            },
            {
              "default": "\"32MB\"",
              "doc": "Heap 的总大小。",
              "hash": "V-force_shutdown-S-force_shutdown-max_heap_size",
              "text": "max_heap_size",
              "type": "String"
            }
          ],
          "hash": "T-force_shutdown-S-force_shutdown",
          "text": "force_shutdown"
        }
      ],
      "text": "force_shutdown",
      "type": "Struct(force_shutdown)"
    },
    {
      "hash": "V-force_gc",
      "refs": [
        {
          "doc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
          "fields": [
            {
              "default": "true",
              "doc": "启用强制垃圾回收。",
              "hash": "V-force_gc-S-force_gc-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "16000",
              "doc": "在进程收到多少消息之后，对此进程执行垃圾回收。",
              "hash": "V-force_gc-S-force_gc-count",
              "text": "count",
              "type": "Integer(0..inf)"
            },
            {
              "default": "\"16MB\"",
              "doc": "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
              "hash": "V-force_gc-S-force_gc-bytes",
              "text": "bytes",
              "type": "String"
            }
          ],
          "hash": "T-force_gc-S-force_gc",
          "text": "force_gc"
        }
      ],
      "text": "force_gc",
      "type": "Struct(force_gc)"
    },
    {
      "hash": "V-sysmon",
      "refs": [
        {
          "doc": "Features related to system monitoring and introspection.",
          "fields": [
            {
              "hash": "V-sysmon-S-sysmon-vm",
              "refs": [
                {
                  "doc": "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
                  "fields": [
                    {
                      "default": "\"30s\"",
                      "doc": "定期进程限制检查的时间间隔。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_check_interval",
                      "text": "process_check_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"80%\"",
                      "doc": "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_high_watermark",
                      "text": "process_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60%\"",
                      "doc": "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_low_watermark",
                      "text": "process_low_watermark",
                      "type": "String"
                    },
                    {
                      "default": "disabled",
                      "doc": "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 <code>long_gc</code> 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_gc</code> 的 MQTT 系统消息。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_gc",
                      "text": "long_gc",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"240ms\"",
                      "doc": "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_schedule</code> 的 MQTT 系统消息。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_schedule",
                      "text": "long_schedule",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"32MB\"",
                      "doc": "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 <code>large_heap</code> 关键字的\nwarning 级别日志。同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-large_heap",
                      "text": "large_heap",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "true",
                      "doc": "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 <code>busy_dist_port</code> 关键字的 warning 级别日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_dist_port",
                      "text": "busy_dist_port",
                      "type": "Boolean"
                    },
                    {
                      "default": "true",
                      "doc": "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 <code>busy_port</code> 关键字的 warning 级别的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_port</code> 的 MQTT 系统消息。",
                      "hash": "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_port",
                      "text": "busy_port",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-sysmon-S-sysmon-vm-S-sysmon_vm",
                  "text": "sysmon_vm"
                }
              ],
              "text": "vm",
              "type": "Struct(sysmon_vm)"
            },
            {
              "hash": "V-sysmon-S-sysmon-os",
              "refs": [
                {
                  "doc": "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
                  "fields": [
                    {
                      "default": "\"60s\"",
                      "doc": "定期 CPU 检查的时间间隔。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_check_interval",
                      "text": "cpu_check_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"80%\"",
                      "doc": "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_high_watermark",
                      "text": "cpu_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60%\"",
                      "doc": "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_low_watermark",
                      "text": "cpu_low_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"60s\"",
                      "doc": "定期内存检查的时间间隔。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-mem_check_interval",
                      "text": "mem_check_interval",
                      "type": "OneOf(String(\"disabled\"),String)"
                    },
                    {
                      "default": "\"70%\"",
                      "doc": "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-sysmem_high_watermark",
                      "text": "sysmem_high_watermark",
                      "type": "String"
                    },
                    {
                      "default": "\"5%\"",
                      "doc": "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                      "hash": "V-sysmon-S-sysmon-os-S-sysmon_os-procmem_high_watermark",
                      "text": "procmem_high_watermark",
                      "type": "String"
                    }
                  ],
                  "hash": "T-sysmon-S-sysmon-os-S-sysmon_os",
                  "text": "sysmon_os"
                }
              ],
              "text": "os",
              "type": "Struct(sysmon_os)"
            }
          ],
          "hash": "T-sysmon-S-sysmon",
          "text": "sysmon"
        }
      ],
      "text": "sysmon",
      "type": "Struct(sysmon)"
    },
    {
      "hash": "V-alarm",
      "refs": [
        {
          "doc": "Settings for the alarms.",
          "fields": [
            {
              "default": "[log, publish]",
              "doc": "警报激活时触发的动作。<br/>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.\n<code>log</code> 将告警写入日志 (控制台或者文件).\n<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
              "hash": "V-alarm-S-alarm-actions",
              "text": "actions",
              "type": "Array(String)"
            },
            {
              "default": "1000",
              "doc": "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
              "hash": "V-alarm-S-alarm-size_limit",
              "text": "size_limit",
              "type": "Integer(1..3000)"
            },
            {
              "default": "\"24h\"",
              "doc": "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
              "hash": "V-alarm-S-alarm-validity_period",
              "text": "validity_period",
              "type": "String"
            }
          ],
          "hash": "T-alarm-S-alarm",
          "text": "alarm"
        }
      ],
      "text": "alarm",
      "type": "Struct(alarm)"
    },
    {
      "hash": "V-bridges",
      "refs": [
        {
          "doc": "MQTT Bridge 配置",
          "fields": [
            {
              "doc": "转发消息到 HTTP 服务器的 WebHook",
              "hash": "V-bridges-S-bridges-webhook",
              "refs": [
                {
                  "doc": "HTTP Bridge 配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-webhook-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "连接HTTP服务器的超时时间。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since 5.0.4.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "random",
                      "doc": "连接池的类型，可用类型有`random`, `hash`。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-pool_type",
                      "text": "pool_type",
                      "type": "Enum(random,hash)"
                    },
                    {
                      "default": "8",
                      "doc": "连接池大小。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "100",
                      "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-enable_pipelining",
                      "text": "enable_pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "设置 HTTP 请求的参数。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-request",
                      "refs": [
                        {
                          "doc": "",
                          "fields": [
                            {
                              "doc": "HTTP 请求方法。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-method",
                              "text": "method",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求路径。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-path",
                              "text": "path",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP请求报文主体。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-body",
                              "text": "body",
                              "type": "String"
                            },
                            {
                              "doc": "HTTP 头字段列表。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-headers",
                              "text": "headers",
                              "type": "Map"
                            },
                            {
                              "doc": "请求出错时的最大重试次数。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-max_retries",
                              "text": "max_retries",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "HTTP 请求超时。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-request-S-request-request_timeout",
                              "text": "request_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-request-S-request",
                          "text": "request"
                        }
                      ],
                      "text": "request",
                      "type": "Struct(request)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-webhook-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "HTTP Bridge 的 URL。<br/>\n路径中允许使用带变量的模板，但是 host， port 不允许使用变量模板。<br/>\n例如，<code> http://localhost:9901/${topic} </code> 是允许的，\n但是<code> http://${host}:9901/message </code>\n或 <code> http://localhost:${port}/message </code>\n不允许。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since 5.0.12.",
                      "hash": "V-bridges-S-bridges-webhook-S-config-direction",
                      "text": "direction",
                      "type": "String(\"egress\")"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 HTTP 服务器。 <br/>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 HTTP 服务器。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "post",
                      "doc": "HTTP 请求的方法。 所有可用的方法包括：post、put、get、delete。<br/>\n允许使用带有变量的模板。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-method",
                      "text": "method",
                      "type": "Enum(post,put,get,delete)"
                    },
                    {
                      "default": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=5\"\n}\n",
                      "doc": "HTTP 请求的标头。<br/>\n允许使用带有变量的模板。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-headers",
                      "text": "headers",
                      "type": "Map"
                    },
                    {
                      "doc": "HTTP 请求的正文。<br/>\n如果没有设置该字段，请求正文将是包含所有可用字段的 JSON object。<br/>\n如果该 webhook 是由于收到 MQTT 消息触发的，'所有可用字段' 将是 MQTT 消息的\n上下文信息；如果该 webhook 是由于规则触发的，'所有可用字段' 则为触发事件的上下文信息。<br/>\n允许使用带有变量的模板。",
                      "hash": "V-bridges-S-bridges-webhook-S-config-body",
                      "text": "body",
                      "type": "String"
                    },
                    {
                      "default": "2",
                      "doc": "HTTP 请求失败最大重试次数",
                      "hash": "V-bridges-S-bridges-webhook-S-config-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "HTTP 请求超时",
                      "hash": "V-bridges-S-bridges-webhook-S-config-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-webhook-S-config",
                  "text": "config"
                }
              ],
              "text": "webhook",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "桥接到另一个 MQTT Broker 的 MQTT Bridge",
              "hash": "V-bridges-S-bridges-mqtt",
              "refs": [
                {
                  "doc": "MQTT Bridge 的配置。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "cluster_shareload",
                      "doc": "MQTT 桥的模式。 <br/>\n- cluster_shareload：在 emqx 集群的每个节点上创建一个 MQTT 连接。<br/>\n在“cluster_shareload”模式下，来自远程代理的传入负载通过共享订阅的方式接收。<br/>\n请注意，<code>clientid</code> 以节点名称为后缀，这是为了避免不同节点之间的 <code> clientid</code> 冲突。\n而且对于入口连接的 <code>remote.topic</code>，我们只能使用共享订阅主题过滤器。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-mode",
                      "text": "mode",
                      "type": "Enum(cluster_shareload)"
                    },
                    {
                      "doc": "远程 MQTT Broker的主机和端口。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "可选的前缀，用于在出口网桥使用的clientid前加上前缀。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-clientid_prefix",
                      "text": "clientid_prefix",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.16.",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-reconnect_interval",
                      "text": "reconnect_interval",
                      "type": "String"
                    },
                    {
                      "default": "v4",
                      "doc": "MQTT 协议版本",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-proto_ver",
                      "text": "proto_ver",
                      "type": "Enum(v3,v4,v5)"
                    },
                    {
                      "default": "false",
                      "doc": "是否启用 Bridge Mode。\n注意：此设置只针对 MQTT 协议版本 < 5.0 有效，并且需要远程 MQTT Broker 支持 Bridge Mode。\n如果设置为 true ，桥接会告诉远端服务器当前连接是一个桥接而不是一个普通的客户端。\n这意味着消息回环检测会更加高效，并且远端服务器收到的保留消息的标志位会透传给本地。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-bridge_mode",
                      "text": "bridge_mode",
                      "type": "Boolean"
                    },
                    {
                      "doc": "MQTT 协议的用户名",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "MQTT 协议的密码",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "与 ingress MQTT 桥的远程服务器重连时是否清除老的 MQTT 会话。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-clean_start",
                      "text": "clean_start",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"300s\"",
                      "doc": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-keepalive",
                      "text": "keepalive",
                      "type": "String"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-retry_interval",
                      "text": "retry_interval",
                      "type": "String"
                    },
                    {
                      "default": "32",
                      "doc": "MQTT 协议的最大飞行（已发送但未确认）消息",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-max_inflight",
                      "text": "max_inflight",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress",
                      "refs": [
                        {
                          "doc": "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。",
                          "fields": [
                            {
                              "doc": "订阅远程 Broker 相关的配置。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote",
                              "refs": [
                                {
                                  "doc": "订阅远程 Broker 相关的配置。",
                                  "fields": [
                                    {
                                      "doc": "从远程broker的哪个topic接收消息",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "1",
                                      "doc": "订阅远程borker时要使用的 QoS 级别",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote-qos",
                                      "text": "qos",
                                      "type": "Integer(0..2)"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-remote-S-ingress_remote",
                                  "text": "ingress_remote"
                                }
                              ],
                              "text": "remote",
                              "type": "Struct(ingress_remote)"
                            },
                            {
                              "doc": "发送消息到本地 Broker 相关的配置。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local",
                              "refs": [
                                {
                                  "doc": "发送消息到本地 Broker 相关的配置。",
                                  "fields": [
                                    {
                                      "doc": "向本地broker的哪个topic发送消息。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${qos}\"",
                                      "doc": "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "\"${retain}\"",
                                      "doc": "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "doc": "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local-payload",
                                      "text": "payload",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress-local-S-ingress_local",
                                  "text": "ingress_local"
                                }
                              ],
                              "text": "local",
                              "type": "Struct(ingress_local)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-ingress-S-ingress",
                          "text": "ingress"
                        }
                      ],
                      "text": "ingress",
                      "type": "Struct(ingress)"
                    },
                    {
                      "doc": "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。",
                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress",
                      "refs": [
                        {
                          "doc": "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。",
                          "fields": [
                            {
                              "doc": "如何从本地 Broker 接收消息相关的配置。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-local",
                              "refs": [
                                {
                                  "doc": "如何从本地 Broker 接收消息相关的配置。",
                                  "fields": [
                                    {
                                      "doc": "要转发到远程broker的本地主题",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-local-S-egress_local-topic",
                                      "text": "topic",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress-local-S-egress_local",
                                  "text": "egress_local"
                                }
                              ],
                              "text": "local",
                              "type": "Struct(egress_local)"
                            },
                            {
                              "doc": "发送消息到远程 Broker 相关的配置。",
                              "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote",
                              "refs": [
                                {
                                  "doc": "发送消息到远程 Broker 相关的配置。",
                                  "fields": [
                                    {
                                      "doc": "转发到远程broker的哪个topic。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "1",
                                      "doc": "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "false",
                                      "doc": "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "doc": "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
                                      "hash": "V-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote-payload",
                                      "text": "payload",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress-remote-S-egress_remote",
                                  "text": "egress_remote"
                                }
                              ],
                              "text": "remote",
                              "type": "Struct(egress_remote)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mqtt-S-config-egress-S-egress",
                          "text": "egress"
                        }
                      ],
                      "text": "egress",
                      "type": "Struct(egress)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mqtt-S-config",
                  "text": "config"
                }
              ],
              "text": "mqtt",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "HStreamDB Bridge Config",
              "hash": "V-bridges-S-bridges-hstreamdb",
              "refs": [
                {
                  "doc": "HStreamDB 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-hstreamdb-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "egress",
                      "doc": "桥接的方向， 必须是 egress",
                      "hash": "V-bridges-S-bridges-hstreamdb-S-config-direction",
                      "text": "direction",
                      "type": "String(\"egress\")"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 HStreamDB。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 HStreamDB。",
                      "hash": "V-bridges-S-bridges-hstreamdb-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "\"${payload}\"",
                      "doc": "要转发到 HStreamDB 的数据内容，支持占位符",
                      "hash": "V-bridges-S-bridges-hstreamdb-S-config-payload",
                      "text": "payload",
                      "type": "String"
                    },
                    {
                      "doc": "连接器的通用配置。",
                      "hash": "V-bridges-S-bridges-hstreamdb-S-config-connector",
                      "refs": [
                        {
                          "doc": "HStreamDB 连接配置。",
                          "fields": [
                            {
                              "doc": "HStreamDB 服务器 URL",
                              "hash": "V-bridges-S-bridges-hstreamdb-S-config-connector-S-config-url",
                              "text": "url",
                              "type": "String"
                            },
                            {
                              "doc": "HStreamDB 流名称",
                              "hash": "V-bridges-S-bridges-hstreamdb-S-config-connector-S-config-stream",
                              "text": "stream",
                              "type": "String"
                            },
                            {
                              "doc": "HStreamDB 分区键",
                              "hash": "V-bridges-S-bridges-hstreamdb-S-config-connector-S-config-ordering_key",
                              "text": "ordering_key",
                              "type": "String"
                            },
                            {
                              "doc": "HStreamDB 连接池大小",
                              "hash": "V-bridges-S-bridges-hstreamdb-S-config-connector-S-config-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-hstreamdb-S-config-connector-S-config",
                          "text": "config"
                        }
                      ],
                      "text": "connector",
                      "type": "OneOf(String,Struct(config))"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-hstreamdb-S-config",
                  "text": "config"
                }
              ],
              "text": "hstreamdb",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "EMQX Enterprise Config",
              "hash": "V-bridges-S-bridges-gcp_pubsub",
              "refs": [
                {
                  "doc": "GCP PubSub 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-gcp_pubsub-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "连接 HTTP 服务器的超时时间。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "连接池大小。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "100",
                      "doc": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-pipelining",
                      "text": "pipelining",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "2",
                      "doc": "请求出错时的最大重试次数。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-max_retries",
                      "text": "max_retries",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "doc": "Deprecated since e5.0.1.",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"\"",
                      "doc": "用于格式化外发信息的模板。 如果未定义，将以JSON格式发送所有可用的上下文。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-payload_template",
                      "text": "payload_template",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 GCP PubSub。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 GCP PubSub。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "要发布消息的GCP PubSub主题。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-pubsub_topic",
                      "text": "pubsub_topic",
                      "type": "String"
                    },
                    {
                      "doc": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。\n当创建GCP服务账户时（如https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。",
                      "hash": "V-bridges-S-bridges-gcp_pubsub-S-config-service_account_json",
                      "text": "service_account_json",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-gcp_pubsub-S-config",
                  "text": "config"
                }
              ],
              "text": "gcp_pubsub",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "MySQL Bridge Config",
              "hash": "V-bridges-S-bridges-mysql",
              "refs": [
                {
                  "doc": "HStreamDB 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-mysql-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-mysql-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 MySQL。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mysql-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"root\"",
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-mysql-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-mysql-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mysql-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mysql-S-config",
                  "text": "config"
                }
              ],
              "text": "mysql",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "TDengine Bridge Config",
              "hash": "V-bridges-S-bridges-tdengine",
              "refs": [
                {
                  "doc": "TDengine 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, ${id}, ${topic}, ${qos}, ${payload}, ${timestamp})\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 TDengine。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-tdengine-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 TDengine 默认端口 6041。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"root\"",
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-tdengine-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-tdengine-S-config",
                  "text": "config"
                }
              ],
              "text": "tdengine",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Dynamo Bridge Config",
              "hash": "V-bridges-S-bridges-dynamo",
              "refs": [
                {
                  "doc": "DynamoDB 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"\"",
                      "doc": "模板, 默认为空，为空时将会将整个消息存入数据库",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-template",
                      "text": "template",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 DynamoDB。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-dynamo-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "DynamoDB 的地址。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "doc": "DynamoDB 的表。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-table",
                      "text": "table",
                      "type": "String"
                    },
                    {
                      "doc": "DynamoDB 的访问 ID。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-aws_access_key_id",
                      "text": "aws_access_key_id",
                      "type": "String"
                    },
                    {
                      "doc": "DynamoDB 的访问密钥。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-aws_secret_access_key",
                      "text": "aws_secret_access_key",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-dynamo-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-dynamo-S-config",
                  "text": "config"
                }
              ],
              "text": "dynamo",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "RocketMQ Bridge Config",
              "hash": "V-bridges-S-bridges-rocketmq",
              "refs": [
                {
                  "doc": "RocketMQ 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"\"",
                      "doc": "模板, 默认为空，为空时将会将整个消息转发给 RocketMQ。 <br>\n            模板可以是任意带有占位符的合法字符串, 例如:<br>\n            - ${id}, ${username}, ${clientid}, ${timestamp}<br>\n            - {\"id\" : ${id}, \"username\" : ${username}}",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-template",
                      "text": "template",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 RocketMQ。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-rocketmq-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 RocketMQ 默认端口 9876。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "\"TopicTest\"",
                      "doc": "RocketMQ 主题",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-topic",
                      "text": "topic",
                      "type": "String"
                    },
                    {
                      "default": "\"\"",
                      "doc": "RocketMQ 服务器的 `accessKey`。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-access_key",
                      "text": "access_key",
                      "type": "String"
                    },
                    {
                      "default": "\"\"",
                      "doc": "RocketMQ 服务器的 `secretKey`。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-secret_key",
                      "text": "secret_key",
                      "type": "String"
                    },
                    {
                      "default": "\"\"",
                      "doc": "RocketMQ 服务器安全令牌",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-security_token",
                      "text": "security_token",
                      "type": "String"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "RocketMQ 驱动同步调用的超时时间。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-sync_timeout",
                      "text": "sync_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "RocketMQ 主题路由更新间隔。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-refresh_interval",
                      "text": "refresh_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"1024KB\"",
                      "doc": "RocketMQ 驱动的套字节发送消息的缓冲区大小",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-send_buffer",
                      "text": "send_buffer",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-rocketmq-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-rocketmq-S-config",
                  "text": "config"
                }
              ],
              "text": "rocketmq",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Cassandra Bridge Config",
              "hash": "V-bridges-S-bridges-cassandra",
              "refs": [
                {
                  "doc": "Cassandra 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into mqtt_msg(topic, msgid, sender, qos, payload, arrived, retain) values (${topic}, ${id}, ${clientid}, ${qos}, ${payload}, ${timestamp}, ${flags.retain})\"",
                      "doc": "CQL 模板",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-cql",
                      "text": "cql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Cassandra。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-cassandra-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "doc": "要连接到的 Keyspace 名称。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-keyspace",
                      "text": "keyspace",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-cassandra-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-cassandra-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-cassandra-S-config",
                  "text": "config"
                }
              ],
              "text": "cassandra",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Kafka Producer Bridge Config",
              "hash": "V-bridges-S-bridges-kafka",
              "refs": [
                {
                  "doc": "Kafka Producer 配置。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用（true）或停用该（false）Kafka 数据桥接。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-bootstrap_hosts",
                      "text": "bootstrap_hosts",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-min_metadata_refresh_interval",
                      "text": "min_metadata_refresh_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "刷新元数据时最大等待时长。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-metadata_request_timeout",
                      "text": "metadata_request_timeout",
                      "type": "String"
                    },
                    {
                      "default": "none",
                      "doc": "认证参数。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication",
                      "refs": [
                        {
                          "doc": "基于用户名密码的认证。",
                          "fields": [
                            {
                              "doc": "SASL 认证方法名称。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_username_password-mechanism",
                              "text": "mechanism",
                              "type": "Enum(plain,scram_sha_256,scram_sha_512)"
                            },
                            {
                              "doc": "SASL 认证的用户名。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_username_password-username",
                              "text": "username",
                              "type": "String"
                            },
                            {
                              "doc": "SASL 认证的密码。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_username_password-password",
                              "text": "password",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_username_password",
                          "text": "auth_username_password"
                        },
                        {
                          "doc": "使用 GSSAPI/Kerberos 认证。",
                          "fields": [
                            {
                              "doc": "SASL GSSAPI 认证方法的 Kerberos principal，例如 <code>client_name@MY.KERBEROS.REALM.MYDOMAIN.COM</code>注意：这里使用的 realm 需要配置在 EMQX 服务器的 /etc/krb5.conf 中",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_gssapi_kerberos-kerberos_principal",
                              "text": "kerberos_principal",
                              "type": "String"
                            },
                            {
                              "doc": "SASL GSSAPI 认证方法的 Kerberos keytab 文件。注意：该文件需要上传到 EMQX 服务器中，且运行 EMQX 服务的系统账户需要有读取权限。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_gssapi_kerberos-kerberos_keytab_file",
                              "text": "kerberos_keytab_file",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-authentication-S-auth_gssapi_kerberos",
                          "text": "auth_gssapi_kerberos"
                        }
                      ],
                      "text": "authentication",
                      "type": "OneOf(String(\"none\"),Struct(auth_username_password),Struct(auth_gssapi_kerberos))"
                    },
                    {
                      "doc": "更多 Socket 参数设置。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-socket_opts",
                      "refs": [
                        {
                          "doc": "更多 Socket 参数设置。",
                          "fields": [
                            {
                              "default": "\"1MB\"",
                              "doc": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-socket_opts-S-socket_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "TCP socket 的收包缓存调优。默认值是针对高吞吐量的一个推荐值。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-socket_opts-S-socket_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-socket_opts-S-socket_opts",
                          "text": "socket_opts"
                        }
                      ],
                      "text": "socket_opts",
                      "type": "Struct(socket_opts)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "Kafka 生产者参数。",
                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka",
                      "refs": [
                        {
                          "doc": "Kafka 生产者参数。",
                          "fields": [
                            {
                              "doc": "Kafka 主题名称",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-topic",
                              "text": "topic",
                              "type": "String"
                            },
                            {
                              "doc": "用于生成 Kafka 消息的模版。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-message",
                              "refs": [
                                {
                                  "doc": "用于生成 Kafka 消息的模版。",
                                  "fields": [
                                    {
                                      "default": "\"${.clientid}\"",
                                      "doc": "生成 Kafka 消息 Key 的模版。如果模版生成后为空值，则会使用 Kafka 的 <code>NULL</code> ，而非空字符串。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-message-S-kafka_message-key",
                                      "text": "key",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${.}\"",
                                      "doc": "生成 Kafka 消息 Value 的模版。如果模版生成后为空值，则会使用 Kafka 的 <code>NULL</code>，而非空字符串。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-message-S-kafka_message-value",
                                      "text": "value",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${.timestamp}\"",
                                      "doc": "生成 Kafka 消息时间戳的模版。该时间必需是一个整型数值（可以是字符串格式）例如 <code>1661326462115</code> 或 <code>'1661326462115'</code>。当所需的输入字段不存在，或不是一个整型时，则会使用当前系统时间。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-message-S-kafka_message-timestamp",
                                      "text": "timestamp",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-message-S-kafka_message",
                                  "text": "kafka_message"
                                }
                              ],
                              "text": "message",
                              "type": "Struct(kafka_message)"
                            },
                            {
                              "default": "\"896KB\"",
                              "doc": "最大消息批量字节数。大多数 Kafka 环境的默认最低值是 1 MB，EMQX 的默认值比 1 MB 更小是因为需要补偿 Kafka 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-max_batch_bytes",
                              "text": "max_batch_bytes",
                              "type": "String"
                            },
                            {
                              "default": "no_compression",
                              "doc": "压缩方法。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-compression",
                              "text": "compression",
                              "type": "Enum(no_compression,snappy,gzip)"
                            },
                            {
                              "default": "random",
                              "doc": "设置消息发布时应该如何选择 Kafka 分区。\n\n<code>random</code>: 为每个消息随机选择一个分区。\n<code>key_dispatch</code>: Hash Kafka message key to a partition number",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-partition_strategy",
                              "text": "partition_strategy",
                              "type": "Enum(random,key_dispatch)"
                            },
                            {
                              "default": "all_isr",
                              "doc": "设置 Kafka leader 在返回给 EMQX 确认之前需要等待多少个 follower 的确认。\n\n<code>all_isr</code>: 需要所有的在线复制者都确认。\n<code>leader_only</code>: 仅需要分区 leader 确认。\n<code>none</code>: 无需 Kafka 回复任何确认。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-required_acks",
                              "text": "required_acks",
                              "type": "Enum(all_isr,leader_only,none)"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "配置 Kafka 刷新分区数量的时间间隔。\nEMQX 发现 Kafka 分区数量增加后，会开始按 <code>partition_strategy<code> 配置，把消息发送到新的分区中。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-partition_count_refresh_interval",
                              "text": "partition_count_refresh_interval",
                              "type": "String"
                            },
                            {
                              "default": "10",
                              "doc": "设置 Kafka 生产者（每个分区一个）在收到 Kafka 的确认前最多发送多少个请求（批量）。调大这个值通常可以增加吞吐量，但是，当该值设置大于 1 时存在消息乱序的风险。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-max_inflight",
                              "text": "max_inflight",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "配置消息缓存的相关参数。\n\n当 EMQX 需要发送的消息超过 Kafka 处理能力，或者当 Kafka 临时下线时，EMQX 内部会将消息缓存起来。",
                              "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer",
                              "refs": [
                                {
                                  "doc": "配置消息缓存的相关参数。\n\n当 EMQX 需要发送的消息超过 Kafka 处理能力，或者当 Kafka 临时下线时，EMQX 内部会将消息缓存起来。",
                                  "fields": [
                                    {
                                      "default": "memory",
                                      "doc": "消息缓存模式。\n<code>memory</code>: 所有的消息都缓存在内存里。如果 EMQX 服务重启，缓存的消息会丢失。\n<code>disk</code>: 缓存到磁盘上。EMQX 重启后会继续发送重启前未发送完成的消息。\n<code>hybrid</code>: 先将消息缓存在内存中，当内存中的消息堆积超过一定限制（配置项 <code>segment_bytes</code> 描述了该限制）后，后续的消息会缓存到磁盘上。与 <code>memory</code> 模式一样，如果 EMQX 服务重启，缓存的消息会丢失。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer-S-producer_buffer-mode",
                                      "text": "mode",
                                      "type": "Enum(memory,disk,hybrid)"
                                    },
                                    {
                                      "default": "\"2GB\"",
                                      "doc": "为每个 Kafka 分区设置的最大缓存字节数。当超过这个上限之后，老的消息会被丢弃，为新的消息腾出空间。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer-S-producer_buffer-per_partition_limit",
                                      "text": "per_partition_limit",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"100MB\"",
                                      "doc": "当缓存模式是 <code>disk</code> 或 <code>hybrid</code> 时适用。该配置用于指定缓存到磁盘上的文件的大小。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer-S-producer_buffer-segment_bytes",
                                      "text": "segment_bytes",
                                      "type": "String"
                                    },
                                    {
                                      "default": "false",
                                      "doc": "缓存模式是 <code>memory</code> 或 <code>hybrid</code> 时适用。当系统处于高内存压力时，从队列中丢弃旧的消息以减缓内存增长。内存压力值由配置项 <code>sysmon.os.sysmem_high_watermark</code> 决定。注意，该配置仅在 Linux 系统中有效。",
                                      "hash": "V-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer-S-producer_buffer-memory_overload_protection",
                                      "text": "memory_overload_protection",
                                      "type": "Boolean"
                                    }
                                  ],
                                  "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts-buffer-S-producer_buffer",
                                  "text": "producer_buffer"
                                }
                              ],
                              "text": "buffer",
                              "type": "Struct(producer_buffer)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka-S-kafka_producer-kafka-S-producer_kafka_opts",
                          "text": "producer_kafka_opts"
                        }
                      ],
                      "text": "kafka",
                      "type": "Struct(producer_kafka_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-kafka-S-kafka_producer",
                  "text": "kafka_producer"
                }
              ],
              "text": "kafka",
              "type": "Map($name->Struct(kafka_producer))"
            },
            {
              "doc": "Kafka Consumer Bridge Config",
              "hash": "V-bridges-S-bridges-kafka_consumer",
              "refs": [
                {
                  "doc": "Kafka 消费者配置。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用（true）或停用该（false）Kafka 数据桥接。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-bootstrap_hosts",
                      "text": "bootstrap_hosts",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "default": "\"3s\"",
                      "doc": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-min_metadata_refresh_interval",
                      "text": "min_metadata_refresh_interval",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "刷新元数据时最大等待时长。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-metadata_request_timeout",
                      "text": "metadata_request_timeout",
                      "type": "String"
                    },
                    {
                      "default": "none",
                      "doc": "认证参数。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication",
                      "refs": [
                        {
                          "doc": "基于用户名密码的认证。",
                          "fields": [
                            {
                              "doc": "SASL 认证方法名称。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_username_password-mechanism",
                              "text": "mechanism",
                              "type": "Enum(plain,scram_sha_256,scram_sha_512)"
                            },
                            {
                              "doc": "SASL 认证的用户名。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_username_password-username",
                              "text": "username",
                              "type": "String"
                            },
                            {
                              "doc": "SASL 认证的密码。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_username_password-password",
                              "text": "password",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_username_password",
                          "text": "auth_username_password"
                        },
                        {
                          "doc": "使用 GSSAPI/Kerberos 认证。",
                          "fields": [
                            {
                              "doc": "SASL GSSAPI 认证方法的 Kerberos principal，例如 <code>client_name@MY.KERBEROS.REALM.MYDOMAIN.COM</code>注意：这里使用的 realm 需要配置在 EMQX 服务器的 /etc/krb5.conf 中",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_gssapi_kerberos-kerberos_principal",
                              "text": "kerberos_principal",
                              "type": "String"
                            },
                            {
                              "doc": "SASL GSSAPI 认证方法的 Kerberos keytab 文件。注意：该文件需要上传到 EMQX 服务器中，且运行 EMQX 服务的系统账户需要有读取权限。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_gssapi_kerberos-kerberos_keytab_file",
                              "text": "kerberos_keytab_file",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-authentication-S-auth_gssapi_kerberos",
                          "text": "auth_gssapi_kerberos"
                        }
                      ],
                      "text": "authentication",
                      "type": "OneOf(String(\"none\"),Struct(auth_username_password),Struct(auth_gssapi_kerberos))"
                    },
                    {
                      "doc": "更多 Socket 参数设置。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-socket_opts",
                      "refs": [
                        {
                          "doc": "更多 Socket 参数设置。",
                          "fields": [
                            {
                              "default": "\"1MB\"",
                              "doc": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-socket_opts-S-socket_opts-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            },
                            {
                              "default": "\"1MB\"",
                              "doc": "TCP socket 的收包缓存调优。默认值是针对高吞吐量的一个推荐值。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-socket_opts-S-socket_opts-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-socket_opts-S-socket_opts",
                          "text": "socket_opts"
                        }
                      ],
                      "text": "socket_opts",
                      "type": "Struct(socket_opts)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "doc": "Kafka消费者配置。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-kafka",
                      "refs": [
                        {
                          "doc": "Kafka消费者配置。",
                          "fields": [
                            {
                              "default": "\"896KB\"",
                              "doc": "设置每次从 Kafka 拉取数据的字节数。如该配置小于 Kafka 消息的大小，可能会影响消费性能。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-kafka-S-consumer_kafka_opts-max_batch_bytes",
                              "text": "max_batch_bytes",
                              "type": "String"
                            },
                            {
                              "default": "latest",
                              "doc": "如不存在偏移量历史记录或历史记录失效，消费者应使用哪个偏移量开始消费。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-kafka-S-consumer_kafka_opts-offset_reset_policy",
                              "text": "offset_reset_policy",
                              "type": "Enum(latest,earliest)"
                            },
                            {
                              "default": "5",
                              "doc": "指定 Kafka 消费组偏移量提交的时间间隔。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-kafka-S-consumer_kafka_opts-offset_commit_interval_seconds",
                              "text": "offset_commit_interval_seconds",
                              "type": "Integer(1..+inf)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-kafka-S-consumer_kafka_opts",
                          "text": "consumer_kafka_opts"
                        }
                      ],
                      "text": "kafka",
                      "type": "Struct(consumer_kafka_opts)"
                    },
                    {
                      "doc": "指定 Kafka 主题和 MQTT 主题之间的映射关系。 应至少包含一项。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping",
                      "refs": [
                        {
                          "doc": "指定 Kafka 主题和 MQTT 主题之间的映射关系。 应至少包含一项。",
                          "fields": [
                            {
                              "doc": "指定从哪个 Kafka 主题消费消息。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping-S-consumer_topic_mapping-kafka_topic",
                              "text": "kafka_topic",
                              "type": "String"
                            },
                            {
                              "doc": "设置 Kafka 消息向哪个本地 MQTT 主题转发消息。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping-S-consumer_topic_mapping-mqtt_topic",
                              "text": "mqtt_topic",
                              "type": "String"
                            },
                            {
                              "default": "0",
                              "doc": "转发 MQTT 消息时使用的 QoS。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping-S-consumer_topic_mapping-qos",
                              "text": "qos",
                              "type": "Integer(0..2)"
                            },
                            {
                              "default": "\"${.}\"",
                              "doc": "用于转换收到的 Kafka 消息的模板。 默认情况下，它将使用 JSON 格式来序列化来自 Kafka 的所有字段。 这些字段包括：<code>headers</code>：一个包含字符串键值对的 JSON 对象。\n<code>key</code>：Kafka 消息的键（使用选择的编码方式编码）。\n<code>offset</code>：消息的偏移量。\n<code>topic</code>：Kafka 主题。\n<code>ts</code>: 消息的时间戳。\n<code>ts_type</code>：消息的时间戳类型，值可能是： <code>create</code>， <code>append</code> 或 <code>undefined</code>。\n<code>value</code>: Kafka 消息值（使用选择的编码方式编码）。",
                              "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping-S-consumer_topic_mapping-payload_template",
                              "text": "payload_template",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer-topic_mapping-S-consumer_topic_mapping",
                          "text": "consumer_topic_mapping"
                        }
                      ],
                      "text": "topic_mapping",
                      "type": "Array(Struct(consumer_topic_mapping))"
                    },
                    {
                      "default": "none",
                      "doc": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Key。<code>none</code> 使用 Kafka 消息中的 Key 原始值，不进行编码。  注意：在这种情况下，Key 必须是一个有效的 UTF-8 字符串。\n<code>base64</code> 对收到的密钥或值使用 base-64 编码。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-key_encoding_mode",
                      "text": "key_encoding_mode",
                      "type": "Enum(none,base64)"
                    },
                    {
                      "default": "none",
                      "doc": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Value。<code>none</code> 使用 Kafka 消息中的 Value 原始值，不进行编码。  注意：在这种情况下，Value 必须是一个有效的 UTF-8 字符串。\n<code>base64</code> 对收到的 Value 使用 base-64 编码。",
                      "hash": "V-bridges-S-bridges-kafka_consumer-S-kafka_consumer-value_encoding_mode",
                      "text": "value_encoding_mode",
                      "type": "Enum(none,base64)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-kafka_consumer-S-kafka_consumer",
                  "text": "kafka_consumer"
                }
              ],
              "text": "kafka_consumer",
              "type": "Map($name->Struct(kafka_consumer))"
            },
            {
              "doc": "MongoDB Bridge Config",
              "hash": "V-bridges-S-bridges-mongodb_rs",
              "refs": [
                {
                  "doc": "MongoDB（Replica Set）配置",
                  "fields": [
                    {
                      "default": "rs",
                      "doc": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"rs\")"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "master",
                      "doc": "读模式。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-r_mode",
                      "text": "r_mode",
                      "type": "Enum(master,slave_ok)"
                    },
                    {
                      "doc": "副本集的名称。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-replica_set_name",
                      "text": "replica_set_name",
                      "type": "String"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_rs-S-mongodb_rs-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_rs-S-mongodb_rs-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "default": "true",
                      "doc": "启用或停用该MongoDB桥",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"mqtt\"",
                      "doc": "数据将被存储到的集合",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "doc": "用于格式化写入 MongoDB 的消息模板。 如果未定义，规则引擎会使用 JSON 格式序列化所有的可见输入，例如 clientid, topic, payload 等。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-payload_template",
                      "text": "payload_template",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_rs-S-mongodb_rs-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mongodb_rs-S-mongodb_rs",
                  "text": "mongodb_rs"
                }
              ],
              "text": "mongodb_rs",
              "type": "Map($name->Struct(mongodb_rs))"
            },
            {
              "doc": "MongoDB Bridge Config",
              "hash": "V-bridges-S-bridges-mongodb_sharded",
              "refs": [
                {
                  "doc": "MongoDB (Sharded)配置",
                  "fields": [
                    {
                      "default": "sharded",
                      "doc": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"sharded\")"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "default": "true",
                      "doc": "启用或停用该MongoDB桥",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"mqtt\"",
                      "doc": "数据将被存储到的集合",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "doc": "用于格式化写入 MongoDB 的消息模板。 如果未定义，规则引擎会使用 JSON 格式序列化所有的可见输入，例如 clientid, topic, payload 等。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-payload_template",
                      "text": "payload_template",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mongodb_sharded-S-mongodb_sharded",
                  "text": "mongodb_sharded"
                }
              ],
              "text": "mongodb_sharded",
              "type": "Map($name->Struct(mongodb_sharded))"
            },
            {
              "doc": "MongoDB Bridge Config",
              "hash": "V-bridges-S-bridges-mongodb_single",
              "refs": [
                {
                  "doc": "MongoDB（独立）配置",
                  "fields": [
                    {
                      "default": "single",
                      "doc": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-mongo_type",
                      "text": "mongo_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "unsafe",
                      "doc": "写模式。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-w_mode",
                      "text": "w_mode",
                      "type": "Enum(unsafe,safe)"
                    },
                    {
                      "default": "false",
                      "doc": "使用 DNS SRV 记录。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-srv_record",
                      "text": "srv_record",
                      "type": "Boolean"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "与用户证书关联的数据库名称。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-auth_source",
                      "text": "auth_source",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology",
                      "refs": [
                        {
                          "doc": "配置 Topology",
                          "fields": [
                            {
                              "default": "8",
                              "doc": "桥接远端服务时使用的连接池大小。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-pool_size",
                              "text": "pool_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "0",
                              "doc": "最大溢出。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-max_overflow",
                              "text": "max_overflow",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "doc": "当池内工人太多时，等待多久清除多余工人。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-overflow_ttl",
                              "text": "overflow_ttl",
                              "type": "String"
                            },
                            {
                              "doc": "检查是否有超过配置的工人的周期（\"溢出\"）。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-overflow_check_period",
                              "text": "overflow_check_period",
                              "type": "String"
                            },
                            {
                              "doc": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-local_threshold_ms",
                              "text": "local_threshold_ms",
                              "type": "String"
                            },
                            {
                              "doc": "超时重连的等待时间。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-connect_timeout_ms",
                              "text": "connect_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-socket_timeout_ms",
                              "text": "socket_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "指定在抛出异常之前为服务器选择阻断多长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-server_selection_timeout_ms",
                              "text": "server_selection_timeout_ms",
                              "type": "String"
                            },
                            {
                              "doc": "工作者等待连接可用的最长时间。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-wait_queue_timeout_ms",
                              "text": "wait_queue_timeout_ms",
                              "type": "String"
                            },
                            {
                              "default": "\"200s\"",
                              "doc": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-heartbeat_frequency_ms",
                              "text": "heartbeat_frequency_ms",
                              "type": "String"
                            },
                            {
                              "doc": "心跳间的最小间隙",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology-min_heartbeat_frequency_ms",
                              "text": "min_heartbeat_frequency_ms",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_single-S-mongodb_single-topology-S-topology",
                          "text": "topology"
                        }
                      ],
                      "text": "topology",
                      "type": "Struct(topology)"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_single-S-mongodb_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    },
                    {
                      "default": "true",
                      "doc": "启用或停用该MongoDB桥",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"mqtt\"",
                      "doc": "数据将被存储到的集合",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-collection",
                      "text": "collection",
                      "type": "String"
                    },
                    {
                      "doc": "用于格式化写入 MongoDB 的消息模板。 如果未定义，规则引擎会使用 JSON 格式序列化所有的可见输入，例如 clientid, topic, payload 等。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-payload_template",
                      "text": "payload_template",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-mongodb_single-S-mongodb_single-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-mongodb_single-S-mongodb_single",
                  "text": "mongodb_single"
                }
              ],
              "text": "mongodb_single",
              "type": "Map($name->Struct(mongodb_single))"
            },
            {
              "doc": "InfluxDB Bridge Config",
              "hash": "V-bridges-S-bridges-influxdb_api_v1",
              "refs": [
                {
                  "doc": "InfluxDB HTTP API 协议。支持 Influxdb v1.8 以及之前的版本。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符</br>\n参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及\n[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br>\nTLDR: </br>\n```\n<measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]\n```\n注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-write_syntax",
                      "text": "write_syntax",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "\"127.0.0.1:8086\"",
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>\n主机名具有以下形式：`Host[:Port]`。</br>\n如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "ms",
                      "doc": "InfluxDB 时间精度。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-precision",
                      "text": "precision",
                      "type": "Enum(ns,us,ms,s)"
                    },
                    {
                      "doc": "InfluxDB 数据库。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "doc": "InfluxDB 用户名。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "InfluxDB 密码。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-influxdb_api_v1-S-influxdb_api_v1",
                  "text": "influxdb_api_v1"
                }
              ],
              "text": "influxdb_api_v1",
              "type": "Map($name->Struct(influxdb_api_v1))"
            },
            {
              "doc": "InfluxDB Bridge Config",
              "hash": "V-bridges-S-bridges-influxdb_api_v2",
              "refs": [
                {
                  "doc": "InfluxDB HTTP API V2 协议。支持 Influxdb v2.0 以及之后的版本。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符</br>\n参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及\n[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) </br>\nTLDR: </br>\n```\n<measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]\n```\n注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-write_syntax",
                      "text": "write_syntax",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "default": "\"127.0.0.1:8086\"",
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。</br>\n主机名具有以下形式：`Host[:Port]`。</br>\n如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "ms",
                      "doc": "InfluxDB 时间精度。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-precision",
                      "text": "precision",
                      "type": "Enum(ns,us,ms,s)"
                    },
                    {
                      "doc": "InfluxDB bucket 名称。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-bucket",
                      "text": "bucket",
                      "type": "String"
                    },
                    {
                      "doc": "InfluxDB 组织名称。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-org",
                      "text": "org",
                      "type": "String"
                    },
                    {
                      "doc": "InfluxDB token。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-token",
                      "text": "token",
                      "type": "String"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-influxdb_api_v2-S-influxdb_api_v2",
                  "text": "influxdb_api_v2"
                }
              ],
              "text": "influxdb_api_v2",
              "type": "Map($name->Struct(influxdb_api_v2))"
            },
            {
              "doc": "Redis Bridge Config",
              "hash": "V-bridges-S-bridges-redis_single",
              "refs": [
                {
                  "doc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Redis。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 Redis。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "用于推送数据的 Redis 命令模板。 每个列表元素代表一个命令名称或其参数。\n例如，要通过键值 `msgs` 将消息体推送到 Redis 列表中，数组元素应该是： `rpush`, `msgs`, `${payload}`。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-command_template",
                      "text": "command_template",
                      "type": "Array(String)"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_single-S-redis_single-resource_opts-S-creation_opts_redis_single",
                          "text": "creation_opts_redis_single"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts_redis_single)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "default": "single",
                      "doc": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-redis_type",
                      "text": "redis_type",
                      "type": "String(\"single\")"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis 数据库 ID。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_single-S-redis_single-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-redis_single-S-redis_single",
                  "text": "redis_single"
                }
              ],
              "text": "redis_single",
              "type": "Map($name->Struct(redis_single))"
            },
            {
              "doc": "Redis Bridge Config",
              "hash": "V-bridges-S-bridges-redis_sentinel",
              "refs": [
                {
                  "doc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Redis。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 Redis。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "用于推送数据的 Redis 命令模板。 每个列表元素代表一个命令名称或其参数。\n例如，要通过键值 `msgs` 将消息体推送到 Redis 列表中，数组元素应该是： `rpush`, `msgs`, `${payload}`。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-command_template",
                      "text": "command_template",
                      "type": "Array(String)"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_sentinel-S-redis_sentinel-resource_opts-S-creation_opts_redis_sentinel",
                          "text": "creation_opts_redis_sentinel"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts_redis_sentinel)"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "sentinel",
                      "doc": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-redis_type",
                      "text": "redis_type",
                      "type": "String(\"sentinel\")"
                    },
                    {
                      "doc": "Redis 哨兵模式下的集群名称。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-sentinel",
                      "text": "sentinel",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "default": "0",
                      "doc": "Redis 数据库 ID。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-database",
                      "text": "database",
                      "type": "Integer"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_sentinel-S-redis_sentinel-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-redis_sentinel-S-redis_sentinel",
                  "text": "redis_sentinel"
                }
              ],
              "text": "redis_sentinel",
              "type": "Map($name->Struct(redis_sentinel))"
            },
            {
              "doc": "Redis Bridge Config",
              "hash": "V-bridges-S-bridges-redis_cluster",
              "refs": [
                {
                  "doc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用 Bridge",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Redis。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 Redis。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "doc": "用于推送数据的 Redis 命令模板。 每个列表元素代表一个命令名称或其参数。\n例如，要通过键值 `msgs` 将消息体推送到 Redis 列表中，数组元素应该是： `rpush`, `msgs`, `${payload}`。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-command_template",
                      "text": "command_template",
                      "type": "Array(String)"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_cluster-S-redis_cluster-resource_opts-S-creation_opts_redis_cluster",
                          "text": "creation_opts_redis_cluster"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts_redis_cluster)"
                    },
                    {
                      "doc": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-servers",
                      "text": "servers",
                      "type": "String"
                    },
                    {
                      "default": "cluster",
                      "doc": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-redis_type",
                      "text": "redis_type",
                      "type": "String(\"cluster\")"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-redis_cluster-S-redis_cluster-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-redis_cluster-S-redis_cluster",
                  "text": "redis_cluster"
                }
              ],
              "text": "redis_cluster",
              "type": "Map($name->Struct(redis_cluster))"
            },
            {
              "doc": "PostgreSQL Bridge Config",
              "hash": "V-bridges-S-bridges-pgsql",
              "refs": [
                {
                  "doc": "PostgreSQL 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-pgsql-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-pgsql-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-pgsql-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-pgsql-S-config",
                  "text": "config"
                }
              ],
              "text": "pgsql",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Timescale Bridge Config",
              "hash": "V-bridges-S-bridges-timescale",
              "refs": [
                {
                  "doc": "PostgreSQL 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-timescale-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-timescale-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-timescale-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-timescale-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-timescale-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-timescale-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-timescale-S-config",
                  "text": "config"
                }
              ],
              "text": "timescale",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Matrix Bridge Config",
              "hash": "V-bridges-S-bridges-matrix",
              "refs": [
                {
                  "doc": "PostgreSQL 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-matrix-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-matrix-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-matrix-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-matrix-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    },
                    {
                      "default": "{enable = false}",
                      "doc": "启用 SSL 连接。",
                      "hash": "V-bridges-S-bridges-matrix-S-config-ssl",
                      "refs": [
                        {
                          "doc": "Socket options for SSL clients.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-matrix-S-config-ssl-S-ssl_client_opts",
                          "text": "ssl_client_opts"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_client_opts)"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-matrix-S-config",
                  "text": "config"
                }
              ],
              "text": "matrix",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Clickhouse Bridge Config",
              "hash": "V-bridges-S-bridges-clickhouse",
              "refs": [
                {
                  "doc": "Clickhouse 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"INSERT INTO mqtt_test(payload, arrived) VALUES ('${payload}', ${timestamp})\"",
                      "doc": "可以使用 ${field} 占位符来引用消息与客户端上下文中的变量，请确保对应字段存在且数据格式符合预期。此处不支持 [SQL 预处理](https://docs.emqx.com/zh/enterprise/v5.0/data-integration/data-bridges.html#sql-预处理)。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "default": "\", \"",
                      "doc": "默认为逗号 ','，适用于 VALUE 格式。您也可以使用其他分隔符， 请参考 [INSERT INTO 语句](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-batch_value_separator",
                      "text": "batch_value_separator",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Clickhouse。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-clickhouse-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "你想连接到的Clickhouse服务器的HTTP URL（例如http://myhostname:8123）。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"15s\"",
                      "doc": "连接HTTP服务器的超时时间。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-connect_timeout",
                      "text": "connect_timeout",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-clickhouse-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-clickhouse-S-config",
                  "text": "config"
                }
              ],
              "text": "clickhouse",
              "type": "Map($name->Struct(config))"
            },
            {
              "doc": "Microsoft SQL Server Bridge Config",
              "hash": "V-bridges-S-bridges-sqlserver",
              "refs": [
                {
                  "doc": "Microsoft SQL Server 桥接配置",
                  "fields": [
                    {
                      "default": "true",
                      "doc": "启用/禁用桥接",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )\"",
                      "doc": "SQL 模板",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "default": "\"ms-sql\"",
                      "doc": "SQL Server Driver 名称",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-driver",
                      "text": "driver",
                      "type": "String"
                    },
                    {
                      "doc": "发送到 'local_topic' 的消息都会转发到 Microsoft SQL Server。 </br>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-local_topic",
                      "text": "local_topic",
                      "type": "String"
                    },
                    {
                      "default": "{}",
                      "doc": "资源相关的选项。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts",
                      "refs": [
                        {
                          "doc": "资源启动相关的选项。",
                          "fields": [
                            {
                              "default": "16",
                              "doc": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-worker_pool_size",
                              "text": "worker_pool_size",
                              "type": "Integer(0..+inf)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "健康检查间隔。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-health_check_interval",
                              "text": "health_check_interval",
                              "type": "String"
                            },
                            {
                              "default": "\"true\"",
                              "doc": "是否在创建资源后立即启动资源。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-start_after_created",
                              "text": "start_after_created",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在回复资源创建请求前等待资源进入健康状态的时间。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-start_timeout",
                              "text": "start_timeout",
                              "type": "String"
                            },
                            {
                              "default": "\"60s\"",
                              "doc": "资源断开以后，自动重连的时间间隔。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-auto_restart_interval",
                              "text": "auto_restart_interval",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "default": "async",
                              "doc": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-query_mode",
                              "text": "query_mode",
                              "type": "Enum(sync,async)"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-request_timeout",
                              "text": "request_timeout",
                              "type": "OneOf(String(\"infinity\"),String)"
                            },
                            {
                              "aliases": [
                                "async_inflight_window"
                              ],
                              "default": "100",
                              "doc": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-inflight_window",
                              "text": "inflight_window",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-enable_batch",
                              "text": "enable_batch",
                              "type": "Boolean"
                            },
                            {
                              "default": "1",
                              "doc": "最大批量请求大小。如果设为1，则无批处理。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-batch_size",
                              "text": "batch_size",
                              "type": "Integer(1..+inf)"
                            },
                            {
                              "default": "\"0ms\"",
                              "doc": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-batch_time",
                              "text": "batch_time",
                              "type": "String"
                            },
                            {
                              "doc": "Deprecated since v5.0.14.",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-enable_queue",
                              "text": "enable_queue",
                              "type": "Boolean"
                            },
                            {
                              "aliases": [
                                "max_queue_bytes"
                              ],
                              "default": "\"256MB\"",
                              "doc": "每个缓存 worker 允许使用的最大字节数。",
                              "hash": "V-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts-max_buffer_bytes",
                              "text": "max_buffer_bytes",
                              "type": "String"
                            }
                          ],
                          "hash": "T-bridges-S-bridges-sqlserver-S-config-resource_opts-S-creation_opts",
                          "text": "creation_opts"
                        }
                      ],
                      "text": "resource_opts",
                      "type": "Struct(creation_opts)"
                    },
                    {
                      "doc": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-server",
                      "text": "server",
                      "type": "String"
                    },
                    {
                      "doc": "数据库名字。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-database",
                      "text": "database",
                      "type": "String"
                    },
                    {
                      "default": "8",
                      "doc": "桥接远端服务时使用的连接池大小。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    },
                    {
                      "default": "\"sa\"",
                      "doc": "内部数据库的用户名。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-username",
                      "text": "username",
                      "type": "String"
                    },
                    {
                      "doc": "内部数据库密码。",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-password",
                      "text": "password",
                      "type": "String"
                    },
                    {
                      "doc": "Deprecated since v5.0.15.",
                      "hash": "V-bridges-S-bridges-sqlserver-S-config-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-bridges-S-bridges-sqlserver-S-config",
                  "text": "config"
                }
              ],
              "text": "sqlserver",
              "type": "Map($name->Struct(config))"
            }
          ],
          "hash": "T-bridges-S-bridges",
          "text": "bridges"
        }
      ],
      "text": "bridges",
      "type": "Struct(bridges)"
    },
    {
      "hash": "V-retainer",
      "refs": [
        {
          "doc": "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
          "fields": [
            {
              "default": "true",
              "doc": "是否开启消息保留功能",
              "hash": "V-retainer-S-retainer-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"0s\"",
              "doc": "消息保留时间。0 代表永久保留",
              "hash": "V-retainer-S-retainer-msg_expiry_interval",
              "text": "msg_expiry_interval",
              "type": "String"
            },
            {
              "default": "\"0s\"",
              "doc": "消息清理间隔。0 代表不进行清理",
              "hash": "V-retainer-S-retainer-msg_clear_interval",
              "text": "msg_clear_interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "流控设置",
              "hash": "V-retainer-S-retainer-flow_control",
              "refs": [
                {
                  "doc": "Retainer batching and rate limiting.",
                  "fields": [
                    {
                      "default": "0",
                      "doc": "从存储后端批量加载时的每批数量上限，0 代表一次性读取",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_read_number",
                      "text": "batch_read_number",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "0",
                      "doc": "批量派发时每批的数量。0 代表一次性全部派发",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_number",
                      "text": "batch_deliver_number",
                      "type": "Integer(0..1000)"
                    },
                    {
                      "doc": "批量发送的限流器的名称。\n限流器可以用来防止短时间内向客户端发送太多的消息，从而避免过多的消息导致客户端队列堵塞甚至崩溃。\n这个名称需要是指向 `limiter.batch` 下的一个真实存在的限流器。\n如果这个字段为空，则不使用限流器。",
                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter",
                      "refs": [
                        {
                          "doc": "Internal limiter.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "该令牌桶的容量",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "doc": "对桶的每个使用者的速率控制设置",
                              "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client",
                              "refs": [
                                {
                                  "doc": "Settings for the client in bucket level.",
                                  "fields": [
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "桶的令牌生成速率",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-rate",
                                      "text": "rate",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "桶中的初始令牌数",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-initial",
                                      "text": "initial",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"0\"",
                                      "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-low_watermark",
                                      "text": "low_watermark",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"infinity\"",
                                      "doc": "每个使用者的令牌容量上限",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-capacity",
                                      "text": "capacity",
                                      "type": "String"
                                    },
                                    {
                                      "default": "false",
                                      "doc": "申请的令牌数是否可以被分割",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-divisible",
                                      "text": "divisible",
                                      "type": "Boolean"
                                    },
                                    {
                                      "default": "\"10s\"",
                                      "doc": "申请失败后，尝试重新申请的时长最大值",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-max_retry_time",
                                      "text": "max_retry_time",
                                      "type": "String"
                                    },
                                    {
                                      "default": "force",
                                      "doc": "当所有的重试都失败后的处理策略",
                                      "hash": "V-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts-failure_strategy",
                                      "text": "failure_strategy",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal-client-S-client_opts",
                                  "text": "client_opts"
                                }
                              ],
                              "text": "client",
                              "type": "Struct(client_opts)"
                            }
                          ],
                          "hash": "T-retainer-S-retainer-flow_control-S-flow_control-batch_deliver_limiter-S-internal",
                          "text": "internal"
                        }
                      ],
                      "text": "batch_deliver_limiter",
                      "type": "Struct(internal)"
                    }
                  ],
                  "hash": "T-retainer-S-retainer-flow_control-S-flow_control",
                  "text": "flow_control"
                }
              ],
              "text": "flow_control",
              "type": "Struct(flow_control)"
            },
            {
              "default": "\"1MB\"",
              "doc": "消息大小最大值",
              "hash": "V-retainer-S-retainer-max_payload_size",
              "text": "max_payload_size",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "是否不发送保留消息的清理消息，在 MQTT 5.0 中如果一条保留消息的消息体为空，则会清除掉之前存储\n的对应的保留消息，通过这个值控制是否停止发送清理消息",
              "hash": "V-retainer-S-retainer-stop_publish_clear_msg",
              "text": "stop_publish_clear_msg",
              "type": "Boolean"
            },
            {
              "doc": "保留消息的存储后端",
              "hash": "V-retainer-S-retainer-backend",
              "refs": [
                {
                  "doc": "Configuration of the internal database storing retained messages.",
                  "fields": [
                    {
                      "default": "built_in_database",
                      "doc": "后端类型",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-type",
                      "text": "type",
                      "type": "String(\"built_in_database\")"
                    },
                    {
                      "default": "ram",
                      "doc": "选择消息是存放在磁盘还是内存中",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-storage_type",
                      "text": "storage_type",
                      "type": "Enum(ram,disc)"
                    },
                    {
                      "default": "0",
                      "doc": "消息保留的数量上限。0 表示无限",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-max_retained_messages",
                      "text": "max_retained_messages",
                      "type": "Integer(0..+inf)"
                    },
                    {
                      "default": "[\n  [1, 2, 3],\n  [1, 3],\n  [2, 3],\n  [3]\n]\n",
                      "doc": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
                      "hash": "V-retainer-S-retainer-backend-S-mnesia_config-index_specs",
                      "text": "index_specs",
                      "type": "Array(Integer)"
                    }
                  ],
                  "hash": "T-retainer-S-retainer-backend-S-mnesia_config",
                  "text": "mnesia_config"
                }
              ],
              "text": "backend",
              "type": "Struct(mnesia_config)"
            }
          ],
          "hash": "T-retainer-S-retainer",
          "text": "retainer"
        }
      ],
      "text": "retainer",
      "type": "Struct(retainer)"
    },
    {
      "hash": "V-statsd",
      "refs": [
        {
          "doc": "StatsD 指标采集与推送配置。",
          "fields": [
            {
              "default": "false",
              "doc": "启用或禁用 StatsD 指标采集和推送服务。",
              "hash": "V-statsd-S-statsd-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "\"127.0.0.1:8125\"",
              "doc": "StatsD 服务器地址。",
              "hash": "V-statsd-S-statsd-server",
              "text": "server",
              "type": "String"
            },
            {
              "default": "\"30s\"",
              "doc": "指标的采样间隔。",
              "hash": "V-statsd-S-statsd-sample_time_interval",
              "text": "sample_time_interval",
              "type": "String"
            },
            {
              "default": "\"30s\"",
              "doc": "指标的推送间隔。",
              "hash": "V-statsd-S-statsd-flush_time_interval",
              "text": "flush_time_interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "指标的标签。",
              "hash": "V-statsd-S-statsd-tags",
              "text": "tags",
              "type": "Map"
            }
          ],
          "hash": "T-statsd-S-statsd",
          "text": "statsd"
        }
      ],
      "text": "statsd",
      "type": "Struct(statsd)"
    },
    {
      "hash": "V-delayed",
      "refs": [
        {
          "doc": "Settings for the delayed module.",
          "fields": [
            {
              "default": "true",
              "doc": "是否开启该功能",
              "hash": "V-delayed-S-delayed-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "default": "0",
              "doc": "延迟消息的数量上限(0 代表无限)",
              "hash": "V-delayed-S-delayed-max_delayed_messages",
              "text": "max_delayed_messages",
              "type": "Integer"
            }
          ],
          "hash": "T-delayed-S-delayed",
          "text": "delayed"
        }
      ],
      "text": "delayed",
      "type": "Struct(delayed)"
    },
    {
      "hash": "V-telemetry",
      "refs": [
        {
          "doc": "Settings for the telemetry module.",
          "fields": [
            {
              "default": "true",
              "doc": "Enable telemetry.",
              "hash": "V-telemetry-S-telemetry-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-telemetry-S-telemetry",
          "text": "telemetry"
        }
      ],
      "text": "telemetry",
      "type": "Struct(telemetry)"
    },
    {
      "hash": "V-plugins",
      "refs": [
        {
          "doc": "管理EMQX插件。<br/>\n插件可以是EMQX安装包中的一部分，也可以是一个独立的安装包。<br/>\n独立安装的插件称为“外部插件”。",
          "fields": [
            {
              "default": "[]",
              "doc": "一组插件的状态。插件将按照定义的顺序启动",
              "hash": "V-plugins-S-plugins-states",
              "refs": [
                {
                  "doc": "描述插件的状态",
                  "fields": [
                    {
                      "doc": "插件的名称{name}-{version}。<br/>\n它应该与插件的发布包名称一致，如my_plugin-0.1.0。",
                      "hash": "V-plugins-S-plugins-states-S-state-name_vsn",
                      "text": "name_vsn",
                      "type": "String"
                    },
                    {
                      "doc": "设置为“true”以启用此插件",
                      "hash": "V-plugins-S-plugins-states-S-state-enable",
                      "text": "enable",
                      "type": "Boolean"
                    }
                  ],
                  "hash": "T-plugins-S-plugins-states-S-state",
                  "text": "state"
                }
              ],
              "text": "states",
              "type": "Array(Struct(state))"
            },
            {
              "default": "\"plugins\"",
              "doc": "插件安装包的目录，出于安全考虑，该目录应该值允许 <code>emqx</code>，或用于运行 EMQX 服务的用户拥有写入权限。",
              "hash": "V-plugins-S-plugins-install_dir",
              "text": "install_dir",
              "type": "String"
            },
            {
              "default": "\"5s\"",
              "doc": "检查间隔：检查集群中插件的状态是否一致，<br/>\n如果连续3次检查结果不一致，则报警。",
              "hash": "V-plugins-S-plugins-check_interval",
              "text": "check_interval",
              "type": "String"
            }
          ],
          "hash": "T-plugins-S-plugins",
          "text": "plugins"
        }
      ],
      "text": "plugins",
      "type": "Struct(plugins)"
    },
    {
      "hash": "V-dashboard",
      "refs": [
        {
          "doc": "EMQX Dashboard 配置。",
          "fields": [
            {
              "doc": "Dashboard 监听器设置。监听器必须有唯一的端口号和IP地址的组合。\n例如，可以通过指定IP地址 0.0.0.0 来监听机器上给定端口上的所有配置的IP地址。\n或者，可以为每个监听器指定唯一的IP地址，但使用相同的端口。",
              "hash": "V-dashboard-S-dashboard-listeners",
              "refs": [
                {
                  "doc": "Dashboard 监听器配置。",
                  "fields": [
                    {
                      "doc": "TCP listeners",
                      "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http",
                      "refs": [
                        {
                          "doc": "Dashboard 监听器(HTTP)配置。",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "忽略或启用该监听器。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "18083",
                              "doc": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-bind",
                              "text": "bind",
                              "type": "OneOf(Integer(0..+inf),String)"
                            },
                            {
                              "default": "20",
                              "doc": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-num_acceptors",
                              "text": "num_acceptors",
                              "type": "Integer"
                            },
                            {
                              "default": "512",
                              "doc": "同时处理的最大连接数。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-max_connections",
                              "text": "max_connections",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "排队等待连接的队列的最大长度。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-backlog",
                              "text": "backlog",
                              "type": "Integer"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "Socket发送超时时间。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-inet6",
                              "text": "inet6",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-ipv6_v6only",
                              "text": "ipv6_v6only",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-proxy_header",
                              "text": "proxy_header",
                              "type": "Boolean"
                            }
                          ],
                          "hash": "T-dashboard-S-dashboard-listeners-S-listeners-http-S-http",
                          "text": "http"
                        }
                      ],
                      "text": "http",
                      "type": "Struct(http)"
                    },
                    {
                      "doc": "SSL listeners",
                      "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https",
                      "refs": [
                        {
                          "doc": "Dashboard 监听器(HTTPS)配置。",
                          "fields": [
                            {
                              "default": "false",
                              "doc": "忽略或启用该监听器。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "default": "18084",
                              "doc": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-bind",
                              "text": "bind",
                              "type": "OneOf(Integer(0..+inf),String)"
                            },
                            {
                              "default": "20",
                              "doc": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-num_acceptors",
                              "text": "num_acceptors",
                              "type": "Integer"
                            },
                            {
                              "default": "512",
                              "doc": "同时处理的最大连接数。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-max_connections",
                              "text": "max_connections",
                              "type": "Integer"
                            },
                            {
                              "default": "1024",
                              "doc": "排队等待连接的队列的最大长度。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-backlog",
                              "text": "backlog",
                              "type": "Integer"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "Socket发送超时时间。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-send_timeout",
                              "text": "send_timeout",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-inet6",
                              "text": "inet6",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ipv6_v6only",
                              "text": "ipv6_v6only",
                              "type": "Boolean"
                            },
                            {
                              "default": "false",
                              "doc": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-proxy_header",
                              "text": "proxy_header",
                              "type": "Boolean"
                            },
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "doc": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持<code>dhfile</code>选项。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-dhfile",
                              "text": "dhfile",
                              "type": "String"
                            },
                            {
                              "default": "true",
                              "doc": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-honor_cipher_order",
                              "text": "honor_cipher_order",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-client_renegotiation",
                              "text": "client_renegotiation",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"15s\"",
                              "doc": "握手完成所允许的最长时间",
                              "hash": "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-handshake_timeout",
                              "text": "handshake_timeout",
                              "type": "String"
                            }
                          ],
                          "hash": "T-dashboard-S-dashboard-listeners-S-listeners-https-S-https",
                          "text": "https"
                        }
                      ],
                      "text": "https",
                      "type": "Struct(https)"
                    }
                  ],
                  "hash": "T-dashboard-S-dashboard-listeners-S-listeners",
                  "text": "listeners"
                }
              ],
              "text": "listeners",
              "type": "Struct(listeners)"
            },
            {
              "default": "\"60m\"",
              "doc": "JWT token 过期时间。默认设置为 60 分钟。",
              "hash": "V-dashboard-S-dashboard-token_expired_time",
              "text": "token_expired_time",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "支持跨域资源共享(CORS)，\n允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
              "hash": "V-dashboard-S-dashboard-cors",
              "text": "cors",
              "type": "Boolean"
            }
          ],
          "hash": "T-dashboard-S-dashboard",
          "text": "dashboard"
        }
      ],
      "text": "dashboard",
      "type": "Struct(dashboard)"
    },
    {
      "hash": "V-prometheus",
      "refs": [
        {
          "doc": "Prometheus 监控数据推送",
          "fields": [
            {
              "default": "\"http://127.0.0.1:9091\"",
              "doc": "Prometheus 服务器地址",
              "hash": "V-prometheus-S-prometheus-push_gateway_server",
              "text": "push_gateway_server",
              "type": "String"
            },
            {
              "default": "\"15s\"",
              "doc": "数据推送间隔",
              "hash": "V-prometheus-S-prometheus-interval",
              "text": "interval",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "推送到 Push Gateway 的 HTTP Headers 列表。<br/>\n例如，<code> { Authorization = \"some-authz-tokens\"}</code>",
              "hash": "V-prometheus-S-prometheus-headers",
              "text": "headers",
              "type": "Map"
            },
            {
              "default": "\"${name}/instance/${name}~${host}\"",
              "doc": "推送到 Push Gateway 的 Job 名称。可用变量为：<br/>\n- ${name}: EMQX 节点的名称。\n- ${host}: EMQX 节点主机名。\n例如，当 EMQX 节点名为 <code>emqx@127.0.0.1</code> 则 name 变量的值为 <code>emqx</code>，host 变量的值为 <code>127.0.0.1</code>。<br/>\n默认值为: <code>${name}/instance/${name}~${host}</code>",
              "hash": "V-prometheus-S-prometheus-job_name",
              "text": "job_name",
              "type": "String"
            },
            {
              "default": "false",
              "doc": "开启或关闭 Prometheus 数据推送",
              "hash": "V-prometheus-S-prometheus-enable",
              "text": "enable",
              "type": "Boolean"
            }
          ],
          "hash": "T-prometheus-S-prometheus",
          "text": "prometheus"
        }
      ],
      "text": "prometheus",
      "type": "Struct(prometheus)"
    },
    {
      "hash": "V-rule_engine",
      "refs": [
        {
          "doc": "配置 EMQX 规则引擎。",
          "fields": [
            {
              "default": "true",
              "doc": "当设置为“true”（默认）时，规则引擎将忽略发布到 $SYS 主题的消息。",
              "hash": "V-rule_engine-S-rule_engine-ignore_sys_message",
              "text": "ignore_sys_message",
              "type": "Boolean"
            },
            {
              "default": "\"10s\"",
              "doc": "规则引擎内建函数 `jq` 默认时间限制",
              "hash": "V-rule_engine-S-rule_engine-jq_function_default_timeout",
              "text": "jq_function_default_timeout",
              "type": "String"
            },
            {
              "default": "{}",
              "doc": "规则",
              "hash": "V-rule_engine-S-rule_engine-rules",
              "refs": [
                {
                  "doc": "配置规则",
                  "fields": [
                    {
                      "default": "\"\"",
                      "doc": "规则名字",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "doc": "用于处理消息的 SQL 。\n示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-sql",
                      "text": "sql",
                      "type": "String"
                    },
                    {
                      "default": "[]",
                      "doc": "规则的动作列表。\n动作可以是指向 EMQX bridge 的引用，也可以是一个指向函数的对象。\n我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。\n列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。\n如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。\n如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions",
                      "refs": [
                        {
                          "doc": "配置重新发布。",
                          "fields": [
                            {
                              "doc": "将消息重新发布为新的 MQTT 消息",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-function",
                              "text": "function",
                              "type": "String(\"republish\")"
                            },
                            {
                              "default": "{}",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args",
                              "refs": [
                                {
                                  "doc": "内置 'republish' 动作的参数。\n可以在参数中使用变量。\n变量是规则中选择的字段。 例如规则 SQL 定义如下：\n<code>\n    SELECT clientid, qos, payload FROM \"t/1\"\n</code>\n然后有 3 个变量可用：<code>clientid</code>、<code>qos</code> 和 <code>payload</code>。 如果我们将参数设置为：\n<code>\n    {\n        topic = \"t/${clientid}\"\n        qos = \"${qos}\"\n        payload = \"msg: ${payload}\"\n    }\n</code>\n当收到一条消息 payload = `hello`, qos = 1, clientid = `Steve` 时，将重新发布一条新的 MQTT 消息到主题 `t/Steve`\n消息内容为 payload = `msg: hello`, and `qos = 1",
                                  "fields": [
                                    {
                                      "doc": "重新发布消息的目标主题。\n允许使用带有变量的模板，请参阅“republish_args”的描述。",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-topic",
                                      "text": "topic",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${qos}\"",
                                      "doc": "要重新发布的消息的 qos。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${qos}。 如果从规则的选择结果中没有找到变量 ${qos}，则使用 0。",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-qos",
                                      "text": "qos",
                                      "type": "OneOf(Integer(0..2),String)"
                                    },
                                    {
                                      "default": "\"${retain}\"",
                                      "doc": "要重新发布的消息的“保留”标志。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${retain}。 如果从所选结果中未找到变量 ${retain}，则使用 false。",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-retain",
                                      "text": "retain",
                                      "type": "OneOf(Boolean,String)"
                                    },
                                    {
                                      "default": "\"${payload}\"",
                                      "doc": "要重新发布的消息的有效负载。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${payload}。 如果从所选结果中未找到变量 ${payload}，则使用字符串 \"undefined\"。",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-payload",
                                      "text": "payload",
                                      "type": "String"
                                    },
                                    {
                                      "default": "\"${user_properties}\"",
                                      "doc": "指定使用哪个变量来填充 MQTT 消息的 User-Property 列表。这个变量的值必须是一个 map 类型。\n可以设置成 <code>${pub_props.'User-Property'}</code> 或者\n使用 <code>SELECT *,pub_props.'User-Property' as user_properties</code> 来把源 MQTT 消息\n的 User-Property 列表用于填充。\n也可以使用 <code>map_put</code> 函数来添加新的 User-Property，\n<code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code>\n注意：MQTT 协议允许一个消息中出现多次同一个 property 名，但是 EMQX 的规则引擎不允许。",
                                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args-user_properties",
                                      "text": "user_properties",
                                      "type": "String"
                                    }
                                  ],
                                  "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish-args-S-republish_args",
                                  "text": "republish_args"
                                }
                              ],
                              "text": "args",
                              "type": "Struct(republish_args)"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_republish",
                          "text": "builtin_action_republish"
                        },
                        {
                          "doc": "配置打印到控制台",
                          "fields": [
                            {
                              "doc": "将输出打印到控制台",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_console-function",
                              "text": "function",
                              "type": "String(\"console\")"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-builtin_action_console",
                          "text": "builtin_action_console"
                        },
                        {
                          "doc": "配置用户函数",
                          "fields": [
                            {
                              "doc": "用户提供的函数。 格式应为：'{module}:{function}'。\n其中 {module} 是 Erlang 回调模块， {function} 是 Erlang 函数。\n要编写自己的函数，请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function-function",
                              "text": "function",
                              "type": "String"
                            },
                            {
                              "default": "{}",
                              "doc": "用户提供的参数将作为函数 module:function/3 的第三个参数，\n请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
                              "hash": "V-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function-args",
                              "text": "args",
                              "type": "Map"
                            }
                          ],
                          "hash": "T-rule_engine-S-rule_engine-rules-S-rules-actions-S-user_provided_function",
                          "text": "user_provided_function"
                        }
                      ],
                      "text": "actions",
                      "type": "Array(OneOf(String,Struct(builtin_action_republish),Struct(builtin_action_console),Struct(user_provided_function)))"
                    },
                    {
                      "default": "true",
                      "doc": "启用或禁用规则引擎",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "default": "\"\"",
                      "doc": "规则的描述",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-description",
                      "text": "description",
                      "type": "String"
                    },
                    {
                      "doc": "规则的元数据，不要手动修改",
                      "hash": "V-rule_engine-S-rule_engine-rules-S-rules-metadata",
                      "text": "metadata",
                      "type": "Map"
                    }
                  ],
                  "hash": "T-rule_engine-S-rule_engine-rules-S-rules",
                  "text": "rules"
                }
              ],
              "text": "rules",
              "type": "Map($id->Struct(rules))"
            }
          ],
          "hash": "T-rule_engine-S-rule_engine",
          "text": "rule_engine"
        }
      ],
      "text": "rule_engine",
      "type": "Struct(rule_engine)"
    },
    {
      "hash": "V-exhook",
      "refs": [
        {
          "doc": "External hook (exhook) configuration.",
          "fields": [
            {
              "default": "[]",
              "doc": "ExHook 服务器列表",
              "hash": "V-exhook-S-exhook-servers",
              "refs": [
                {
                  "doc": "gRPC server configuration.",
                  "fields": [
                    {
                      "doc": "ExHook 服务器名称",
                      "hash": "V-exhook-S-exhook-servers-S-server-name",
                      "text": "name",
                      "type": "String"
                    },
                    {
                      "default": "true",
                      "doc": "开启这个 Exhook 服务器",
                      "hash": "V-exhook-S-exhook-servers-S-server-enable",
                      "text": "enable",
                      "type": "Boolean"
                    },
                    {
                      "doc": "gRPC 服务器地址",
                      "hash": "V-exhook-S-exhook-servers-S-server-url",
                      "text": "url",
                      "type": "String"
                    },
                    {
                      "default": "\"5s\"",
                      "doc": "gRPC 服务器请求超时时间",
                      "hash": "V-exhook-S-exhook-servers-S-server-request_timeout",
                      "text": "request_timeout",
                      "type": "String"
                    },
                    {
                      "default": "deny",
                      "doc": "当 gRPC 请求失败后的操作",
                      "hash": "V-exhook-S-exhook-servers-S-server-failed_action",
                      "text": "failed_action",
                      "type": "Enum(deny,ignore)"
                    },
                    {
                      "hash": "V-exhook-S-exhook-servers-S-server-ssl",
                      "refs": [
                        {
                          "doc": "SSL client configuration.",
                          "fields": [
                            {
                              "doc": "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-cacertfile",
                              "text": "cacertfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-certfile",
                              "text": "certfile",
                              "type": "String"
                            },
                            {
                              "doc": "PEM格式的私钥文件。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-keyfile",
                              "text": "keyfile",
                              "type": "String"
                            },
                            {
                              "default": "verify_none",
                              "doc": "启用或禁用对等验证。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-verify",
                              "text": "verify",
                              "type": "Enum(verify_peer,verify_none)"
                            },
                            {
                              "default": "true",
                              "doc": "启用 TLS 会话重用。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-reuse_sessions",
                              "text": "reuse_sessions",
                              "type": "Boolean"
                            },
                            {
                              "default": "10",
                              "doc": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-depth",
                              "text": "depth",
                              "type": "Integer"
                            },
                            {
                              "doc": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-password",
                              "text": "password",
                              "type": "String"
                            },
                            {
                              "default": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
                              "doc": "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-versions",
                              "text": "versions",
                              "type": "Array(String)"
                            },
                            {
                              "default": "[]",
                              "doc": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-ciphers",
                              "text": "ciphers",
                              "type": "Array(String)"
                            },
                            {
                              "default": "true",
                              "doc": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-secure_renegotiate",
                              "text": "secure_renegotiate",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"5s\"",
                              "doc": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-hibernate_after",
                              "text": "hibernate_after",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "启用 TLS。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-enable",
                              "text": "enable",
                              "type": "Boolean"
                            },
                            {
                              "doc": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash": "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-server_name_indication",
                              "text": "server_name_indication",
                              "type": "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "hash": "T-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf",
                          "text": "ssl_conf"
                        }
                      ],
                      "text": "ssl",
                      "type": "Struct(ssl_conf)"
                    },
                    {
                      "default": "{keepalive = true, nodelay = true}",
                      "hash": "V-exhook-S-exhook-servers-S-server-socket_options",
                      "refs": [
                        {
                          "doc": "连接套接字设置",
                          "fields": [
                            {
                              "default": "true",
                              "doc": "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-keepalive",
                              "text": "keepalive",
                              "type": "Boolean"
                            },
                            {
                              "default": "true",
                              "doc": "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-nodelay",
                              "text": "nodelay",
                              "type": "Boolean"
                            },
                            {
                              "doc": "套接字的最小接收缓冲区大小",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-recbuf",
                              "text": "recbuf",
                              "type": "String"
                            },
                            {
                              "doc": "套接字的最小发送缓冲区大小",
                              "hash": "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-sndbuf",
                              "text": "sndbuf",
                              "type": "String"
                            }
                          ],
                          "hash": "T-exhook-S-exhook-servers-S-server-socket_options-S-socket_options",
                          "text": "socket_options"
                        }
                      ],
                      "text": "socket_options",
                      "type": "Struct(socket_options)"
                    },
                    {
                      "default": "\"60s\"",
                      "doc": "自动重连到 gRPC 服务器的设置。\n当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
                      "hash": "V-exhook-S-exhook-servers-S-server-auto_reconnect",
                      "text": "auto_reconnect",
                      "type": "OneOf(String(\"false\"),String)"
                    },
                    {
                      "default": "8",
                      "doc": "gRPC 客户端进程池大小",
                      "hash": "V-exhook-S-exhook-servers-S-server-pool_size",
                      "text": "pool_size",
                      "type": "Integer(1..+inf)"
                    }
                  ],
                  "hash": "T-exhook-S-exhook-servers-S-server",
                  "text": "server"
                }
              ],
              "text": "servers",
              "type": "Array(Struct(server))"
            }
          ],
          "hash": "T-exhook-S-exhook",
          "text": "exhook"
        }
      ],
      "text": "exhook",
      "type": "Struct(exhook)"
    },
    {
      "hash": "V-psk_authentication",
      "refs": [
        {
          "doc": "此配置用于启用 TLS-PSK 身份验证。\n\nPSK 是 “Pre-Shared-Keys” 的缩写。\n\n注意: 确保 SSL 监听器仅启用了 'tlsv1.2'，并且配置了PSK 密码套件，例如 'RSA-PSK-AES256-GCM-SHA384'。\n\n可以通过查看监听器中的 SSL 选项，了解更多详细信息。\n\n可以通过配置 'init_file' 来设置初始化的 ID 和 密钥",
          "fields": [
            {
              "default": "false",
              "doc": "是否开启 TLS PSK 支持",
              "hash": "V-psk_authentication-S-psk_authentication-enable",
              "text": "enable",
              "type": "Boolean"
            },
            {
              "doc": "如果设置了初始化文件，EMQX 将在启动时从初始化文件中导入 PSK 信息到内建数据库中。\n这个文件需要按行进行组织，每一行必须遵守如下格式: <code>PSKIdentity:SharedSecret</code>\n例如: <code>mydevice1:c2VjcmV0</code>",
              "hash": "V-psk_authentication-S-psk_authentication-init_file",
              "text": "init_file",
              "type": "String"
            },
            {
              "default": "\":\"",
              "doc": "PSK 文件中 <code>PSKIdentity</code> 和 <code>SharedSecret</code> 之间的分隔符",
              "hash": "V-psk_authentication-S-psk_authentication-separator",
              "text": "separator",
              "type": "String"
            },
            {
              "default": "50",
              "doc": "将 PSK 文件导入到内建数据时每个块的大小",
              "hash": "V-psk_authentication-S-psk_authentication-chunk_size",
              "text": "chunk_size",
              "type": "Integer"
            }
          ],
          "hash": "T-psk_authentication-S-psk_authentication",
          "text": "psk_authentication"
        }
      ],
      "text": "psk_authentication",
      "type": "Struct(psk_authentication)"
    },
    {
      "hash": "V-limiter",
      "refs": [
        {
          "doc": "Settings for the rate limiter.",
          "fields": [
            {
              "default": "{}",
              "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
              "hash": "V-limiter-S-limiter-bytes_in",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "桶的令牌生成速率",
                      "hash": "V-limiter-S-limiter-bytes_in-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                      "hash": "V-limiter-S-limiter-bytes_in-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-bytes_in-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "bytes_in",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
              "hash": "V-limiter-S-limiter-message_in",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "桶的令牌生成速率",
                      "hash": "V-limiter-S-limiter-message_in-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                      "hash": "V-limiter-S-limiter-message_in-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-message_in-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "message_in",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
              "hash": "V-limiter-S-limiter-connection",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "桶的令牌生成速率",
                      "hash": "V-limiter-S-limiter-connection-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                      "hash": "V-limiter-S-limiter-connection-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-connection-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "connection",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
              "hash": "V-limiter-S-limiter-message_routing",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "桶的令牌生成速率",
                      "hash": "V-limiter-S-limiter-message_routing-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                      "hash": "V-limiter-S-limiter-message_routing-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-message_routing-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "message_routing",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{}",
              "doc": "EMQX 内部功能所用限制器。",
              "hash": "V-limiter-S-limiter-internal",
              "refs": [
                {
                  "doc": "Settings for the limiter of the node level.",
                  "fields": [
                    {
                      "default": "\"infinity\"",
                      "doc": "桶的令牌生成速率",
                      "hash": "V-limiter-S-limiter-internal-S-node_opts-rate",
                      "text": "rate",
                      "type": "String"
                    },
                    {
                      "default": "\"0\"",
                      "doc": "突发速率。\n突发速率允许短时间内速率超过设置的速率值，突发速率 + 速率 = 当前桶能达到的最大速率值",
                      "hash": "V-limiter-S-limiter-internal-S-node_opts-burst",
                      "text": "burst",
                      "type": "String"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-internal-S-node_opts",
                  "text": "node_opts"
                }
              ],
              "text": "internal",
              "type": "Struct(node_opts)"
            },
            {
              "default": "{\n  bytes_in {}\n  connection {}\n  internal {}\n  message_in {}\n  message_routing {}\n}\n",
              "doc": "对桶的每个使用者的速率控制设置",
              "hash": "V-limiter-S-limiter-client",
              "refs": [
                {
                  "doc": "Fields of the client level.",
                  "fields": [
                    {
                      "default": "{}",
                      "doc": "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "每个使用者的令牌容量上限",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "申请的令牌数是否可以被分割",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "申请失败后，尝试重新申请的时长最大值",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "当所有的重试都失败后的处理策略",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-bytes_in-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "bytes_in",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-message_in",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "每个使用者的令牌容量上限",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "申请的令牌数是否可以被分割",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "申请失败后，尝试重新申请的时长最大值",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "当所有的重试都失败后的处理策略",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-message_in-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "message_in",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "连接速率控制器。\n这个用来控制当前节点上的连接速率，当达到最大速率后，新的连接将会被拒绝",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-connection",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "每个使用者的令牌容量上限",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "申请的令牌数是否可以被分割",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "申请失败后，尝试重新申请的时长最大值",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "当所有的重试都失败后的处理策略",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-connection-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-connection-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "connection",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "消息派发速率控制器。\n这个用来控制当前节点内的消息派发速率，当达到最大速率后，新的推送将会被拒绝",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "每个使用者的令牌容量上限",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "申请的令牌数是否可以被分割",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "申请失败后，尝试重新申请的时长最大值",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "当所有的重试都失败后的处理策略",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-message_routing-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "message_routing",
                      "type": "Struct(client_opts)"
                    },
                    {
                      "default": "{}",
                      "doc": "EMQX 内部功能所用限制器。",
                      "hash": "V-limiter-S-limiter-client-S-client_fields-internal",
                      "refs": [
                        {
                          "doc": "Settings for the client in bucket level.",
                          "fields": [
                            {
                              "default": "\"infinity\"",
                              "doc": "桶的令牌生成速率",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-rate",
                              "text": "rate",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "桶中的初始令牌数",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-initial",
                              "text": "initial",
                              "type": "String"
                            },
                            {
                              "default": "\"0\"",
                              "doc": "当桶中剩余的令牌数低于这个值，即使令牌申请成功了，也会被强制暂停一会儿",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-low_watermark",
                              "text": "low_watermark",
                              "type": "String"
                            },
                            {
                              "default": "\"infinity\"",
                              "doc": "每个使用者的令牌容量上限",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-capacity",
                              "text": "capacity",
                              "type": "String"
                            },
                            {
                              "default": "false",
                              "doc": "申请的令牌数是否可以被分割",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-divisible",
                              "text": "divisible",
                              "type": "Boolean"
                            },
                            {
                              "default": "\"10s\"",
                              "doc": "申请失败后，尝试重新申请的时长最大值",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-max_retry_time",
                              "text": "max_retry_time",
                              "type": "String"
                            },
                            {
                              "default": "force",
                              "doc": "当所有的重试都失败后的处理策略",
                              "hash": "V-limiter-S-limiter-client-S-client_fields-internal-S-client_opts-failure_strategy",
                              "text": "failure_strategy",
                              "type": "String"
                            }
                          ],
                          "hash": "T-limiter-S-limiter-client-S-client_fields-internal-S-client_opts",
                          "text": "client_opts"
                        }
                      ],
                      "text": "internal",
                      "type": "Struct(client_opts)"
                    }
                  ],
                  "hash": "T-limiter-S-limiter-client-S-client_fields",
                  "text": "client_fields"
                }
              ],
              "text": "client",
              "type": "Struct(client_fields)"
            }
          ],
          "hash": "T-limiter-S-limiter",
          "text": "limiter"
        }
      ],
      "text": "limiter",
      "type": "Struct(limiter)"
    },
    {
      "hash": "V-api_key",
      "refs": [
        {
          "doc": "API 密钥， 可用于请求除管理 API 密钥及 Dashboard 用户管理 API 的其它接口",
          "fields": [
            {
              "default": "\"\"",
              "doc": "用于在启动 emqx 时，添加 API 密钥，其格式为：\n      ```\n      7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n      ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n      ```",
              "hash": "V-api_key-S-api_key-bootstrap_file",
              "text": "bootstrap_file",
              "type": "String"
            }
          ],
          "hash": "T-api_key-S-api_key",
          "text": "api_key"
        }
      ],
      "text": "api_key",
      "type": "Struct(api_key)"
    },
    {
      "doc": "EMQX企业许可证。\nEMQX 自带一个默认的试用许可证，默认试用许可允许最多接入 100 个连接，签发时间是 2023年1月9日，有效期是 5 年（1825 天）。若需要在生产环境部署，\n请访问 https://www.emqx.com/apply-licenses/emqx 来申请。",
      "hash": "V-license",
      "refs": [
        {
          "doc": "License provisioned as a string.",
          "fields": [
            {
              "default": "\"MjIwMTExCjAKMTAKRXZhbHVhdGlvbgpjb250YWN0QGVtcXguaW8KZGVmYXVsdAoyMDIzMDEwOQoxODI1CjEwMAo=.MEUCIG62t8W15g05f1cKx3tA3YgJoR0dmyHOPCdbUxBGxgKKAiEAhHKh8dUwhU+OxNEaOn8mgRDtiT3R8RZooqy6dEsOmDI=\"",
              "doc": "许可证字符串",
              "hash": "V-license-S-key_license-key",
              "text": "key",
              "type": "String"
            },
            {
              "default": "\"75%\"",
              "doc": "低水位限制，低于此水位线时系统会清除连接配额使用告警",
              "hash": "V-license-S-key_license-connection_low_watermark",
              "text": "connection_low_watermark",
              "type": "String"
            },
            {
              "default": "\"80%\"",
              "doc": "高水位线，连接数超过这个水位线时，系统会触发许可证连接配额使用告警",
              "hash": "V-license-S-key_license-connection_high_watermark",
              "text": "connection_high_watermark",
              "type": "String"
            }
          ],
          "hash": "T-license-S-key_license",
          "text": "key_license"
        }
      ],
      "text": "license",
      "type": "Struct(key_license)"
    },
    {
      "hash": "V-schema_registry",
      "refs": [
        {
          "doc": "模式注册表的配置。",
          "fields": [
            {
              "default": "{}",
              "doc": "注册的模式。",
              "hash": "V-schema_registry-S-schema_registry-schemas",
              "refs": [
                {
                  "doc": "[阿帕奇-阿夫罗](https://avro.apache.org/) 序列化格式。",
                  "fields": [
                    {
                      "doc": "模式类型。",
                      "hash": "V-schema_registry-S-schema_registry-schemas-S-avro-type",
                      "text": "type",
                      "type": "String(\"avro\")"
                    },
                    {
                      "doc": "模式的源文本。",
                      "hash": "V-schema_registry-S-schema_registry-schemas-S-avro-source",
                      "text": "source",
                      "type": "String"
                    },
                    {
                      "default": "\"\"",
                      "doc": "对该模式的描述。",
                      "hash": "V-schema_registry-S-schema_registry-schemas-S-avro-description",
                      "text": "description",
                      "type": "String"
                    }
                  ],
                  "hash": "T-schema_registry-S-schema_registry-schemas-S-avro",
                  "text": "avro"
                }
              ],
              "text": "schemas",
              "type": "Map($name->OneOf(Struct(avro)))"
            }
          ],
          "hash": "T-schema_registry-S-schema_registry",
          "text": "schema_registry"
        }
      ],
      "text": "schema_registry",
      "type": "Struct(schema_registry)"
    }
  ],
  "hash": "T-root",
  "text": "root"
}
